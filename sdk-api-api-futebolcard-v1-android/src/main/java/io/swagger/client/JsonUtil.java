/**
 * API do Futebolcard
 * Futebolcard manipulation API
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import io.swagger.client.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Coordinate".equalsIgnoreCase(className)) {
      return new TypeToken<List<Coordinate>>(){}.getType();
    }
    
    if ("Error".equalsIgnoreCase(className)) {
      return new TypeToken<List<Error>>(){}.getType();
    }
    
    if ("Events".equalsIgnoreCase(className)) {
      return new TypeToken<List<Events>>(){}.getType();
    }
    
    if ("EventseventIdsectorssectorIdsubsectorssubsectorIdSeats".equalsIgnoreCase(className)) {
      return new TypeToken<List<EventseventIdsectorssectorIdsubsectorssubsectorIdSeats>>(){}.getType();
    }
    
    if ("Gates".equalsIgnoreCase(className)) {
      return new TypeToken<List<Gates>>(){}.getType();
    }
    
    if ("InlineResponse200".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse200>>(){}.getType();
    }
    
    if ("InlineResponse2001".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2001>>(){}.getType();
    }
    
    if ("InlineResponse2001Gates".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2001Gates>>(){}.getType();
    }
    
    if ("InlineResponse2001Map".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2001Map>>(){}.getType();
    }
    
    if ("InlineResponse2001MapCoordinates".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2001MapCoordinates>>(){}.getType();
    }
    
    if ("InlineResponse2001Sectors".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2001Sectors>>(){}.getType();
    }
    
    if ("InlineResponse2002".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2002>>(){}.getType();
    }
    
    if ("InlineResponse2002Subsectors".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2002Subsectors>>(){}.getType();
    }
    
    if ("InlineResponse2003".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2003>>(){}.getType();
    }
    
    if ("InlineResponse400".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse400>>(){}.getType();
    }
    
    if ("Row".equalsIgnoreCase(className)) {
      return new TypeToken<List<Row>>(){}.getType();
    }
    
    if ("Seat".equalsIgnoreCase(className)) {
      return new TypeToken<List<Seat>>(){}.getType();
    }
    
    if ("SectorDetail".equalsIgnoreCase(className)) {
      return new TypeToken<List<SectorDetail>>(){}.getType();
    }
    
    if ("Sectors".equalsIgnoreCase(className)) {
      return new TypeToken<List<Sectors>>(){}.getType();
    }
    
    if ("SubSectorDetails".equalsIgnoreCase(className)) {
      return new TypeToken<List<SubSectorDetails>>(){}.getType();
    }
    
    if ("SubSectors".equalsIgnoreCase(className)) {
      return new TypeToken<List<SubSectors>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Coordinate".equalsIgnoreCase(className)) {
      return new TypeToken<Coordinate>(){}.getType();
    }
    
    if ("Error".equalsIgnoreCase(className)) {
      return new TypeToken<Error>(){}.getType();
    }
    
    if ("Events".equalsIgnoreCase(className)) {
      return new TypeToken<Events>(){}.getType();
    }
    
    if ("EventseventIdsectorssectorIdsubsectorssubsectorIdSeats".equalsIgnoreCase(className)) {
      return new TypeToken<EventseventIdsectorssectorIdsubsectorssubsectorIdSeats>(){}.getType();
    }
    
    if ("Gates".equalsIgnoreCase(className)) {
      return new TypeToken<Gates>(){}.getType();
    }
    
    if ("InlineResponse200".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse200>(){}.getType();
    }
    
    if ("InlineResponse2001".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2001>(){}.getType();
    }
    
    if ("InlineResponse2001Gates".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2001Gates>(){}.getType();
    }
    
    if ("InlineResponse2001Map".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2001Map>(){}.getType();
    }
    
    if ("InlineResponse2001MapCoordinates".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2001MapCoordinates>(){}.getType();
    }
    
    if ("InlineResponse2001Sectors".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2001Sectors>(){}.getType();
    }
    
    if ("InlineResponse2002".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2002>(){}.getType();
    }
    
    if ("InlineResponse2002Subsectors".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2002Subsectors>(){}.getType();
    }
    
    if ("InlineResponse2003".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2003>(){}.getType();
    }
    
    if ("InlineResponse400".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse400>(){}.getType();
    }
    
    if ("Row".equalsIgnoreCase(className)) {
      return new TypeToken<Row>(){}.getType();
    }
    
    if ("Seat".equalsIgnoreCase(className)) {
      return new TypeToken<Seat>(){}.getType();
    }
    
    if ("SectorDetail".equalsIgnoreCase(className)) {
      return new TypeToken<SectorDetail>(){}.getType();
    }
    
    if ("Sectors".equalsIgnoreCase(className)) {
      return new TypeToken<Sectors>(){}.getType();
    }
    
    if ("SubSectorDetails".equalsIgnoreCase(className)) {
      return new TypeToken<SubSectorDetails>(){}.getType();
    }
    
    if ("SubSectors".equalsIgnoreCase(className)) {
      return new TypeToken<SubSectors>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
