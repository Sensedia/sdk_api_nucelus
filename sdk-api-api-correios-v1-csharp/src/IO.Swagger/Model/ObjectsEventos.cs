/* 
 * API dos Correios
 *
 * Postal Object tracking API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Customer Model
    /// </summary>
    [DataContract]
    public partial class ObjectsEventos :  IEquatable<ObjectsEventos>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectsEventos" /> class.
        /// </summary>
        /// <param name="ObjectCode">.</param>
        /// <param name="EventType">.</param>
        /// <param name="EventStatus">.</param>
        /// <param name="EventDescription">.</param>
        /// <param name="UnitName">.</param>
        /// <param name="SROCode">.</param>
        /// <param name="County">.</param>
        /// <param name="State">.</param>
        /// <param name="MCUCode">.</param>
        /// <param name="DRCode">.</param>
        /// <param name="DRAbbreviation">.</param>
        /// <param name="ListNumber">.</param>
        /// <param name="Station">.</param>
        /// <param name="User">.</param>
        /// <param name="RecordingDate">.</param>
        /// <param name="Deliveryman">.</param>
        /// <param name="CreationDate">.</param>
        /// <param name="BlockAction">.</param>
        public ObjectsEventos(string ObjectCode = default(string), string EventType = default(string), int? EventStatus = default(int?), string EventDescription = default(string), string UnitName = default(string), string SROCode = default(string), string County = default(string), string State = default(string), string MCUCode = default(string), string DRCode = default(string), string DRAbbreviation = default(string), string ListNumber = default(string), int? Station = default(int?), string User = default(string), string RecordingDate = default(string), string Deliveryman = default(string), string CreationDate = default(string), int? BlockAction = default(int?))
        {
            this.ObjectCode = ObjectCode;
            this.EventType = EventType;
            this.EventStatus = EventStatus;
            this.EventDescription = EventDescription;
            this.UnitName = UnitName;
            this.SROCode = SROCode;
            this.County = County;
            this.State = State;
            this.MCUCode = MCUCode;
            this.DRCode = DRCode;
            this.DRAbbreviation = DRAbbreviation;
            this.ListNumber = ListNumber;
            this.Station = Station;
            this.User = User;
            this.RecordingDate = RecordingDate;
            this.Deliveryman = Deliveryman;
            this.CreationDate = CreationDate;
            this.BlockAction = BlockAction;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="objectCode", EmitDefaultValue=false)]
        public string ObjectCode { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="eventType", EmitDefaultValue=false)]
        public string EventType { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="eventStatus", EmitDefaultValue=false)]
        public int? EventStatus { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="eventDescription", EmitDefaultValue=false)]
        public string EventDescription { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="unitName", EmitDefaultValue=false)]
        public string UnitName { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="SROCode", EmitDefaultValue=false)]
        public string SROCode { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="county", EmitDefaultValue=false)]
        public string County { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="MCUCode", EmitDefaultValue=false)]
        public string MCUCode { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="DRCode", EmitDefaultValue=false)]
        public string DRCode { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="DRAbbreviation", EmitDefaultValue=false)]
        public string DRAbbreviation { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="listNumber", EmitDefaultValue=false)]
        public string ListNumber { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="station", EmitDefaultValue=false)]
        public int? Station { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public string User { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="recordingDate", EmitDefaultValue=false)]
        public string RecordingDate { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="deliveryman", EmitDefaultValue=false)]
        public string Deliveryman { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="creationDate", EmitDefaultValue=false)]
        public string CreationDate { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="blockAction", EmitDefaultValue=false)]
        public int? BlockAction { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ObjectsEventos {\n");
            sb.Append("  ObjectCode: ").Append(ObjectCode).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  EventStatus: ").Append(EventStatus).Append("\n");
            sb.Append("  EventDescription: ").Append(EventDescription).Append("\n");
            sb.Append("  UnitName: ").Append(UnitName).Append("\n");
            sb.Append("  SROCode: ").Append(SROCode).Append("\n");
            sb.Append("  County: ").Append(County).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  MCUCode: ").Append(MCUCode).Append("\n");
            sb.Append("  DRCode: ").Append(DRCode).Append("\n");
            sb.Append("  DRAbbreviation: ").Append(DRAbbreviation).Append("\n");
            sb.Append("  ListNumber: ").Append(ListNumber).Append("\n");
            sb.Append("  Station: ").Append(Station).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  RecordingDate: ").Append(RecordingDate).Append("\n");
            sb.Append("  Deliveryman: ").Append(Deliveryman).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  BlockAction: ").Append(BlockAction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ObjectsEventos);
        }

        /// <summary>
        /// Returns true if ObjectsEventos instances are equal
        /// </summary>
        /// <param name="other">Instance of ObjectsEventos to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ObjectsEventos other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ObjectCode == other.ObjectCode ||
                    this.ObjectCode != null &&
                    this.ObjectCode.Equals(other.ObjectCode)
                ) && 
                (
                    this.EventType == other.EventType ||
                    this.EventType != null &&
                    this.EventType.Equals(other.EventType)
                ) && 
                (
                    this.EventStatus == other.EventStatus ||
                    this.EventStatus != null &&
                    this.EventStatus.Equals(other.EventStatus)
                ) && 
                (
                    this.EventDescription == other.EventDescription ||
                    this.EventDescription != null &&
                    this.EventDescription.Equals(other.EventDescription)
                ) && 
                (
                    this.UnitName == other.UnitName ||
                    this.UnitName != null &&
                    this.UnitName.Equals(other.UnitName)
                ) && 
                (
                    this.SROCode == other.SROCode ||
                    this.SROCode != null &&
                    this.SROCode.Equals(other.SROCode)
                ) && 
                (
                    this.County == other.County ||
                    this.County != null &&
                    this.County.Equals(other.County)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.MCUCode == other.MCUCode ||
                    this.MCUCode != null &&
                    this.MCUCode.Equals(other.MCUCode)
                ) && 
                (
                    this.DRCode == other.DRCode ||
                    this.DRCode != null &&
                    this.DRCode.Equals(other.DRCode)
                ) && 
                (
                    this.DRAbbreviation == other.DRAbbreviation ||
                    this.DRAbbreviation != null &&
                    this.DRAbbreviation.Equals(other.DRAbbreviation)
                ) && 
                (
                    this.ListNumber == other.ListNumber ||
                    this.ListNumber != null &&
                    this.ListNumber.Equals(other.ListNumber)
                ) && 
                (
                    this.Station == other.Station ||
                    this.Station != null &&
                    this.Station.Equals(other.Station)
                ) && 
                (
                    this.User == other.User ||
                    this.User != null &&
                    this.User.Equals(other.User)
                ) && 
                (
                    this.RecordingDate == other.RecordingDate ||
                    this.RecordingDate != null &&
                    this.RecordingDate.Equals(other.RecordingDate)
                ) && 
                (
                    this.Deliveryman == other.Deliveryman ||
                    this.Deliveryman != null &&
                    this.Deliveryman.Equals(other.Deliveryman)
                ) && 
                (
                    this.CreationDate == other.CreationDate ||
                    this.CreationDate != null &&
                    this.CreationDate.Equals(other.CreationDate)
                ) && 
                (
                    this.BlockAction == other.BlockAction ||
                    this.BlockAction != null &&
                    this.BlockAction.Equals(other.BlockAction)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ObjectCode != null)
                    hash = hash * 59 + this.ObjectCode.GetHashCode();
                if (this.EventType != null)
                    hash = hash * 59 + this.EventType.GetHashCode();
                if (this.EventStatus != null)
                    hash = hash * 59 + this.EventStatus.GetHashCode();
                if (this.EventDescription != null)
                    hash = hash * 59 + this.EventDescription.GetHashCode();
                if (this.UnitName != null)
                    hash = hash * 59 + this.UnitName.GetHashCode();
                if (this.SROCode != null)
                    hash = hash * 59 + this.SROCode.GetHashCode();
                if (this.County != null)
                    hash = hash * 59 + this.County.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.MCUCode != null)
                    hash = hash * 59 + this.MCUCode.GetHashCode();
                if (this.DRCode != null)
                    hash = hash * 59 + this.DRCode.GetHashCode();
                if (this.DRAbbreviation != null)
                    hash = hash * 59 + this.DRAbbreviation.GetHashCode();
                if (this.ListNumber != null)
                    hash = hash * 59 + this.ListNumber.GetHashCode();
                if (this.Station != null)
                    hash = hash * 59 + this.Station.GetHashCode();
                if (this.User != null)
                    hash = hash * 59 + this.User.GetHashCode();
                if (this.RecordingDate != null)
                    hash = hash * 59 + this.RecordingDate.GetHashCode();
                if (this.Deliveryman != null)
                    hash = hash * 59 + this.Deliveryman.GetHashCode();
                if (this.CreationDate != null)
                    hash = hash * 59 + this.CreationDate.GetHashCode();
                if (this.BlockAction != null)
                    hash = hash * 59 + this.BlockAction.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
