/* 
 * API dos Correios
 *
 * Postal Object tracking API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Customer Model
    /// </summary>
    [DataContract]
    public partial class ZipcodeRange :  IEquatable<ZipcodeRange>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ZipcodeRange" /> class.
        /// </summary>
        /// <param name="County">County&#39;s name.</param>
        /// <param name="Start">Zipcode range start.</param>
        /// <param name="End">Zipcode range end.</param>
        public ZipcodeRange(string County = default(string), string Start = default(string), string End = default(string))
        {
            this.County = County;
            this.Start = Start;
            this.End = End;
        }
        
        /// <summary>
        /// County&#39;s name
        /// </summary>
        /// <value>County&#39;s name</value>
        [DataMember(Name="county", EmitDefaultValue=false)]
        public string County { get; set; }
        /// <summary>
        /// Zipcode range start
        /// </summary>
        /// <value>Zipcode range start</value>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public string Start { get; set; }
        /// <summary>
        /// Zipcode range end
        /// </summary>
        /// <value>Zipcode range end</value>
        [DataMember(Name="end", EmitDefaultValue=false)]
        public string End { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ZipcodeRange {\n");
            sb.Append("  County: ").Append(County).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ZipcodeRange);
        }

        /// <summary>
        /// Returns true if ZipcodeRange instances are equal
        /// </summary>
        /// <param name="other">Instance of ZipcodeRange to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ZipcodeRange other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.County == other.County ||
                    this.County != null &&
                    this.County.Equals(other.County)
                ) && 
                (
                    this.Start == other.Start ||
                    this.Start != null &&
                    this.Start.Equals(other.Start)
                ) && 
                (
                    this.End == other.End ||
                    this.End != null &&
                    this.End.Equals(other.End)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.County != null)
                    hash = hash * 59 + this.County.GetHashCode();
                if (this.Start != null)
                    hash = hash * 59 + this.Start.GetHashCode();
                if (this.End != null)
                    hash = hash * 59 + this.End.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
