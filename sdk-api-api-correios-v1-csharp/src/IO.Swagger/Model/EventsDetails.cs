/* 
 * API dos Correios
 *
 * Postal Object tracking API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Customer Model
    /// </summary>
    [DataContract]
    public partial class EventsDetails :  IEquatable<EventsDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventsDetails" /> class.
        /// </summary>
        /// <param name="EventType">.</param>
        /// <param name="EventStatus">.</param>
        /// <param name="EventDescription">.</param>
        public EventsDetails(string EventType = default(string), int? EventStatus = default(int?), string EventDescription = default(string))
        {
            this.EventType = EventType;
            this.EventStatus = EventStatus;
            this.EventDescription = EventDescription;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="eventType", EmitDefaultValue=false)]
        public string EventType { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="eventStatus", EmitDefaultValue=false)]
        public int? EventStatus { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="eventDescription", EmitDefaultValue=false)]
        public string EventDescription { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventsDetails {\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  EventStatus: ").Append(EventStatus).Append("\n");
            sb.Append("  EventDescription: ").Append(EventDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as EventsDetails);
        }

        /// <summary>
        /// Returns true if EventsDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of EventsDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventsDetails other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.EventType == other.EventType ||
                    this.EventType != null &&
                    this.EventType.Equals(other.EventType)
                ) && 
                (
                    this.EventStatus == other.EventStatus ||
                    this.EventStatus != null &&
                    this.EventStatus.Equals(other.EventStatus)
                ) && 
                (
                    this.EventDescription == other.EventDescription ||
                    this.EventDescription != null &&
                    this.EventDescription.Equals(other.EventDescription)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.EventType != null)
                    hash = hash * 59 + this.EventType.GetHashCode();
                if (this.EventStatus != null)
                    hash = hash * 59 + this.EventStatus.GetHashCode();
                if (this.EventDescription != null)
                    hash = hash * 59 + this.EventDescription.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
