/* 
 * API dos Correios
 *
 * API de rastreios de Objetos Postais
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Customer Model
    /// </summary>
    [DataContract]
    public partial class InlineResponse2001 :  IEquatable<InlineResponse2001>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2001" /> class.
        /// </summary>
        /// <param name="Logradouro">Nome do logradouro.</param>
        /// <param name="Bairro">Nome do Bairro.</param>
        /// <param name="Municipio">Nome do municipio.</param>
        /// <param name="Uf">Estado.</param>
        public InlineResponse2001(string Logradouro = default(string), string Bairro = default(string), string Municipio = default(string), string Uf = default(string))
        {
            this.Logradouro = Logradouro;
            this.Bairro = Bairro;
            this.Municipio = Municipio;
            this.Uf = Uf;
        }
        
        /// <summary>
        /// Nome do logradouro
        /// </summary>
        /// <value>Nome do logradouro</value>
        [DataMember(Name="logradouro", EmitDefaultValue=false)]
        public string Logradouro { get; set; }
        /// <summary>
        /// Nome do Bairro
        /// </summary>
        /// <value>Nome do Bairro</value>
        [DataMember(Name="bairro", EmitDefaultValue=false)]
        public string Bairro { get; set; }
        /// <summary>
        /// Nome do municipio
        /// </summary>
        /// <value>Nome do municipio</value>
        [DataMember(Name="municipio", EmitDefaultValue=false)]
        public string Municipio { get; set; }
        /// <summary>
        /// Estado
        /// </summary>
        /// <value>Estado</value>
        [DataMember(Name="uf", EmitDefaultValue=false)]
        public string Uf { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2001 {\n");
            sb.Append("  Logradouro: ").Append(Logradouro).Append("\n");
            sb.Append("  Bairro: ").Append(Bairro).Append("\n");
            sb.Append("  Municipio: ").Append(Municipio).Append("\n");
            sb.Append("  Uf: ").Append(Uf).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InlineResponse2001);
        }

        /// <summary>
        /// Returns true if InlineResponse2001 instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse2001 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2001 other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Logradouro == other.Logradouro ||
                    this.Logradouro != null &&
                    this.Logradouro.Equals(other.Logradouro)
                ) && 
                (
                    this.Bairro == other.Bairro ||
                    this.Bairro != null &&
                    this.Bairro.Equals(other.Bairro)
                ) && 
                (
                    this.Municipio == other.Municipio ||
                    this.Municipio != null &&
                    this.Municipio.Equals(other.Municipio)
                ) && 
                (
                    this.Uf == other.Uf ||
                    this.Uf != null &&
                    this.Uf.Equals(other.Uf)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Logradouro != null)
                    hash = hash * 59 + this.Logradouro.GetHashCode();
                if (this.Bairro != null)
                    hash = hash * 59 + this.Bairro.GetHashCode();
                if (this.Municipio != null)
                    hash = hash * 59 + this.Municipio.GetHashCode();
                if (this.Uf != null)
                    hash = hash * 59 + this.Uf.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
