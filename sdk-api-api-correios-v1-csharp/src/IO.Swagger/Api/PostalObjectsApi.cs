/* 
 * API dos Correios
 *
 * Postal Object tracking API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPostalObjectsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the list of possible event status for a given postal events.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventType">Event type to be searched.</param>
        /// <param name="eventStatus">Filter the search by a certain event status. (optional)</param>
        /// <returns>List&lt;InlineResponse2002&gt;</returns>
        List<InlineResponse2002> EventsEventTypeGet (string clientId, string accessToken, string eventType, string eventStatus = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the list of possible event status for a given postal events.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventType">Event type to be searched.</param>
        /// <param name="eventStatus">Filter the search by a certain event status. (optional)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2002&gt;</returns>
        ApiResponse<List<InlineResponse2002>> EventsEventTypeGetWithHttpInfo (string clientId, string accessToken, string eventType, string eventStatus = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for the events related to a list of postal objects.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="objectCode">List of comma separated codes to be consulted.</param>
        /// <returns>List&lt;InlineResponse2003&gt;</returns>
        List<InlineResponse2003> ObjectsGet (string clientId, string accessToken, string objectCode);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for the events related to a list of postal objects.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="objectCode">List of comma separated codes to be consulted.</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2003&gt;</returns>
        ApiResponse<List<InlineResponse2003>> ObjectsGetWithHttpInfo (string clientId, string accessToken, string objectCode);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for the informations related to a specific postal object.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="objectCode">Code of the object to be consulted.</param>
        /// <param name="eventType">Event type to be filtered. (optional)</param>
        /// <returns>List&lt;ObjectsEventos&gt;</returns>
        List<ObjectsEventos> ObjectsObjectCodeGet (string clientId, string accessToken, string objectCode, string eventType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for the informations related to a specific postal object.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="objectCode">Code of the object to be consulted.</param>
        /// <param name="eventType">Event type to be filtered. (optional)</param>
        /// <returns>ApiResponse of List&lt;ObjectsEventos&gt;</returns>
        ApiResponse<List<ObjectsEventos>> ObjectsObjectCodeGetWithHttpInfo (string clientId, string accessToken, string objectCode, string eventType = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the list of possible event status for a given postal events.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventType">Event type to be searched.</param>
        /// <param name="eventStatus">Filter the search by a certain event status. (optional)</param>
        /// <returns>Task of List&lt;InlineResponse2002&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse2002>> EventsEventTypeGetAsync (string clientId, string accessToken, string eventType, string eventStatus = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the list of possible event status for a given postal events.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventType">Event type to be searched.</param>
        /// <param name="eventStatus">Filter the search by a certain event status. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2002&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2002>>> EventsEventTypeGetAsyncWithHttpInfo (string clientId, string accessToken, string eventType, string eventStatus = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for the events related to a list of postal objects.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="objectCode">List of comma separated codes to be consulted.</param>
        /// <returns>Task of List&lt;InlineResponse2003&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse2003>> ObjectsGetAsync (string clientId, string accessToken, string objectCode);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for the events related to a list of postal objects.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="objectCode">List of comma separated codes to be consulted.</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2003&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2003>>> ObjectsGetAsyncWithHttpInfo (string clientId, string accessToken, string objectCode);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for the informations related to a specific postal object.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="objectCode">Code of the object to be consulted.</param>
        /// <param name="eventType">Event type to be filtered. (optional)</param>
        /// <returns>Task of List&lt;ObjectsEventos&gt;</returns>
        System.Threading.Tasks.Task<List<ObjectsEventos>> ObjectsObjectCodeGetAsync (string clientId, string accessToken, string objectCode, string eventType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for the informations related to a specific postal object.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="objectCode">Code of the object to be consulted.</param>
        /// <param name="eventType">Event type to be filtered. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ObjectsEventos&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ObjectsEventos>>> ObjectsObjectCodeGetAsyncWithHttpInfo (string clientId, string accessToken, string objectCode, string eventType = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PostalObjectsApi : IPostalObjectsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PostalObjectsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PostalObjectsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PostalObjectsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PostalObjectsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Returns the list of possible event status for a given postal events.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventType">Event type to be searched.</param>
        /// <param name="eventStatus">Filter the search by a certain event status. (optional)</param>
        /// <returns>List&lt;InlineResponse2002&gt;</returns>
        public List<InlineResponse2002> EventsEventTypeGet (string clientId, string accessToken, string eventType, string eventStatus = null)
        {
             ApiResponse<List<InlineResponse2002>> localVarResponse = EventsEventTypeGetWithHttpInfo(clientId, accessToken, eventType, eventStatus);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the list of possible event status for a given postal events.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventType">Event type to be searched.</param>
        /// <param name="eventStatus">Filter the search by a certain event status. (optional)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2002&gt;</returns>
        public ApiResponse< List<InlineResponse2002> > EventsEventTypeGetWithHttpInfo (string clientId, string accessToken, string eventType, string eventStatus = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PostalObjectsApi->EventsEventTypeGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling PostalObjectsApi->EventsEventTypeGet");
            // verify the required parameter 'eventType' is set
            if (eventType == null)
                throw new ApiException(400, "Missing required parameter 'eventType' when calling PostalObjectsApi->EventsEventTypeGet");

            var localVarPath = "/events/{eventType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (eventType != null) localVarPathParams.Add("eventType", Configuration.ApiClient.ParameterToString(eventType)); // path parameter
            if (eventStatus != null) localVarQueryParams.Add("eventStatus", Configuration.ApiClient.ParameterToString(eventStatus)); // query parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EventsEventTypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2002>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse2002>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2002>)));
            
        }

        /// <summary>
        ///  Returns the list of possible event status for a given postal events.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventType">Event type to be searched.</param>
        /// <param name="eventStatus">Filter the search by a certain event status. (optional)</param>
        /// <returns>Task of List&lt;InlineResponse2002&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse2002>> EventsEventTypeGetAsync (string clientId, string accessToken, string eventType, string eventStatus = null)
        {
             ApiResponse<List<InlineResponse2002>> localVarResponse = await EventsEventTypeGetAsyncWithHttpInfo(clientId, accessToken, eventType, eventStatus);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the list of possible event status for a given postal events.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventType">Event type to be searched.</param>
        /// <param name="eventStatus">Filter the search by a certain event status. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2002&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2002>>> EventsEventTypeGetAsyncWithHttpInfo (string clientId, string accessToken, string eventType, string eventStatus = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PostalObjectsApi->EventsEventTypeGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling PostalObjectsApi->EventsEventTypeGet");
            // verify the required parameter 'eventType' is set
            if (eventType == null)
                throw new ApiException(400, "Missing required parameter 'eventType' when calling PostalObjectsApi->EventsEventTypeGet");

            var localVarPath = "/events/{eventType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (eventType != null) localVarPathParams.Add("eventType", Configuration.ApiClient.ParameterToString(eventType)); // path parameter
            if (eventStatus != null) localVarQueryParams.Add("eventStatus", Configuration.ApiClient.ParameterToString(eventStatus)); // query parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EventsEventTypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2002>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse2002>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2002>)));
            
        }

        /// <summary>
        ///  Searches for the events related to a list of postal objects.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="objectCode">List of comma separated codes to be consulted.</param>
        /// <returns>List&lt;InlineResponse2003&gt;</returns>
        public List<InlineResponse2003> ObjectsGet (string clientId, string accessToken, string objectCode)
        {
             ApiResponse<List<InlineResponse2003>> localVarResponse = ObjectsGetWithHttpInfo(clientId, accessToken, objectCode);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Searches for the events related to a list of postal objects.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="objectCode">List of comma separated codes to be consulted.</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2003&gt;</returns>
        public ApiResponse< List<InlineResponse2003> > ObjectsGetWithHttpInfo (string clientId, string accessToken, string objectCode)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PostalObjectsApi->ObjectsGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling PostalObjectsApi->ObjectsGet");
            // verify the required parameter 'objectCode' is set
            if (objectCode == null)
                throw new ApiException(400, "Missing required parameter 'objectCode' when calling PostalObjectsApi->ObjectsGet");

            var localVarPath = "/objects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (objectCode != null) localVarQueryParams.Add("objectCode", Configuration.ApiClient.ParameterToString(objectCode)); // query parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ObjectsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2003>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse2003>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2003>)));
            
        }

        /// <summary>
        ///  Searches for the events related to a list of postal objects.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="objectCode">List of comma separated codes to be consulted.</param>
        /// <returns>Task of List&lt;InlineResponse2003&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse2003>> ObjectsGetAsync (string clientId, string accessToken, string objectCode)
        {
             ApiResponse<List<InlineResponse2003>> localVarResponse = await ObjectsGetAsyncWithHttpInfo(clientId, accessToken, objectCode);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Searches for the events related to a list of postal objects.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="objectCode">List of comma separated codes to be consulted.</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2003&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2003>>> ObjectsGetAsyncWithHttpInfo (string clientId, string accessToken, string objectCode)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PostalObjectsApi->ObjectsGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling PostalObjectsApi->ObjectsGet");
            // verify the required parameter 'objectCode' is set
            if (objectCode == null)
                throw new ApiException(400, "Missing required parameter 'objectCode' when calling PostalObjectsApi->ObjectsGet");

            var localVarPath = "/objects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (objectCode != null) localVarQueryParams.Add("objectCode", Configuration.ApiClient.ParameterToString(objectCode)); // query parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ObjectsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2003>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse2003>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2003>)));
            
        }

        /// <summary>
        ///  Searches for the informations related to a specific postal object.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="objectCode">Code of the object to be consulted.</param>
        /// <param name="eventType">Event type to be filtered. (optional)</param>
        /// <returns>List&lt;ObjectsEventos&gt;</returns>
        public List<ObjectsEventos> ObjectsObjectCodeGet (string clientId, string accessToken, string objectCode, string eventType = null)
        {
             ApiResponse<List<ObjectsEventos>> localVarResponse = ObjectsObjectCodeGetWithHttpInfo(clientId, accessToken, objectCode, eventType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Searches for the informations related to a specific postal object.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="objectCode">Code of the object to be consulted.</param>
        /// <param name="eventType">Event type to be filtered. (optional)</param>
        /// <returns>ApiResponse of List&lt;ObjectsEventos&gt;</returns>
        public ApiResponse< List<ObjectsEventos> > ObjectsObjectCodeGetWithHttpInfo (string clientId, string accessToken, string objectCode, string eventType = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PostalObjectsApi->ObjectsObjectCodeGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling PostalObjectsApi->ObjectsObjectCodeGet");
            // verify the required parameter 'objectCode' is set
            if (objectCode == null)
                throw new ApiException(400, "Missing required parameter 'objectCode' when calling PostalObjectsApi->ObjectsObjectCodeGet");

            var localVarPath = "/objects/{objectCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (objectCode != null) localVarPathParams.Add("objectCode", Configuration.ApiClient.ParameterToString(objectCode)); // path parameter
            if (eventType != null) localVarQueryParams.Add("eventType", Configuration.ApiClient.ParameterToString(eventType)); // query parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ObjectsObjectCodeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ObjectsEventos>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ObjectsEventos>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ObjectsEventos>)));
            
        }

        /// <summary>
        ///  Searches for the informations related to a specific postal object.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="objectCode">Code of the object to be consulted.</param>
        /// <param name="eventType">Event type to be filtered. (optional)</param>
        /// <returns>Task of List&lt;ObjectsEventos&gt;</returns>
        public async System.Threading.Tasks.Task<List<ObjectsEventos>> ObjectsObjectCodeGetAsync (string clientId, string accessToken, string objectCode, string eventType = null)
        {
             ApiResponse<List<ObjectsEventos>> localVarResponse = await ObjectsObjectCodeGetAsyncWithHttpInfo(clientId, accessToken, objectCode, eventType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Searches for the informations related to a specific postal object.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="objectCode">Code of the object to be consulted.</param>
        /// <param name="eventType">Event type to be filtered. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ObjectsEventos&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ObjectsEventos>>> ObjectsObjectCodeGetAsyncWithHttpInfo (string clientId, string accessToken, string objectCode, string eventType = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PostalObjectsApi->ObjectsObjectCodeGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling PostalObjectsApi->ObjectsObjectCodeGet");
            // verify the required parameter 'objectCode' is set
            if (objectCode == null)
                throw new ApiException(400, "Missing required parameter 'objectCode' when calling PostalObjectsApi->ObjectsObjectCodeGet");

            var localVarPath = "/objects/{objectCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (objectCode != null) localVarPathParams.Add("objectCode", Configuration.ApiClient.ParameterToString(objectCode)); // path parameter
            if (eventType != null) localVarQueryParams.Add("eventType", Configuration.ApiClient.ParameterToString(eventType)); // query parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ObjectsObjectCodeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ObjectsEventos>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ObjectsEventos>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ObjectsEventos>)));
            
        }

    }
}
