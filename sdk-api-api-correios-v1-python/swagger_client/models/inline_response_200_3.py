# coding: utf-8

"""
    API dos Correios

    API de rastreios de Objetos Postais

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse2003(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, tipo_evento=None, status_evento=None, descricao_evento=None):
        """
        InlineResponse2003 - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'tipo_evento': 'str',
            'status_evento': 'int',
            'descricao_evento': 'str'
        }

        self.attribute_map = {
            'tipo_evento': 'tipoEvento',
            'status_evento': 'statusEvento',
            'descricao_evento': 'descricaoEvento'
        }

        self._tipo_evento = tipo_evento
        self._status_evento = status_evento
        self._descricao_evento = descricao_evento

    @property
    def tipo_evento(self):
        """
        Gets the tipo_evento of this InlineResponse2003.
        

        :return: The tipo_evento of this InlineResponse2003.
        :rtype: str
        """
        return self._tipo_evento

    @tipo_evento.setter
    def tipo_evento(self, tipo_evento):
        """
        Sets the tipo_evento of this InlineResponse2003.
        

        :param tipo_evento: The tipo_evento of this InlineResponse2003.
        :type: str
        """

        self._tipo_evento = tipo_evento

    @property
    def status_evento(self):
        """
        Gets the status_evento of this InlineResponse2003.
        

        :return: The status_evento of this InlineResponse2003.
        :rtype: int
        """
        return self._status_evento

    @status_evento.setter
    def status_evento(self, status_evento):
        """
        Sets the status_evento of this InlineResponse2003.
        

        :param status_evento: The status_evento of this InlineResponse2003.
        :type: int
        """

        self._status_evento = status_evento

    @property
    def descricao_evento(self):
        """
        Gets the descricao_evento of this InlineResponse2003.
        

        :return: The descricao_evento of this InlineResponse2003.
        :rtype: str
        """
        return self._descricao_evento

    @descricao_evento.setter
    def descricao_evento(self, descricao_evento):
        """
        Sets the descricao_evento of this InlineResponse2003.
        

        :param descricao_evento: The descricao_evento of this InlineResponse2003.
        :type: str
        """

        self._descricao_evento = descricao_evento

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse2003):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
