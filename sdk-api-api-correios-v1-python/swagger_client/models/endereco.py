# coding: utf-8

"""
    API dos Correios

    API de rastreios de Objetos Postais

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Endereco(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, logradouro=None, bairro=None, municipio=None, uf=None):
        """
        Endereco - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'logradouro': 'str',
            'bairro': 'str',
            'municipio': 'str',
            'uf': 'str'
        }

        self.attribute_map = {
            'logradouro': 'logradouro',
            'bairro': 'bairro',
            'municipio': 'municipio',
            'uf': 'uf'
        }

        self._logradouro = logradouro
        self._bairro = bairro
        self._municipio = municipio
        self._uf = uf

    @property
    def logradouro(self):
        """
        Gets the logradouro of this Endereco.
        Nome do logradouro

        :return: The logradouro of this Endereco.
        :rtype: str
        """
        return self._logradouro

    @logradouro.setter
    def logradouro(self, logradouro):
        """
        Sets the logradouro of this Endereco.
        Nome do logradouro

        :param logradouro: The logradouro of this Endereco.
        :type: str
        """

        self._logradouro = logradouro

    @property
    def bairro(self):
        """
        Gets the bairro of this Endereco.
        Nome do Bairro

        :return: The bairro of this Endereco.
        :rtype: str
        """
        return self._bairro

    @bairro.setter
    def bairro(self, bairro):
        """
        Sets the bairro of this Endereco.
        Nome do Bairro

        :param bairro: The bairro of this Endereco.
        :type: str
        """

        self._bairro = bairro

    @property
    def municipio(self):
        """
        Gets the municipio of this Endereco.
        Nome do municipio

        :return: The municipio of this Endereco.
        :rtype: str
        """
        return self._municipio

    @municipio.setter
    def municipio(self, municipio):
        """
        Sets the municipio of this Endereco.
        Nome do municipio

        :param municipio: The municipio of this Endereco.
        :type: str
        """

        self._municipio = municipio

    @property
    def uf(self):
        """
        Gets the uf of this Endereco.
        Estado

        :return: The uf of this Endereco.
        :rtype: str
        """
        return self._uf

    @uf.setter
    def uf(self, uf):
        """
        Sets the uf of this Endereco.
        Estado

        :param uf: The uf of this Endereco.
        :type: str
        """

        self._uf = uf

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Endereco):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
