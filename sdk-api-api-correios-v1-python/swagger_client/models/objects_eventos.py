# coding: utf-8

"""
    API dos Correios

    Postal Object tracking API

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ObjectsEventos(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, object_code=None, event_type=None, event_status=None, event_description=None, unit_name=None, sro_code=None, county=None, state=None, mcu_code=None, dr_code=None, dr_abbreviation=None, list_number=None, station=None, user=None, recording_date=None, deliveryman=None, creation_date=None, block_action=None):
        """
        ObjectsEventos - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'object_code': 'str',
            'event_type': 'str',
            'event_status': 'int',
            'event_description': 'str',
            'unit_name': 'str',
            'sro_code': 'str',
            'county': 'str',
            'state': 'str',
            'mcu_code': 'str',
            'dr_code': 'str',
            'dr_abbreviation': 'str',
            'list_number': 'str',
            'station': 'int',
            'user': 'str',
            'recording_date': 'str',
            'deliveryman': 'str',
            'creation_date': 'str',
            'block_action': 'int'
        }

        self.attribute_map = {
            'object_code': 'objectCode',
            'event_type': 'eventType',
            'event_status': 'eventStatus',
            'event_description': 'eventDescription',
            'unit_name': 'unitName',
            'sro_code': 'SROCode',
            'county': 'county',
            'state': 'state',
            'mcu_code': 'MCUCode',
            'dr_code': 'DRCode',
            'dr_abbreviation': 'DRAbbreviation',
            'list_number': 'listNumber',
            'station': 'station',
            'user': 'user',
            'recording_date': 'recordingDate',
            'deliveryman': 'deliveryman',
            'creation_date': 'creationDate',
            'block_action': 'blockAction'
        }

        self._object_code = object_code
        self._event_type = event_type
        self._event_status = event_status
        self._event_description = event_description
        self._unit_name = unit_name
        self._sro_code = sro_code
        self._county = county
        self._state = state
        self._mcu_code = mcu_code
        self._dr_code = dr_code
        self._dr_abbreviation = dr_abbreviation
        self._list_number = list_number
        self._station = station
        self._user = user
        self._recording_date = recording_date
        self._deliveryman = deliveryman
        self._creation_date = creation_date
        self._block_action = block_action

    @property
    def object_code(self):
        """
        Gets the object_code of this ObjectsEventos.
        

        :return: The object_code of this ObjectsEventos.
        :rtype: str
        """
        return self._object_code

    @object_code.setter
    def object_code(self, object_code):
        """
        Sets the object_code of this ObjectsEventos.
        

        :param object_code: The object_code of this ObjectsEventos.
        :type: str
        """

        self._object_code = object_code

    @property
    def event_type(self):
        """
        Gets the event_type of this ObjectsEventos.
        

        :return: The event_type of this ObjectsEventos.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """
        Sets the event_type of this ObjectsEventos.
        

        :param event_type: The event_type of this ObjectsEventos.
        :type: str
        """

        self._event_type = event_type

    @property
    def event_status(self):
        """
        Gets the event_status of this ObjectsEventos.
        

        :return: The event_status of this ObjectsEventos.
        :rtype: int
        """
        return self._event_status

    @event_status.setter
    def event_status(self, event_status):
        """
        Sets the event_status of this ObjectsEventos.
        

        :param event_status: The event_status of this ObjectsEventos.
        :type: int
        """

        self._event_status = event_status

    @property
    def event_description(self):
        """
        Gets the event_description of this ObjectsEventos.
        

        :return: The event_description of this ObjectsEventos.
        :rtype: str
        """
        return self._event_description

    @event_description.setter
    def event_description(self, event_description):
        """
        Sets the event_description of this ObjectsEventos.
        

        :param event_description: The event_description of this ObjectsEventos.
        :type: str
        """

        self._event_description = event_description

    @property
    def unit_name(self):
        """
        Gets the unit_name of this ObjectsEventos.
        

        :return: The unit_name of this ObjectsEventos.
        :rtype: str
        """
        return self._unit_name

    @unit_name.setter
    def unit_name(self, unit_name):
        """
        Sets the unit_name of this ObjectsEventos.
        

        :param unit_name: The unit_name of this ObjectsEventos.
        :type: str
        """

        self._unit_name = unit_name

    @property
    def sro_code(self):
        """
        Gets the sro_code of this ObjectsEventos.
        

        :return: The sro_code of this ObjectsEventos.
        :rtype: str
        """
        return self._sro_code

    @sro_code.setter
    def sro_code(self, sro_code):
        """
        Sets the sro_code of this ObjectsEventos.
        

        :param sro_code: The sro_code of this ObjectsEventos.
        :type: str
        """

        self._sro_code = sro_code

    @property
    def county(self):
        """
        Gets the county of this ObjectsEventos.
        

        :return: The county of this ObjectsEventos.
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """
        Sets the county of this ObjectsEventos.
        

        :param county: The county of this ObjectsEventos.
        :type: str
        """

        self._county = county

    @property
    def state(self):
        """
        Gets the state of this ObjectsEventos.
        

        :return: The state of this ObjectsEventos.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this ObjectsEventos.
        

        :param state: The state of this ObjectsEventos.
        :type: str
        """

        self._state = state

    @property
    def mcu_code(self):
        """
        Gets the mcu_code of this ObjectsEventos.
        

        :return: The mcu_code of this ObjectsEventos.
        :rtype: str
        """
        return self._mcu_code

    @mcu_code.setter
    def mcu_code(self, mcu_code):
        """
        Sets the mcu_code of this ObjectsEventos.
        

        :param mcu_code: The mcu_code of this ObjectsEventos.
        :type: str
        """

        self._mcu_code = mcu_code

    @property
    def dr_code(self):
        """
        Gets the dr_code of this ObjectsEventos.
        

        :return: The dr_code of this ObjectsEventos.
        :rtype: str
        """
        return self._dr_code

    @dr_code.setter
    def dr_code(self, dr_code):
        """
        Sets the dr_code of this ObjectsEventos.
        

        :param dr_code: The dr_code of this ObjectsEventos.
        :type: str
        """

        self._dr_code = dr_code

    @property
    def dr_abbreviation(self):
        """
        Gets the dr_abbreviation of this ObjectsEventos.
        

        :return: The dr_abbreviation of this ObjectsEventos.
        :rtype: str
        """
        return self._dr_abbreviation

    @dr_abbreviation.setter
    def dr_abbreviation(self, dr_abbreviation):
        """
        Sets the dr_abbreviation of this ObjectsEventos.
        

        :param dr_abbreviation: The dr_abbreviation of this ObjectsEventos.
        :type: str
        """

        self._dr_abbreviation = dr_abbreviation

    @property
    def list_number(self):
        """
        Gets the list_number of this ObjectsEventos.
        

        :return: The list_number of this ObjectsEventos.
        :rtype: str
        """
        return self._list_number

    @list_number.setter
    def list_number(self, list_number):
        """
        Sets the list_number of this ObjectsEventos.
        

        :param list_number: The list_number of this ObjectsEventos.
        :type: str
        """

        self._list_number = list_number

    @property
    def station(self):
        """
        Gets the station of this ObjectsEventos.
        

        :return: The station of this ObjectsEventos.
        :rtype: int
        """
        return self._station

    @station.setter
    def station(self, station):
        """
        Sets the station of this ObjectsEventos.
        

        :param station: The station of this ObjectsEventos.
        :type: int
        """

        self._station = station

    @property
    def user(self):
        """
        Gets the user of this ObjectsEventos.
        

        :return: The user of this ObjectsEventos.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this ObjectsEventos.
        

        :param user: The user of this ObjectsEventos.
        :type: str
        """

        self._user = user

    @property
    def recording_date(self):
        """
        Gets the recording_date of this ObjectsEventos.
        

        :return: The recording_date of this ObjectsEventos.
        :rtype: str
        """
        return self._recording_date

    @recording_date.setter
    def recording_date(self, recording_date):
        """
        Sets the recording_date of this ObjectsEventos.
        

        :param recording_date: The recording_date of this ObjectsEventos.
        :type: str
        """

        self._recording_date = recording_date

    @property
    def deliveryman(self):
        """
        Gets the deliveryman of this ObjectsEventos.
        

        :return: The deliveryman of this ObjectsEventos.
        :rtype: str
        """
        return self._deliveryman

    @deliveryman.setter
    def deliveryman(self, deliveryman):
        """
        Sets the deliveryman of this ObjectsEventos.
        

        :param deliveryman: The deliveryman of this ObjectsEventos.
        :type: str
        """

        self._deliveryman = deliveryman

    @property
    def creation_date(self):
        """
        Gets the creation_date of this ObjectsEventos.
        

        :return: The creation_date of this ObjectsEventos.
        :rtype: str
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """
        Sets the creation_date of this ObjectsEventos.
        

        :param creation_date: The creation_date of this ObjectsEventos.
        :type: str
        """

        self._creation_date = creation_date

    @property
    def block_action(self):
        """
        Gets the block_action of this ObjectsEventos.
        

        :return: The block_action of this ObjectsEventos.
        :rtype: int
        """
        return self._block_action

    @block_action.setter
    def block_action(self, block_action):
        """
        Sets the block_action of this ObjectsEventos.
        

        :param block_action: The block_action of this ObjectsEventos.
        :type: int
        """

        self._block_action = block_action

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ObjectsEventos):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
