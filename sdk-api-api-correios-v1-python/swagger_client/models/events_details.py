# coding: utf-8

"""
    API dos Correios

    Postal Object tracking API

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EventsDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, event_type=None, event_status=None, event_description=None):
        """
        EventsDetails - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'event_type': 'str',
            'event_status': 'int',
            'event_description': 'str'
        }

        self.attribute_map = {
            'event_type': 'eventType',
            'event_status': 'eventStatus',
            'event_description': 'eventDescription'
        }

        self._event_type = event_type
        self._event_status = event_status
        self._event_description = event_description

    @property
    def event_type(self):
        """
        Gets the event_type of this EventsDetails.
        

        :return: The event_type of this EventsDetails.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """
        Sets the event_type of this EventsDetails.
        

        :param event_type: The event_type of this EventsDetails.
        :type: str
        """

        self._event_type = event_type

    @property
    def event_status(self):
        """
        Gets the event_status of this EventsDetails.
        

        :return: The event_status of this EventsDetails.
        :rtype: int
        """
        return self._event_status

    @event_status.setter
    def event_status(self, event_status):
        """
        Sets the event_status of this EventsDetails.
        

        :param event_status: The event_status of this EventsDetails.
        :type: int
        """

        self._event_status = event_status

    @property
    def event_description(self):
        """
        Gets the event_description of this EventsDetails.
        

        :return: The event_description of this EventsDetails.
        :rtype: str
        """
        return self._event_description

    @event_description.setter
    def event_description(self, event_description):
        """
        Sets the event_description of this EventsDetails.
        

        :param event_description: The event_description of this EventsDetails.
        :type: str
        """

        self._event_description = event_description

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EventsDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
