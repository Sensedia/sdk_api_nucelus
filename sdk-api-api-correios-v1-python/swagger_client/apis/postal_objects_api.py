# coding: utf-8

"""
    API dos Correios

    Postal Object tracking API

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class PostalObjectsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def events_event_type_get(self, client_id, access_token, event_type, **kwargs):
        """
        Returns the list of possible event status for a given postal events.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.events_event_type_get(client_id, access_token, event_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str client_id: Customer identifier used for authentication. (required)
        :param str access_token: Access token used in the authentication. (required)
        :param str event_type: Event type to be searched. (required)
        :param str event_status: Filter the search by a certain event status.
        :return: list[InlineResponse2002]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.events_event_type_get_with_http_info(client_id, access_token, event_type, **kwargs)
        else:
            (data) = self.events_event_type_get_with_http_info(client_id, access_token, event_type, **kwargs)
            return data

    def events_event_type_get_with_http_info(self, client_id, access_token, event_type, **kwargs):
        """
        Returns the list of possible event status for a given postal events.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.events_event_type_get_with_http_info(client_id, access_token, event_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str client_id: Customer identifier used for authentication. (required)
        :param str access_token: Access token used in the authentication. (required)
        :param str event_type: Event type to be searched. (required)
        :param str event_status: Filter the search by a certain event status.
        :return: list[InlineResponse2002]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'access_token', 'event_type', 'event_status']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method events_event_type_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params) or (params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `events_event_type_get`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `events_event_type_get`")
        # verify the required parameter 'event_type' is set
        if ('event_type' not in params) or (params['event_type'] is None):
            raise ValueError("Missing the required parameter `event_type` when calling `events_event_type_get`")


        collection_formats = {}

        resource_path = '/events/{eventType}'.replace('{format}', 'json')
        path_params = {}
        if 'event_type' in params:
            path_params['eventType'] = params['event_type']

        query_params = {}
        if 'event_status' in params:
            query_params['eventStatus'] = params['event_status']

        header_params = {}
        if 'client_id' in params:
            header_params['client_id'] = params['client_id']
        if 'access_token' in params:
            header_params['access_token'] = params['access_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[InlineResponse2002]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def objects_get(self, client_id, access_token, object_code, **kwargs):
        """
        Searches for the events related to a list of postal objects.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.objects_get(client_id, access_token, object_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str client_id: Customer identifier used for authentication. (required)
        :param str access_token: Access token used in the authentication. (required)
        :param str object_code: List of comma separated codes to be consulted. (required)
        :return: list[InlineResponse2003]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.objects_get_with_http_info(client_id, access_token, object_code, **kwargs)
        else:
            (data) = self.objects_get_with_http_info(client_id, access_token, object_code, **kwargs)
            return data

    def objects_get_with_http_info(self, client_id, access_token, object_code, **kwargs):
        """
        Searches for the events related to a list of postal objects.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.objects_get_with_http_info(client_id, access_token, object_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str client_id: Customer identifier used for authentication. (required)
        :param str access_token: Access token used in the authentication. (required)
        :param str object_code: List of comma separated codes to be consulted. (required)
        :return: list[InlineResponse2003]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'access_token', 'object_code']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params) or (params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `objects_get`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `objects_get`")
        # verify the required parameter 'object_code' is set
        if ('object_code' not in params) or (params['object_code'] is None):
            raise ValueError("Missing the required parameter `object_code` when calling `objects_get`")


        collection_formats = {}

        resource_path = '/objects'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'object_code' in params:
            query_params['objectCode'] = params['object_code']

        header_params = {}
        if 'client_id' in params:
            header_params['client_id'] = params['client_id']
        if 'access_token' in params:
            header_params['access_token'] = params['access_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[InlineResponse2003]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def objects_object_code_get(self, client_id, access_token, object_code, **kwargs):
        """
        Searches for the informations related to a specific postal object.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.objects_object_code_get(client_id, access_token, object_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str client_id: Customer identifier used for authentication. (required)
        :param str access_token: Access token used in the authentication. (required)
        :param str object_code: Code of the object to be consulted. (required)
        :param str event_type: Event type to be filtered.
        :return: list[ObjectsEventos]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.objects_object_code_get_with_http_info(client_id, access_token, object_code, **kwargs)
        else:
            (data) = self.objects_object_code_get_with_http_info(client_id, access_token, object_code, **kwargs)
            return data

    def objects_object_code_get_with_http_info(self, client_id, access_token, object_code, **kwargs):
        """
        Searches for the informations related to a specific postal object.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.objects_object_code_get_with_http_info(client_id, access_token, object_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str client_id: Customer identifier used for authentication. (required)
        :param str access_token: Access token used in the authentication. (required)
        :param str object_code: Code of the object to be consulted. (required)
        :param str event_type: Event type to be filtered.
        :return: list[ObjectsEventos]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'access_token', 'object_code', 'event_type']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method objects_object_code_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params) or (params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `objects_object_code_get`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `objects_object_code_get`")
        # verify the required parameter 'object_code' is set
        if ('object_code' not in params) or (params['object_code'] is None):
            raise ValueError("Missing the required parameter `object_code` when calling `objects_object_code_get`")


        collection_formats = {}

        resource_path = '/objects/{objectCode}'.replace('{format}', 'json')
        path_params = {}
        if 'object_code' in params:
            path_params['objectCode'] = params['object_code']

        query_params = {}
        if 'event_type' in params:
            query_params['eventType'] = params['event_type']

        header_params = {}
        if 'client_id' in params:
            header_params['client_id'] = params['client_id']
        if 'access_token' in params:
            header_params['access_token'] = params['access_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ObjectsEventos]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
