=begin
#API do Futebolcard

#Futebolcard manipulation API

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class EventsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # Returns the details for a specific event.
    # @param client_id Customer identifier used for authentication.
    # @param access_token Access token used in the authentication.
    # @param event_id Event to search.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200]
    def events_event_id_get(client_id, access_token, event_id, opts = {})
      data, _status_code, _headers = events_event_id_get_with_http_info(client_id, access_token, event_id, opts)
      return data
    end

    # 
    # Returns the details for a specific event.
    # @param client_id Customer identifier used for authentication.
    # @param access_token Access token used in the authentication.
    # @param event_id Event to search.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def events_event_id_get_with_http_info(client_id, access_token, event_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EventsApi.events_event_id_get ..."
      end
      # verify the required parameter 'client_id' is set
      fail ArgumentError, "Missing the required parameter 'client_id' when calling EventsApi.events_event_id_get" if client_id.nil?
      # verify the required parameter 'access_token' is set
      fail ArgumentError, "Missing the required parameter 'access_token' when calling EventsApi.events_event_id_get" if access_token.nil?
      # verify the required parameter 'event_id' is set
      fail ArgumentError, "Missing the required parameter 'event_id' when calling EventsApi.events_event_id_get" if event_id.nil?
      # resource path
      local_var_path = "/events/{eventId}".sub('{format}','json').sub('{' + 'eventId' + '}', event_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      header_params[:'client_id'] = client_id
      header_params[:'access_token'] = access_token

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#events_event_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns a list of sector for the given event.
    # @param client_id Customer identifier used for authentication.
    # @param access_token Access token used in the authentication.
    # @param event_id Event to search.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2001]
    def events_event_id_sectors_get(client_id, access_token, event_id, opts = {})
      data, _status_code, _headers = events_event_id_sectors_get_with_http_info(client_id, access_token, event_id, opts)
      return data
    end

    # 
    # Returns a list of sector for the given event.
    # @param client_id Customer identifier used for authentication.
    # @param access_token Access token used in the authentication.
    # @param event_id Event to search.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2001, Fixnum, Hash)>] InlineResponse2001 data, response status code and response headers
    def events_event_id_sectors_get_with_http_info(client_id, access_token, event_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EventsApi.events_event_id_sectors_get ..."
      end
      # verify the required parameter 'client_id' is set
      fail ArgumentError, "Missing the required parameter 'client_id' when calling EventsApi.events_event_id_sectors_get" if client_id.nil?
      # verify the required parameter 'access_token' is set
      fail ArgumentError, "Missing the required parameter 'access_token' when calling EventsApi.events_event_id_sectors_get" if access_token.nil?
      # verify the required parameter 'event_id' is set
      fail ArgumentError, "Missing the required parameter 'event_id' when calling EventsApi.events_event_id_sectors_get" if event_id.nil?
      # resource path
      local_var_path = "/events/{eventId}/sectors".sub('{format}','json').sub('{' + 'eventId' + '}', event_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      header_params[:'client_id'] = client_id
      header_params[:'access_token'] = access_token

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2001')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#events_event_id_sectors_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns the details of a specific sector.
    # @param client_id Customer identifier used for authentication.
    # @param access_token Access token used in the authentication.
    # @param event_id Event to search.
    # @param sector_id Sector to search.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def events_event_id_sectors_sector_id_get(client_id, access_token, event_id, sector_id, opts = {})
      data, _status_code, _headers = events_event_id_sectors_sector_id_get_with_http_info(client_id, access_token, event_id, sector_id, opts)
      return data
    end

    # 
    # Returns the details of a specific sector.
    # @param client_id Customer identifier used for authentication.
    # @param access_token Access token used in the authentication.
    # @param event_id Event to search.
    # @param sector_id Sector to search.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Fixnum, Hash)>] InlineResponse2002 data, response status code and response headers
    def events_event_id_sectors_sector_id_get_with_http_info(client_id, access_token, event_id, sector_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EventsApi.events_event_id_sectors_sector_id_get ..."
      end
      # verify the required parameter 'client_id' is set
      fail ArgumentError, "Missing the required parameter 'client_id' when calling EventsApi.events_event_id_sectors_sector_id_get" if client_id.nil?
      # verify the required parameter 'access_token' is set
      fail ArgumentError, "Missing the required parameter 'access_token' when calling EventsApi.events_event_id_sectors_sector_id_get" if access_token.nil?
      # verify the required parameter 'event_id' is set
      fail ArgumentError, "Missing the required parameter 'event_id' when calling EventsApi.events_event_id_sectors_sector_id_get" if event_id.nil?
      # verify the required parameter 'sector_id' is set
      fail ArgumentError, "Missing the required parameter 'sector_id' when calling EventsApi.events_event_id_sectors_sector_id_get" if sector_id.nil?
      # resource path
      local_var_path = "/events/{eventId}/sectors/{sectorId}".sub('{format}','json').sub('{' + 'eventId' + '}', event_id.to_s).sub('{' + 'sectorId' + '}', sector_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      header_params[:'client_id'] = client_id
      header_params[:'access_token'] = access_token

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2002')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#events_event_id_sectors_sector_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns a list of subcsectors for a given sector.
    # @param client_id Customer identifier used for authentication.
    # @param access_token Access token used in the authentication.
    # @param event_id Event to search.
    # @param sector_id Sector to search.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def events_event_id_sectors_sector_id_subsectors_get(client_id, access_token, event_id, sector_id, opts = {})
      data, _status_code, _headers = events_event_id_sectors_sector_id_subsectors_get_with_http_info(client_id, access_token, event_id, sector_id, opts)
      return data
    end

    # 
    # Returns a list of subcsectors for a given sector.
    # @param client_id Customer identifier used for authentication.
    # @param access_token Access token used in the authentication.
    # @param event_id Event to search.
    # @param sector_id Sector to search.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Fixnum, Hash)>] InlineResponse2002 data, response status code and response headers
    def events_event_id_sectors_sector_id_subsectors_get_with_http_info(client_id, access_token, event_id, sector_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EventsApi.events_event_id_sectors_sector_id_subsectors_get ..."
      end
      # verify the required parameter 'client_id' is set
      fail ArgumentError, "Missing the required parameter 'client_id' when calling EventsApi.events_event_id_sectors_sector_id_subsectors_get" if client_id.nil?
      # verify the required parameter 'access_token' is set
      fail ArgumentError, "Missing the required parameter 'access_token' when calling EventsApi.events_event_id_sectors_sector_id_subsectors_get" if access_token.nil?
      # verify the required parameter 'event_id' is set
      fail ArgumentError, "Missing the required parameter 'event_id' when calling EventsApi.events_event_id_sectors_sector_id_subsectors_get" if event_id.nil?
      # verify the required parameter 'sector_id' is set
      fail ArgumentError, "Missing the required parameter 'sector_id' when calling EventsApi.events_event_id_sectors_sector_id_subsectors_get" if sector_id.nil?
      # resource path
      local_var_path = "/events/{eventId}/sectors/{sectorId}/subsectors".sub('{format}','json').sub('{' + 'eventId' + '}', event_id.to_s).sub('{' + 'sectorId' + '}', sector_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      header_params[:'client_id'] = client_id
      header_params[:'access_token'] = access_token

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2002')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#events_event_id_sectors_sector_id_subsectors_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns a list of seat's information for each row of a given subsector.
    # @param client_id Customer identifier used for authentication.
    # @param access_token Access token used in the authentication.
    # @param event_id Event to search.
    # @param sector_id Sector to search.
    # @param subsector_id Subsector to search.
    # @param [Hash] opts the optional parameters
    # @return [Array<InlineResponse2003>]
    def events_event_id_sectors_sector_id_subsectors_subsector_id_get(client_id, access_token, event_id, sector_id, subsector_id, opts = {})
      data, _status_code, _headers = events_event_id_sectors_sector_id_subsectors_subsector_id_get_with_http_info(client_id, access_token, event_id, sector_id, subsector_id, opts)
      return data
    end

    # 
    # Returns a list of seat&#39;s information for each row of a given subsector.
    # @param client_id Customer identifier used for authentication.
    # @param access_token Access token used in the authentication.
    # @param event_id Event to search.
    # @param sector_id Sector to search.
    # @param subsector_id Subsector to search.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<InlineResponse2003>, Fixnum, Hash)>] Array<InlineResponse2003> data, response status code and response headers
    def events_event_id_sectors_sector_id_subsectors_subsector_id_get_with_http_info(client_id, access_token, event_id, sector_id, subsector_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EventsApi.events_event_id_sectors_sector_id_subsectors_subsector_id_get ..."
      end
      # verify the required parameter 'client_id' is set
      fail ArgumentError, "Missing the required parameter 'client_id' when calling EventsApi.events_event_id_sectors_sector_id_subsectors_subsector_id_get" if client_id.nil?
      # verify the required parameter 'access_token' is set
      fail ArgumentError, "Missing the required parameter 'access_token' when calling EventsApi.events_event_id_sectors_sector_id_subsectors_subsector_id_get" if access_token.nil?
      # verify the required parameter 'event_id' is set
      fail ArgumentError, "Missing the required parameter 'event_id' when calling EventsApi.events_event_id_sectors_sector_id_subsectors_subsector_id_get" if event_id.nil?
      # verify the required parameter 'sector_id' is set
      fail ArgumentError, "Missing the required parameter 'sector_id' when calling EventsApi.events_event_id_sectors_sector_id_subsectors_subsector_id_get" if sector_id.nil?
      # verify the required parameter 'subsector_id' is set
      fail ArgumentError, "Missing the required parameter 'subsector_id' when calling EventsApi.events_event_id_sectors_sector_id_subsectors_subsector_id_get" if subsector_id.nil?
      # resource path
      local_var_path = "/events/{eventId}/sectors/{sectorId}/subsectors/{subsectorId}".sub('{format}','json').sub('{' + 'eventId' + '}', event_id.to_s).sub('{' + 'sectorId' + '}', sector_id.to_s).sub('{' + 'subsectorId' + '}', subsector_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      header_params[:'client_id'] = client_id
      header_params[:'access_token'] = access_token

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<InlineResponse2003>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#events_event_id_sectors_sector_id_subsectors_subsector_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns a list of existing events.
    # @param client_id Customer identifier used for authentication.
    # @param access_token Access token used in the authentication.
    # @param [Hash] opts the optional parameters
    # @return [Array<InlineResponse200>]
    def events_get(client_id, access_token, opts = {})
      data, _status_code, _headers = events_get_with_http_info(client_id, access_token, opts)
      return data
    end

    # 
    # Returns a list of existing events.
    # @param client_id Customer identifier used for authentication.
    # @param access_token Access token used in the authentication.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<InlineResponse200>, Fixnum, Hash)>] Array<InlineResponse200> data, response status code and response headers
    def events_get_with_http_info(client_id, access_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EventsApi.events_get ..."
      end
      # verify the required parameter 'client_id' is set
      fail ArgumentError, "Missing the required parameter 'client_id' when calling EventsApi.events_get" if client_id.nil?
      # verify the required parameter 'access_token' is set
      fail ArgumentError, "Missing the required parameter 'access_token' when calling EventsApi.events_get" if access_token.nil?
      # resource path
      local_var_path = "/events".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      header_params[:'client_id'] = client_id
      header_params[:'access_token'] = access_token

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<InlineResponse200>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#events_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
