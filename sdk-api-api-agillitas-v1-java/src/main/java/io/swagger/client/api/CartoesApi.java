/*
 * API Agillitas Cartões Pré-pagos
 * API para manipular recursos relacionadas à cartões pré-pagos Agillitas.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CartaoDisponivel;
import io.swagger.client.model.ExtratoResponse;
import io.swagger.client.model.MsgErro;
import io.swagger.client.model.PortadorResponse;
import io.swagger.client.model.Saldo;
import io.swagger.client.model.SetCardStatus;
import io.swagger.client.model.SetNovoCartao;
import io.swagger.client.model.SetSaldo;
import io.swagger.client.model.StatusCartaoResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CartoesApi {
    private ApiClient apiClient;

    public CartoesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CartoesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for cartoesGet */
    private com.squareup.okhttp.Call cartoesGetCall(String tipoCartao, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cartoes".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (tipoCartao != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tipoCartao", tipoCartao));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "access_token", "key_id", "client_id" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cartoesGetValidateBeforeCall(String tipoCartao, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tipoCartao' is set
        if (tipoCartao == null) {
            throw new ApiException("Missing the required parameter 'tipoCartao' when calling cartoesGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cartoesGetCall(tipoCartao, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Obtém o número de identificação (Proxy) de um cartão
     * &lt;p&gt;Permite a verificação de disponibilidade de cartão e qual o número de identificação (Proxy) para posterior requisição.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt; Este recurso só poderá ser utilizado em produção mediante aprovação.&lt;/p&gt;
     * @param tipoCartao Identifica qual o tipo do cartão, físico ou virtual. (required)
     * @return CartaoDisponivel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CartaoDisponivel cartoesGet(String tipoCartao) throws ApiException {
        ApiResponse<CartaoDisponivel> resp = cartoesGetWithHttpInfo(tipoCartao);
        return resp.getData();
    }

    /**
     * Obtém o número de identificação (Proxy) de um cartão
     * &lt;p&gt;Permite a verificação de disponibilidade de cartão e qual o número de identificação (Proxy) para posterior requisição.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt; Este recurso só poderá ser utilizado em produção mediante aprovação.&lt;/p&gt;
     * @param tipoCartao Identifica qual o tipo do cartão, físico ou virtual. (required)
     * @return ApiResponse&lt;CartaoDisponivel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CartaoDisponivel> cartoesGetWithHttpInfo(String tipoCartao) throws ApiException {
        com.squareup.okhttp.Call call = cartoesGetValidateBeforeCall(tipoCartao, null, null);
        Type localVarReturnType = new TypeToken<CartaoDisponivel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Obtém o número de identificação (Proxy) de um cartão (asynchronously)
     * &lt;p&gt;Permite a verificação de disponibilidade de cartão e qual o número de identificação (Proxy) para posterior requisição.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt; Este recurso só poderá ser utilizado em produção mediante aprovação.&lt;/p&gt;
     * @param tipoCartao Identifica qual o tipo do cartão, físico ou virtual. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cartoesGetAsync(String tipoCartao, final ApiCallback<CartaoDisponivel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cartoesGetValidateBeforeCall(tipoCartao, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CartaoDisponivel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for cartoesIdCartaoExtratoGet */
    private com.squareup.okhttp.Call cartoesIdCartaoExtratoGetCall(String idCartao, String dataInicial, String dataFinal, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cartoes/{idCartao}/extrato".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "idCartao" + "\\}", apiClient.escapeString(idCartao.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (dataInicial != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "dataInicial", dataInicial));
        if (dataFinal != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "dataFinal", dataFinal));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "access_token", "key_id", "client_id" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cartoesIdCartaoExtratoGetValidateBeforeCall(String idCartao, String dataInicial, String dataFinal, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'idCartao' is set
        if (idCartao == null) {
            throw new ApiException("Missing the required parameter 'idCartao' when calling cartoesIdCartaoExtratoGet(Async)");
        }
        
        // verify the required parameter 'dataInicial' is set
        if (dataInicial == null) {
            throw new ApiException("Missing the required parameter 'dataInicial' when calling cartoesIdCartaoExtratoGet(Async)");
        }
        
        // verify the required parameter 'dataFinal' is set
        if (dataFinal == null) {
            throw new ApiException("Missing the required parameter 'dataFinal' when calling cartoesIdCartaoExtratoGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cartoesIdCartaoExtratoGetCall(idCartao, dataInicial, dataFinal, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Extrato do cartão
     * &lt;p&gt;Permite a consulta dos movimentos por período, de um determinado cartão. A janela máxima de observação é de 30 dias, e as datas inicial e final de observação pode ser configuradas, conforme necessidade.&lt;/p&gt;
     * @param idCartao Número identificador referente ao proxy localizado no verso do cartão. (required)
     * @param dataInicial Data inicial para a consulta. (required)
     * @param dataFinal Data final para a consulta. (required)
     * @return ExtratoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExtratoResponse cartoesIdCartaoExtratoGet(String idCartao, String dataInicial, String dataFinal) throws ApiException {
        ApiResponse<ExtratoResponse> resp = cartoesIdCartaoExtratoGetWithHttpInfo(idCartao, dataInicial, dataFinal);
        return resp.getData();
    }

    /**
     * Extrato do cartão
     * &lt;p&gt;Permite a consulta dos movimentos por período, de um determinado cartão. A janela máxima de observação é de 30 dias, e as datas inicial e final de observação pode ser configuradas, conforme necessidade.&lt;/p&gt;
     * @param idCartao Número identificador referente ao proxy localizado no verso do cartão. (required)
     * @param dataInicial Data inicial para a consulta. (required)
     * @param dataFinal Data final para a consulta. (required)
     * @return ApiResponse&lt;ExtratoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExtratoResponse> cartoesIdCartaoExtratoGetWithHttpInfo(String idCartao, String dataInicial, String dataFinal) throws ApiException {
        com.squareup.okhttp.Call call = cartoesIdCartaoExtratoGetValidateBeforeCall(idCartao, dataInicial, dataFinal, null, null);
        Type localVarReturnType = new TypeToken<ExtratoResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extrato do cartão (asynchronously)
     * &lt;p&gt;Permite a consulta dos movimentos por período, de um determinado cartão. A janela máxima de observação é de 30 dias, e as datas inicial e final de observação pode ser configuradas, conforme necessidade.&lt;/p&gt;
     * @param idCartao Número identificador referente ao proxy localizado no verso do cartão. (required)
     * @param dataInicial Data inicial para a consulta. (required)
     * @param dataFinal Data final para a consulta. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cartoesIdCartaoExtratoGetAsync(String idCartao, String dataInicial, String dataFinal, final ApiCallback<ExtratoResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cartoesIdCartaoExtratoGetValidateBeforeCall(idCartao, dataInicial, dataFinal, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExtratoResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for cartoesIdCartaoPortadorGet */
    private com.squareup.okhttp.Call cartoesIdCartaoPortadorGetCall(String idCartao, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cartoes/{idCartao}/portador".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "idCartao" + "\\}", apiClient.escapeString(idCartao.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "access_token", "key_id", "client_id" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cartoesIdCartaoPortadorGetValidateBeforeCall(String idCartao, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'idCartao' is set
        if (idCartao == null) {
            throw new ApiException("Missing the required parameter 'idCartao' when calling cartoesIdCartaoPortadorGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cartoesIdCartaoPortadorGetCall(idCartao, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Informações do portador do cartão
     * &lt;p&gt;Permite a consulta de informações cadastrais de um determinado portador de cartão.&lt;/p&gt;
     * @param idCartao Número identificador referente ao proxy localizado no verso do cartão. (required)
     * @return PortadorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PortadorResponse cartoesIdCartaoPortadorGet(String idCartao) throws ApiException {
        ApiResponse<PortadorResponse> resp = cartoesIdCartaoPortadorGetWithHttpInfo(idCartao);
        return resp.getData();
    }

    /**
     * Informações do portador do cartão
     * &lt;p&gt;Permite a consulta de informações cadastrais de um determinado portador de cartão.&lt;/p&gt;
     * @param idCartao Número identificador referente ao proxy localizado no verso do cartão. (required)
     * @return ApiResponse&lt;PortadorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PortadorResponse> cartoesIdCartaoPortadorGetWithHttpInfo(String idCartao) throws ApiException {
        com.squareup.okhttp.Call call = cartoesIdCartaoPortadorGetValidateBeforeCall(idCartao, null, null);
        Type localVarReturnType = new TypeToken<PortadorResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Informações do portador do cartão (asynchronously)
     * &lt;p&gt;Permite a consulta de informações cadastrais de um determinado portador de cartão.&lt;/p&gt;
     * @param idCartao Número identificador referente ao proxy localizado no verso do cartão. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cartoesIdCartaoPortadorGetAsync(String idCartao, final ApiCallback<PortadorResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cartoesIdCartaoPortadorGetValidateBeforeCall(idCartao, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortadorResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for cartoesIdCartaoSaldoGet */
    private com.squareup.okhttp.Call cartoesIdCartaoSaldoGetCall(String idCartao, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cartoes/{idCartao}/saldo".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "idCartao" + "\\}", apiClient.escapeString(idCartao.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "access_token", "key_id", "client_id" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cartoesIdCartaoSaldoGetValidateBeforeCall(String idCartao, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'idCartao' is set
        if (idCartao == null) {
            throw new ApiException("Missing the required parameter 'idCartao' when calling cartoesIdCartaoSaldoGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cartoesIdCartaoSaldoGetCall(idCartao, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Saldo do cartão
     * &lt;p&gt;Permite a consulta do saldo disponível de um determinado cartão.&lt;/p&gt;
     * @param idCartao Número identificador referente ao proxy localizado no verso do cartão. (required)
     * @return Saldo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Saldo cartoesIdCartaoSaldoGet(String idCartao) throws ApiException {
        ApiResponse<Saldo> resp = cartoesIdCartaoSaldoGetWithHttpInfo(idCartao);
        return resp.getData();
    }

    /**
     * Saldo do cartão
     * &lt;p&gt;Permite a consulta do saldo disponível de um determinado cartão.&lt;/p&gt;
     * @param idCartao Número identificador referente ao proxy localizado no verso do cartão. (required)
     * @return ApiResponse&lt;Saldo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Saldo> cartoesIdCartaoSaldoGetWithHttpInfo(String idCartao) throws ApiException {
        com.squareup.okhttp.Call call = cartoesIdCartaoSaldoGetValidateBeforeCall(idCartao, null, null);
        Type localVarReturnType = new TypeToken<Saldo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Saldo do cartão (asynchronously)
     * &lt;p&gt;Permite a consulta do saldo disponível de um determinado cartão.&lt;/p&gt;
     * @param idCartao Número identificador referente ao proxy localizado no verso do cartão. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cartoesIdCartaoSaldoGetAsync(String idCartao, final ApiCallback<Saldo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cartoesIdCartaoSaldoGetValidateBeforeCall(idCartao, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Saldo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for cartoesIdCartaoSaldoPut */
    private com.squareup.okhttp.Call cartoesIdCartaoSaldoPutCall(String idCartao, SetSaldo saldo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = saldo;
        
        // create path and map variables
        String localVarPath = "/cartoes/{idCartao}/saldo".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "idCartao" + "\\}", apiClient.escapeString(idCartao.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "access_token", "key_id", "client_id" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cartoesIdCartaoSaldoPutValidateBeforeCall(String idCartao, SetSaldo saldo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'idCartao' is set
        if (idCartao == null) {
            throw new ApiException("Missing the required parameter 'idCartao' when calling cartoesIdCartaoSaldoPut(Async)");
        }
        
        // verify the required parameter 'saldo' is set
        if (saldo == null) {
            throw new ApiException("Missing the required parameter 'saldo' when calling cartoesIdCartaoSaldoPut(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cartoesIdCartaoSaldoPutCall(idCartao, saldo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Credita ou debita valor da conta de um cartão.
     * &lt;p&gt;Permite creditar ou debitar um valor especifico em um determinado cartão.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt;Este recurso deve ser utilizado somente pelo reseller e quando o credito do cartão for de responsabilidade e propriedade do Reseller.&lt;/p&gt;
     * @param idCartao Número identificador referente ao proxy localizado no verso do cartão. (required)
     * @param saldo Objeto de requisição (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void cartoesIdCartaoSaldoPut(String idCartao, SetSaldo saldo) throws ApiException {
        cartoesIdCartaoSaldoPutWithHttpInfo(idCartao, saldo);
    }

    /**
     * Credita ou debita valor da conta de um cartão.
     * &lt;p&gt;Permite creditar ou debitar um valor especifico em um determinado cartão.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt;Este recurso deve ser utilizado somente pelo reseller e quando o credito do cartão for de responsabilidade e propriedade do Reseller.&lt;/p&gt;
     * @param idCartao Número identificador referente ao proxy localizado no verso do cartão. (required)
     * @param saldo Objeto de requisição (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> cartoesIdCartaoSaldoPutWithHttpInfo(String idCartao, SetSaldo saldo) throws ApiException {
        com.squareup.okhttp.Call call = cartoesIdCartaoSaldoPutValidateBeforeCall(idCartao, saldo, null, null);
        return apiClient.execute(call);
    }

    /**
     * Credita ou debita valor da conta de um cartão. (asynchronously)
     * &lt;p&gt;Permite creditar ou debitar um valor especifico em um determinado cartão.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt;Este recurso deve ser utilizado somente pelo reseller e quando o credito do cartão for de responsabilidade e propriedade do Reseller.&lt;/p&gt;
     * @param idCartao Número identificador referente ao proxy localizado no verso do cartão. (required)
     * @param saldo Objeto de requisição (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cartoesIdCartaoSaldoPutAsync(String idCartao, SetSaldo saldo, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cartoesIdCartaoSaldoPutValidateBeforeCall(idCartao, saldo, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for cartoesIdCartaoStatusGet */
    private com.squareup.okhttp.Call cartoesIdCartaoStatusGetCall(String idCartao, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cartoes/{idCartao}/status".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "idCartao" + "\\}", apiClient.escapeString(idCartao.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "access_token", "key_id", "client_id" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cartoesIdCartaoStatusGetValidateBeforeCall(String idCartao, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'idCartao' is set
        if (idCartao == null) {
            throw new ApiException("Missing the required parameter 'idCartao' when calling cartoesIdCartaoStatusGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cartoesIdCartaoStatusGetCall(idCartao, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Status do cartão
     * &lt;p&gt;Permite a consulta do status de um determinado cartão. O status do cartão nos permite saber se o cartão esta ativo, bloqueado , desbloqueado ou cancelado.&lt;/p&gt;
     * @param idCartao Número identificador referente ao proxy localizado no verso do cartão. (required)
     * @return StatusCartaoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StatusCartaoResponse cartoesIdCartaoStatusGet(String idCartao) throws ApiException {
        ApiResponse<StatusCartaoResponse> resp = cartoesIdCartaoStatusGetWithHttpInfo(idCartao);
        return resp.getData();
    }

    /**
     * Status do cartão
     * &lt;p&gt;Permite a consulta do status de um determinado cartão. O status do cartão nos permite saber se o cartão esta ativo, bloqueado , desbloqueado ou cancelado.&lt;/p&gt;
     * @param idCartao Número identificador referente ao proxy localizado no verso do cartão. (required)
     * @return ApiResponse&lt;StatusCartaoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StatusCartaoResponse> cartoesIdCartaoStatusGetWithHttpInfo(String idCartao) throws ApiException {
        com.squareup.okhttp.Call call = cartoesIdCartaoStatusGetValidateBeforeCall(idCartao, null, null);
        Type localVarReturnType = new TypeToken<StatusCartaoResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Status do cartão (asynchronously)
     * &lt;p&gt;Permite a consulta do status de um determinado cartão. O status do cartão nos permite saber se o cartão esta ativo, bloqueado , desbloqueado ou cancelado.&lt;/p&gt;
     * @param idCartao Número identificador referente ao proxy localizado no verso do cartão. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cartoesIdCartaoStatusGetAsync(String idCartao, final ApiCallback<StatusCartaoResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cartoesIdCartaoStatusGetValidateBeforeCall(idCartao, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StatusCartaoResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for cartoesIdCartaoStatusPut */
    private com.squareup.okhttp.Call cartoesIdCartaoStatusPutCall(String idCartao, SetCardStatus status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = status;
        
        // create path and map variables
        String localVarPath = "/cartoes/{idCartao}/status".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "idCartao" + "\\}", apiClient.escapeString(idCartao.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "access_token", "key_id", "client_id" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cartoesIdCartaoStatusPutValidateBeforeCall(String idCartao, SetCardStatus status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'idCartao' is set
        if (idCartao == null) {
            throw new ApiException("Missing the required parameter 'idCartao' when calling cartoesIdCartaoStatusPut(Async)");
        }
        
        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling cartoesIdCartaoStatusPut(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cartoesIdCartaoStatusPutCall(idCartao, status, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Altera status do cartão
     * &lt;p&gt;Permite o bloqueio e desbloqueio de um determinado cartão.&lt;/p&gt;
     * @param idCartao Número identificador referente ao proxy localizado no verso do cartão. (required)
     * @param status Objeto de requisição (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void cartoesIdCartaoStatusPut(String idCartao, SetCardStatus status) throws ApiException {
        cartoesIdCartaoStatusPutWithHttpInfo(idCartao, status);
    }

    /**
     * Altera status do cartão
     * &lt;p&gt;Permite o bloqueio e desbloqueio de um determinado cartão.&lt;/p&gt;
     * @param idCartao Número identificador referente ao proxy localizado no verso do cartão. (required)
     * @param status Objeto de requisição (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> cartoesIdCartaoStatusPutWithHttpInfo(String idCartao, SetCardStatus status) throws ApiException {
        com.squareup.okhttp.Call call = cartoesIdCartaoStatusPutValidateBeforeCall(idCartao, status, null, null);
        return apiClient.execute(call);
    }

    /**
     * Altera status do cartão (asynchronously)
     * &lt;p&gt;Permite o bloqueio e desbloqueio de um determinado cartão.&lt;/p&gt;
     * @param idCartao Número identificador referente ao proxy localizado no verso do cartão. (required)
     * @param status Objeto de requisição (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cartoesIdCartaoStatusPutAsync(String idCartao, SetCardStatus status, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cartoesIdCartaoStatusPutValidateBeforeCall(idCartao, status, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for cartoesPost */
    private com.squareup.okhttp.Call cartoesPostCall(SetNovoCartao cartao, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = cartao;
        
        // create path and map variables
        String localVarPath = "/cartoes".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "access_token", "key_id", "client_id" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cartoesPostValidateBeforeCall(SetNovoCartao cartao, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cartao' is set
        if (cartao == null) {
            throw new ApiException("Missing the required parameter 'cartao' when calling cartoesPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cartoesPostCall(cartao, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Requisita um cartão de debito
     * &lt;p&gt;Permite a carga de um valor especifico a um determinado cartão.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt;Este recurso deve ser utilizado somente pelo reseller e com fundo disponível na conta e ainda dependente de aprovação pelo agente financeiro&lt;/p&gt; 
     * @param cartao Objeto de requisição (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void cartoesPost(SetNovoCartao cartao) throws ApiException {
        cartoesPostWithHttpInfo(cartao);
    }

    /**
     * Requisita um cartão de debito
     * &lt;p&gt;Permite a carga de um valor especifico a um determinado cartão.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt;Este recurso deve ser utilizado somente pelo reseller e com fundo disponível na conta e ainda dependente de aprovação pelo agente financeiro&lt;/p&gt; 
     * @param cartao Objeto de requisição (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> cartoesPostWithHttpInfo(SetNovoCartao cartao) throws ApiException {
        com.squareup.okhttp.Call call = cartoesPostValidateBeforeCall(cartao, null, null);
        return apiClient.execute(call);
    }

    /**
     * Requisita um cartão de debito (asynchronously)
     * &lt;p&gt;Permite a carga de um valor especifico a um determinado cartão.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt;Este recurso deve ser utilizado somente pelo reseller e com fundo disponível na conta e ainda dependente de aprovação pelo agente financeiro&lt;/p&gt; 
     * @param cartao Objeto de requisição (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cartoesPostAsync(SetNovoCartao cartao, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cartoesPostValidateBeforeCall(cartao, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
