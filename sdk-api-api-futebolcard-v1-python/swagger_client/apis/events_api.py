# coding: utf-8

"""
    API do Futebolcard

    Futebolcard manipulation API

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class EventsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def events_event_id_get(self, client_id, access_token, event_id, **kwargs):
        """
        Returns the details for a specific event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.events_event_id_get(client_id, access_token, event_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str client_id: Customer identifier used for authentication. (required)
        :param str access_token: Access token used in the authentication. (required)
        :param str event_id: Event to search. (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.events_event_id_get_with_http_info(client_id, access_token, event_id, **kwargs)
        else:
            (data) = self.events_event_id_get_with_http_info(client_id, access_token, event_id, **kwargs)
            return data

    def events_event_id_get_with_http_info(self, client_id, access_token, event_id, **kwargs):
        """
        Returns the details for a specific event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.events_event_id_get_with_http_info(client_id, access_token, event_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str client_id: Customer identifier used for authentication. (required)
        :param str access_token: Access token used in the authentication. (required)
        :param str event_id: Event to search. (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'access_token', 'event_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method events_event_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params) or (params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `events_event_id_get`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `events_event_id_get`")
        # verify the required parameter 'event_id' is set
        if ('event_id' not in params) or (params['event_id'] is None):
            raise ValueError("Missing the required parameter `event_id` when calling `events_event_id_get`")


        collection_formats = {}

        resource_path = '/events/{eventId}'.replace('{format}', 'json')
        path_params = {}
        if 'event_id' in params:
            path_params['eventId'] = params['event_id']

        query_params = {}

        header_params = {}
        if 'client_id' in params:
            header_params['client_id'] = params['client_id']
        if 'access_token' in params:
            header_params['access_token'] = params['access_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse200',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def events_event_id_sectors_get(self, client_id, access_token, event_id, **kwargs):
        """
        Returns a list of sector for the given event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.events_event_id_sectors_get(client_id, access_token, event_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str client_id: Customer identifier used for authentication. (required)
        :param str access_token: Access token used in the authentication. (required)
        :param str event_id: Event to search. (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.events_event_id_sectors_get_with_http_info(client_id, access_token, event_id, **kwargs)
        else:
            (data) = self.events_event_id_sectors_get_with_http_info(client_id, access_token, event_id, **kwargs)
            return data

    def events_event_id_sectors_get_with_http_info(self, client_id, access_token, event_id, **kwargs):
        """
        Returns a list of sector for the given event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.events_event_id_sectors_get_with_http_info(client_id, access_token, event_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str client_id: Customer identifier used for authentication. (required)
        :param str access_token: Access token used in the authentication. (required)
        :param str event_id: Event to search. (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'access_token', 'event_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method events_event_id_sectors_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params) or (params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `events_event_id_sectors_get`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `events_event_id_sectors_get`")
        # verify the required parameter 'event_id' is set
        if ('event_id' not in params) or (params['event_id'] is None):
            raise ValueError("Missing the required parameter `event_id` when calling `events_event_id_sectors_get`")


        collection_formats = {}

        resource_path = '/events/{eventId}/sectors'.replace('{format}', 'json')
        path_params = {}
        if 'event_id' in params:
            path_params['eventId'] = params['event_id']

        query_params = {}

        header_params = {}
        if 'client_id' in params:
            header_params['client_id'] = params['client_id']
        if 'access_token' in params:
            header_params['access_token'] = params['access_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2001',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def events_event_id_sectors_sector_id_get(self, client_id, access_token, event_id, sector_id, **kwargs):
        """
        Returns the details of a specific sector.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.events_event_id_sectors_sector_id_get(client_id, access_token, event_id, sector_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str client_id: Customer identifier used for authentication. (required)
        :param str access_token: Access token used in the authentication. (required)
        :param str event_id: Event to search. (required)
        :param str sector_id: Sector to search. (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.events_event_id_sectors_sector_id_get_with_http_info(client_id, access_token, event_id, sector_id, **kwargs)
        else:
            (data) = self.events_event_id_sectors_sector_id_get_with_http_info(client_id, access_token, event_id, sector_id, **kwargs)
            return data

    def events_event_id_sectors_sector_id_get_with_http_info(self, client_id, access_token, event_id, sector_id, **kwargs):
        """
        Returns the details of a specific sector.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.events_event_id_sectors_sector_id_get_with_http_info(client_id, access_token, event_id, sector_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str client_id: Customer identifier used for authentication. (required)
        :param str access_token: Access token used in the authentication. (required)
        :param str event_id: Event to search. (required)
        :param str sector_id: Sector to search. (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'access_token', 'event_id', 'sector_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method events_event_id_sectors_sector_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params) or (params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `events_event_id_sectors_sector_id_get`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `events_event_id_sectors_sector_id_get`")
        # verify the required parameter 'event_id' is set
        if ('event_id' not in params) or (params['event_id'] is None):
            raise ValueError("Missing the required parameter `event_id` when calling `events_event_id_sectors_sector_id_get`")
        # verify the required parameter 'sector_id' is set
        if ('sector_id' not in params) or (params['sector_id'] is None):
            raise ValueError("Missing the required parameter `sector_id` when calling `events_event_id_sectors_sector_id_get`")


        collection_formats = {}

        resource_path = '/events/{eventId}/sectors/{sectorId}'.replace('{format}', 'json')
        path_params = {}
        if 'event_id' in params:
            path_params['eventId'] = params['event_id']
        if 'sector_id' in params:
            path_params['sectorId'] = params['sector_id']

        query_params = {}

        header_params = {}
        if 'client_id' in params:
            header_params['client_id'] = params['client_id']
        if 'access_token' in params:
            header_params['access_token'] = params['access_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2002',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def events_event_id_sectors_sector_id_subsectors_get(self, client_id, access_token, event_id, sector_id, **kwargs):
        """
        Returns a list of subcsectors for a given sector.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.events_event_id_sectors_sector_id_subsectors_get(client_id, access_token, event_id, sector_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str client_id: Customer identifier used for authentication. (required)
        :param str access_token: Access token used in the authentication. (required)
        :param str event_id: Event to search. (required)
        :param str sector_id: Sector to search. (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.events_event_id_sectors_sector_id_subsectors_get_with_http_info(client_id, access_token, event_id, sector_id, **kwargs)
        else:
            (data) = self.events_event_id_sectors_sector_id_subsectors_get_with_http_info(client_id, access_token, event_id, sector_id, **kwargs)
            return data

    def events_event_id_sectors_sector_id_subsectors_get_with_http_info(self, client_id, access_token, event_id, sector_id, **kwargs):
        """
        Returns a list of subcsectors for a given sector.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.events_event_id_sectors_sector_id_subsectors_get_with_http_info(client_id, access_token, event_id, sector_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str client_id: Customer identifier used for authentication. (required)
        :param str access_token: Access token used in the authentication. (required)
        :param str event_id: Event to search. (required)
        :param str sector_id: Sector to search. (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'access_token', 'event_id', 'sector_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method events_event_id_sectors_sector_id_subsectors_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params) or (params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `events_event_id_sectors_sector_id_subsectors_get`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `events_event_id_sectors_sector_id_subsectors_get`")
        # verify the required parameter 'event_id' is set
        if ('event_id' not in params) or (params['event_id'] is None):
            raise ValueError("Missing the required parameter `event_id` when calling `events_event_id_sectors_sector_id_subsectors_get`")
        # verify the required parameter 'sector_id' is set
        if ('sector_id' not in params) or (params['sector_id'] is None):
            raise ValueError("Missing the required parameter `sector_id` when calling `events_event_id_sectors_sector_id_subsectors_get`")


        collection_formats = {}

        resource_path = '/events/{eventId}/sectors/{sectorId}/subsectors'.replace('{format}', 'json')
        path_params = {}
        if 'event_id' in params:
            path_params['eventId'] = params['event_id']
        if 'sector_id' in params:
            path_params['sectorId'] = params['sector_id']

        query_params = {}

        header_params = {}
        if 'client_id' in params:
            header_params['client_id'] = params['client_id']
        if 'access_token' in params:
            header_params['access_token'] = params['access_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2002',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def events_event_id_sectors_sector_id_subsectors_subsector_id_get(self, client_id, access_token, event_id, sector_id, subsector_id, **kwargs):
        """
        Returns a list of seat's information for each row of a given subsector.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.events_event_id_sectors_sector_id_subsectors_subsector_id_get(client_id, access_token, event_id, sector_id, subsector_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str client_id: Customer identifier used for authentication. (required)
        :param str access_token: Access token used in the authentication. (required)
        :param str event_id: Event to search. (required)
        :param str sector_id: Sector to search. (required)
        :param str subsector_id: Subsector to search. (required)
        :return: list[InlineResponse2003]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.events_event_id_sectors_sector_id_subsectors_subsector_id_get_with_http_info(client_id, access_token, event_id, sector_id, subsector_id, **kwargs)
        else:
            (data) = self.events_event_id_sectors_sector_id_subsectors_subsector_id_get_with_http_info(client_id, access_token, event_id, sector_id, subsector_id, **kwargs)
            return data

    def events_event_id_sectors_sector_id_subsectors_subsector_id_get_with_http_info(self, client_id, access_token, event_id, sector_id, subsector_id, **kwargs):
        """
        Returns a list of seat's information for each row of a given subsector.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.events_event_id_sectors_sector_id_subsectors_subsector_id_get_with_http_info(client_id, access_token, event_id, sector_id, subsector_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str client_id: Customer identifier used for authentication. (required)
        :param str access_token: Access token used in the authentication. (required)
        :param str event_id: Event to search. (required)
        :param str sector_id: Sector to search. (required)
        :param str subsector_id: Subsector to search. (required)
        :return: list[InlineResponse2003]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'access_token', 'event_id', 'sector_id', 'subsector_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method events_event_id_sectors_sector_id_subsectors_subsector_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params) or (params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `events_event_id_sectors_sector_id_subsectors_subsector_id_get`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `events_event_id_sectors_sector_id_subsectors_subsector_id_get`")
        # verify the required parameter 'event_id' is set
        if ('event_id' not in params) or (params['event_id'] is None):
            raise ValueError("Missing the required parameter `event_id` when calling `events_event_id_sectors_sector_id_subsectors_subsector_id_get`")
        # verify the required parameter 'sector_id' is set
        if ('sector_id' not in params) or (params['sector_id'] is None):
            raise ValueError("Missing the required parameter `sector_id` when calling `events_event_id_sectors_sector_id_subsectors_subsector_id_get`")
        # verify the required parameter 'subsector_id' is set
        if ('subsector_id' not in params) or (params['subsector_id'] is None):
            raise ValueError("Missing the required parameter `subsector_id` when calling `events_event_id_sectors_sector_id_subsectors_subsector_id_get`")


        collection_formats = {}

        resource_path = '/events/{eventId}/sectors/{sectorId}/subsectors/{subsectorId}'.replace('{format}', 'json')
        path_params = {}
        if 'event_id' in params:
            path_params['eventId'] = params['event_id']
        if 'sector_id' in params:
            path_params['sectorId'] = params['sector_id']
        if 'subsector_id' in params:
            path_params['subsectorId'] = params['subsector_id']

        query_params = {}

        header_params = {}
        if 'client_id' in params:
            header_params['client_id'] = params['client_id']
        if 'access_token' in params:
            header_params['access_token'] = params['access_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[InlineResponse2003]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def events_get(self, client_id, access_token, **kwargs):
        """
        Returns a list of existing events.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.events_get(client_id, access_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str client_id: Customer identifier used for authentication. (required)
        :param str access_token: Access token used in the authentication. (required)
        :return: list[InlineResponse200]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.events_get_with_http_info(client_id, access_token, **kwargs)
        else:
            (data) = self.events_get_with_http_info(client_id, access_token, **kwargs)
            return data

    def events_get_with_http_info(self, client_id, access_token, **kwargs):
        """
        Returns a list of existing events.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.events_get_with_http_info(client_id, access_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str client_id: Customer identifier used for authentication. (required)
        :param str access_token: Access token used in the authentication. (required)
        :return: list[InlineResponse200]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'access_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method events_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params) or (params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `events_get`")
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `events_get`")


        collection_formats = {}

        resource_path = '/events'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'client_id' in params:
            header_params['client_id'] = params['client_id']
        if 'access_token' in params:
            header_params['access_token'] = params['access_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[InlineResponse200]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
