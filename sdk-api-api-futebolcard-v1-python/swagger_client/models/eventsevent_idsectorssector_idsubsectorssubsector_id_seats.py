# coding: utf-8

"""
    API do Futebolcard

    Futebolcard manipulation API

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EventseventIdsectorssectorIdsubsectorssubsectorIdSeats(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, ticket_id=None, ticket_status=None, owner_id=None, seat_number=None):
        """
        EventseventIdsectorssectorIdsubsectorssubsectorIdSeats - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'ticket_id': 'str',
            'ticket_status': 'str',
            'owner_id': 'str',
            'seat_number': 'str'
        }

        self.attribute_map = {
            'ticket_id': 'ticketId',
            'ticket_status': 'ticketStatus',
            'owner_id': 'ownerId',
            'seat_number': 'seatNumber'
        }

        self._ticket_id = ticket_id
        self._ticket_status = ticket_status
        self._owner_id = owner_id
        self._seat_number = seat_number

    @property
    def ticket_id(self):
        """
        Gets the ticket_id of this EventseventIdsectorssectorIdsubsectorssubsectorIdSeats.

        :return: The ticket_id of this EventseventIdsectorssectorIdsubsectorssubsectorIdSeats.
        :rtype: str
        """
        return self._ticket_id

    @ticket_id.setter
    def ticket_id(self, ticket_id):
        """
        Sets the ticket_id of this EventseventIdsectorssectorIdsubsectorssubsectorIdSeats.

        :param ticket_id: The ticket_id of this EventseventIdsectorssectorIdsubsectorssubsectorIdSeats.
        :type: str
        """

        self._ticket_id = ticket_id

    @property
    def ticket_status(self):
        """
        Gets the ticket_status of this EventseventIdsectorssectorIdsubsectorssubsectorIdSeats.

        :return: The ticket_status of this EventseventIdsectorssectorIdsubsectorssubsectorIdSeats.
        :rtype: str
        """
        return self._ticket_status

    @ticket_status.setter
    def ticket_status(self, ticket_status):
        """
        Sets the ticket_status of this EventseventIdsectorssectorIdsubsectorssubsectorIdSeats.

        :param ticket_status: The ticket_status of this EventseventIdsectorssectorIdsubsectorssubsectorIdSeats.
        :type: str
        """

        self._ticket_status = ticket_status

    @property
    def owner_id(self):
        """
        Gets the owner_id of this EventseventIdsectorssectorIdsubsectorssubsectorIdSeats.

        :return: The owner_id of this EventseventIdsectorssectorIdsubsectorssubsectorIdSeats.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """
        Sets the owner_id of this EventseventIdsectorssectorIdsubsectorssubsectorIdSeats.

        :param owner_id: The owner_id of this EventseventIdsectorssectorIdsubsectorssubsectorIdSeats.
        :type: str
        """

        self._owner_id = owner_id

    @property
    def seat_number(self):
        """
        Gets the seat_number of this EventseventIdsectorssectorIdsubsectorssubsectorIdSeats.

        :return: The seat_number of this EventseventIdsectorssectorIdsubsectorssubsectorIdSeats.
        :rtype: str
        """
        return self._seat_number

    @seat_number.setter
    def seat_number(self, seat_number):
        """
        Sets the seat_number of this EventseventIdsectorssectorIdsubsectorssubsectorIdSeats.

        :param seat_number: The seat_number of this EventseventIdsectorssectorIdsubsectorssubsectorIdSeats.
        :type: str
        """

        self._seat_number = seat_number

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EventseventIdsectorssectorIdsubsectorssubsectorIdSeats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
