<?php
/**
 * CartoesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Agillitas Cartões Pré-pagos
 *
 * API para manipular recursos relacionadas à cartões pré-pagos Agillitas.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * CartoesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CartoesApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return CartoesApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation cartoesGet
     *
     * Obtém o número de identificação (Proxy) de um cartão
     *
     * @param string $tipo_cartao Identifica qual o tipo do cartão, físico ou virtual. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CartaoDisponivel
     */
    public function cartoesGet($tipo_cartao)
    {
        list($response) = $this->cartoesGetWithHttpInfo($tipo_cartao);
        return $response;
    }

    /**
     * Operation cartoesGetWithHttpInfo
     *
     * Obtém o número de identificação (Proxy) de um cartão
     *
     * @param string $tipo_cartao Identifica qual o tipo do cartão, físico ou virtual. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CartaoDisponivel, HTTP status code, HTTP response headers (array of strings)
     */
    public function cartoesGetWithHttpInfo($tipo_cartao)
    {
        // verify the required parameter 'tipo_cartao' is set
        if ($tipo_cartao === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tipo_cartao when calling cartoesGet');
        }
        // parse inputs
        $resourcePath = "/cartoes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($tipo_cartao !== null) {
            $queryParams['tipoCartao'] = $this->apiClient->getSerializer()->toQueryValue($tipo_cartao);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $headerParams['access_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('client_id');
        if (strlen($apiKey) !== 0) {
            $headerParams['client_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CartaoDisponivel',
                '/cartoes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CartaoDisponivel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CartaoDisponivel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\MsgErro', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cartoesIdCartaoExtratoGet
     *
     * Extrato do cartão
     *
     * @param string $id_cartao Número identificador referente ao proxy localizado no verso do cartão. (required)
     * @param string $data_inicial Data inicial para a consulta. (required)
     * @param string $data_final Data final para a consulta. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ExtratoResponse
     */
    public function cartoesIdCartaoExtratoGet($id_cartao, $data_inicial, $data_final)
    {
        list($response) = $this->cartoesIdCartaoExtratoGetWithHttpInfo($id_cartao, $data_inicial, $data_final);
        return $response;
    }

    /**
     * Operation cartoesIdCartaoExtratoGetWithHttpInfo
     *
     * Extrato do cartão
     *
     * @param string $id_cartao Número identificador referente ao proxy localizado no verso do cartão. (required)
     * @param string $data_inicial Data inicial para a consulta. (required)
     * @param string $data_final Data final para a consulta. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ExtratoResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cartoesIdCartaoExtratoGetWithHttpInfo($id_cartao, $data_inicial, $data_final)
    {
        // verify the required parameter 'id_cartao' is set
        if ($id_cartao === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_cartao when calling cartoesIdCartaoExtratoGet');
        }
        // verify the required parameter 'data_inicial' is set
        if ($data_inicial === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data_inicial when calling cartoesIdCartaoExtratoGet');
        }
        // verify the required parameter 'data_final' is set
        if ($data_final === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data_final when calling cartoesIdCartaoExtratoGet');
        }
        // parse inputs
        $resourcePath = "/cartoes/{idCartao}/extrato";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($data_inicial !== null) {
            $queryParams['dataInicial'] = $this->apiClient->getSerializer()->toQueryValue($data_inicial);
        }
        // query params
        if ($data_final !== null) {
            $queryParams['dataFinal'] = $this->apiClient->getSerializer()->toQueryValue($data_final);
        }
        // path params
        if ($id_cartao !== null) {
            $resourcePath = str_replace(
                "{" . "idCartao" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_cartao),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $headerParams['access_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('client_id');
        if (strlen($apiKey) !== 0) {
            $headerParams['client_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ExtratoResponse',
                '/cartoes/{idCartao}/extrato'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ExtratoResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ExtratoResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\MsgErro', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cartoesIdCartaoPortadorGet
     *
     * Informações do portador do cartão
     *
     * @param string $id_cartao Número identificador referente ao proxy localizado no verso do cartão. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\PortadorResponse
     */
    public function cartoesIdCartaoPortadorGet($id_cartao)
    {
        list($response) = $this->cartoesIdCartaoPortadorGetWithHttpInfo($id_cartao);
        return $response;
    }

    /**
     * Operation cartoesIdCartaoPortadorGetWithHttpInfo
     *
     * Informações do portador do cartão
     *
     * @param string $id_cartao Número identificador referente ao proxy localizado no verso do cartão. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\PortadorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cartoesIdCartaoPortadorGetWithHttpInfo($id_cartao)
    {
        // verify the required parameter 'id_cartao' is set
        if ($id_cartao === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_cartao when calling cartoesIdCartaoPortadorGet');
        }
        // parse inputs
        $resourcePath = "/cartoes/{idCartao}/portador";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id_cartao !== null) {
            $resourcePath = str_replace(
                "{" . "idCartao" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_cartao),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $headerParams['access_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('client_id');
        if (strlen($apiKey) !== 0) {
            $headerParams['client_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PortadorResponse',
                '/cartoes/{idCartao}/portador'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PortadorResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PortadorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\MsgErro', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cartoesIdCartaoSaldoGet
     *
     * Saldo do cartão
     *
     * @param string $id_cartao Número identificador referente ao proxy localizado no verso do cartão. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Saldo
     */
    public function cartoesIdCartaoSaldoGet($id_cartao)
    {
        list($response) = $this->cartoesIdCartaoSaldoGetWithHttpInfo($id_cartao);
        return $response;
    }

    /**
     * Operation cartoesIdCartaoSaldoGetWithHttpInfo
     *
     * Saldo do cartão
     *
     * @param string $id_cartao Número identificador referente ao proxy localizado no verso do cartão. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Saldo, HTTP status code, HTTP response headers (array of strings)
     */
    public function cartoesIdCartaoSaldoGetWithHttpInfo($id_cartao)
    {
        // verify the required parameter 'id_cartao' is set
        if ($id_cartao === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_cartao when calling cartoesIdCartaoSaldoGet');
        }
        // parse inputs
        $resourcePath = "/cartoes/{idCartao}/saldo";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id_cartao !== null) {
            $resourcePath = str_replace(
                "{" . "idCartao" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_cartao),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $headerParams['access_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('client_id');
        if (strlen($apiKey) !== 0) {
            $headerParams['client_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Saldo',
                '/cartoes/{idCartao}/saldo'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Saldo', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Saldo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\MsgErro', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cartoesIdCartaoSaldoPut
     *
     * Credita ou debita valor da conta de um cartão.
     *
     * @param string $id_cartao Número identificador referente ao proxy localizado no verso do cartão. (required)
     * @param \Swagger\Client\Model\SetSaldo $saldo Objeto de requisição (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function cartoesIdCartaoSaldoPut($id_cartao, $saldo)
    {
        list($response) = $this->cartoesIdCartaoSaldoPutWithHttpInfo($id_cartao, $saldo);
        return $response;
    }

    /**
     * Operation cartoesIdCartaoSaldoPutWithHttpInfo
     *
     * Credita ou debita valor da conta de um cartão.
     *
     * @param string $id_cartao Número identificador referente ao proxy localizado no verso do cartão. (required)
     * @param \Swagger\Client\Model\SetSaldo $saldo Objeto de requisição (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cartoesIdCartaoSaldoPutWithHttpInfo($id_cartao, $saldo)
    {
        // verify the required parameter 'id_cartao' is set
        if ($id_cartao === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_cartao when calling cartoesIdCartaoSaldoPut');
        }
        // verify the required parameter 'saldo' is set
        if ($saldo === null) {
            throw new \InvalidArgumentException('Missing the required parameter $saldo when calling cartoesIdCartaoSaldoPut');
        }
        // parse inputs
        $resourcePath = "/cartoes/{idCartao}/saldo";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id_cartao !== null) {
            $resourcePath = str_replace(
                "{" . "idCartao" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_cartao),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($saldo)) {
            $_tempBody = $saldo;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $headerParams['access_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('client_id');
        if (strlen($apiKey) !== 0) {
            $headerParams['client_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/cartoes/{idCartao}/saldo'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\MsgErro', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cartoesIdCartaoStatusGet
     *
     * Status do cartão
     *
     * @param string $id_cartao Número identificador referente ao proxy localizado no verso do cartão. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\StatusCartaoResponse
     */
    public function cartoesIdCartaoStatusGet($id_cartao)
    {
        list($response) = $this->cartoesIdCartaoStatusGetWithHttpInfo($id_cartao);
        return $response;
    }

    /**
     * Operation cartoesIdCartaoStatusGetWithHttpInfo
     *
     * Status do cartão
     *
     * @param string $id_cartao Número identificador referente ao proxy localizado no verso do cartão. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\StatusCartaoResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cartoesIdCartaoStatusGetWithHttpInfo($id_cartao)
    {
        // verify the required parameter 'id_cartao' is set
        if ($id_cartao === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_cartao when calling cartoesIdCartaoStatusGet');
        }
        // parse inputs
        $resourcePath = "/cartoes/{idCartao}/status";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id_cartao !== null) {
            $resourcePath = str_replace(
                "{" . "idCartao" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_cartao),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $headerParams['access_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('client_id');
        if (strlen($apiKey) !== 0) {
            $headerParams['client_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\StatusCartaoResponse',
                '/cartoes/{idCartao}/status'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\StatusCartaoResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\StatusCartaoResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\MsgErro', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cartoesIdCartaoStatusPut
     *
     * Altera status do cartão
     *
     * @param string $id_cartao Número identificador referente ao proxy localizado no verso do cartão. (required)
     * @param \Swagger\Client\Model\SetCardStatus $status Objeto de requisição (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function cartoesIdCartaoStatusPut($id_cartao, $status)
    {
        list($response) = $this->cartoesIdCartaoStatusPutWithHttpInfo($id_cartao, $status);
        return $response;
    }

    /**
     * Operation cartoesIdCartaoStatusPutWithHttpInfo
     *
     * Altera status do cartão
     *
     * @param string $id_cartao Número identificador referente ao proxy localizado no verso do cartão. (required)
     * @param \Swagger\Client\Model\SetCardStatus $status Objeto de requisição (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cartoesIdCartaoStatusPutWithHttpInfo($id_cartao, $status)
    {
        // verify the required parameter 'id_cartao' is set
        if ($id_cartao === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_cartao when calling cartoesIdCartaoStatusPut');
        }
        // verify the required parameter 'status' is set
        if ($status === null) {
            throw new \InvalidArgumentException('Missing the required parameter $status when calling cartoesIdCartaoStatusPut');
        }
        // parse inputs
        $resourcePath = "/cartoes/{idCartao}/status";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id_cartao !== null) {
            $resourcePath = str_replace(
                "{" . "idCartao" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_cartao),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($status)) {
            $_tempBody = $status;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $headerParams['access_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('client_id');
        if (strlen($apiKey) !== 0) {
            $headerParams['client_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/cartoes/{idCartao}/status'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\MsgErro', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cartoesPost
     *
     * Requisita um cartão de debito
     *
     * @param \Swagger\Client\Model\SetNovoCartao $cartao Objeto de requisição (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function cartoesPost($cartao)
    {
        list($response) = $this->cartoesPostWithHttpInfo($cartao);
        return $response;
    }

    /**
     * Operation cartoesPostWithHttpInfo
     *
     * Requisita um cartão de debito
     *
     * @param \Swagger\Client\Model\SetNovoCartao $cartao Objeto de requisição (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cartoesPostWithHttpInfo($cartao)
    {
        // verify the required parameter 'cartao' is set
        if ($cartao === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cartao when calling cartoesPost');
        }
        // parse inputs
        $resourcePath = "/cartoes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($cartao)) {
            $_tempBody = $cartao;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('access_token');
        if (strlen($apiKey) !== 0) {
            $headerParams['access_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('client_id');
        if (strlen($apiKey) !== 0) {
            $headerParams['client_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/cartoes'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\MsgErro', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
