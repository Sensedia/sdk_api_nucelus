/* 
 * API Agillitas Cartões Pré-pagos
 *
 * API para manipular recursos relacionadas à cartões pré-pagos Agillitas.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// NovoCartaoPortador
    /// </summary>
    [DataContract]
    public partial class NovoCartaoPortador :  IEquatable<NovoCartaoPortador>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NovoCartaoPortador" /> class.
        /// </summary>
        /// <param name="Nome">Nome do portador do cartão..</param>
        /// <param name="Sobrenome">Sobrenome do portador do cartão..</param>
        /// <param name="DataNascimento">Data de nascimento do portador do cartão..</param>
        /// <param name="Cpf">Numero do cadastro de pessoas física do portador..</param>
        /// <param name="Contato">Contato.</param>
        /// <param name="Endereco">Endereco.</param>
        public NovoCartaoPortador(string Nome = default(string), string Sobrenome = default(string), DateTime? DataNascimento = default(DateTime?), decimal? Cpf = default(decimal?), NovoCartaoPortadorContato Contato = default(NovoCartaoPortadorContato), NovoCartaoPortadorEndereco Endereco = default(NovoCartaoPortadorEndereco))
        {
            this.Nome = Nome;
            this.Sobrenome = Sobrenome;
            this.DataNascimento = DataNascimento;
            this.Cpf = Cpf;
            this.Contato = Contato;
            this.Endereco = Endereco;
        }
        
        /// <summary>
        /// Nome do portador do cartão.
        /// </summary>
        /// <value>Nome do portador do cartão.</value>
        [DataMember(Name="nome", EmitDefaultValue=false)]
        public string Nome { get; set; }
        /// <summary>
        /// Sobrenome do portador do cartão.
        /// </summary>
        /// <value>Sobrenome do portador do cartão.</value>
        [DataMember(Name="sobrenome", EmitDefaultValue=false)]
        public string Sobrenome { get; set; }
        /// <summary>
        /// Data de nascimento do portador do cartão.
        /// </summary>
        /// <value>Data de nascimento do portador do cartão.</value>
        [DataMember(Name="dataNascimento", EmitDefaultValue=false)]
        public DateTime? DataNascimento { get; set; }
        /// <summary>
        /// Numero do cadastro de pessoas física do portador.
        /// </summary>
        /// <value>Numero do cadastro de pessoas física do portador.</value>
        [DataMember(Name="cpf", EmitDefaultValue=false)]
        public decimal? Cpf { get; set; }
        /// <summary>
        /// Gets or Sets Contato
        /// </summary>
        [DataMember(Name="contato", EmitDefaultValue=false)]
        public NovoCartaoPortadorContato Contato { get; set; }
        /// <summary>
        /// Gets or Sets Endereco
        /// </summary>
        [DataMember(Name="endereco", EmitDefaultValue=false)]
        public NovoCartaoPortadorEndereco Endereco { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NovoCartaoPortador {\n");
            sb.Append("  Nome: ").Append(Nome).Append("\n");
            sb.Append("  Sobrenome: ").Append(Sobrenome).Append("\n");
            sb.Append("  DataNascimento: ").Append(DataNascimento).Append("\n");
            sb.Append("  Cpf: ").Append(Cpf).Append("\n");
            sb.Append("  Contato: ").Append(Contato).Append("\n");
            sb.Append("  Endereco: ").Append(Endereco).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as NovoCartaoPortador);
        }

        /// <summary>
        /// Returns true if NovoCartaoPortador instances are equal
        /// </summary>
        /// <param name="other">Instance of NovoCartaoPortador to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NovoCartaoPortador other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Nome == other.Nome ||
                    this.Nome != null &&
                    this.Nome.Equals(other.Nome)
                ) && 
                (
                    this.Sobrenome == other.Sobrenome ||
                    this.Sobrenome != null &&
                    this.Sobrenome.Equals(other.Sobrenome)
                ) && 
                (
                    this.DataNascimento == other.DataNascimento ||
                    this.DataNascimento != null &&
                    this.DataNascimento.Equals(other.DataNascimento)
                ) && 
                (
                    this.Cpf == other.Cpf ||
                    this.Cpf != null &&
                    this.Cpf.Equals(other.Cpf)
                ) && 
                (
                    this.Contato == other.Contato ||
                    this.Contato != null &&
                    this.Contato.Equals(other.Contato)
                ) && 
                (
                    this.Endereco == other.Endereco ||
                    this.Endereco != null &&
                    this.Endereco.Equals(other.Endereco)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Nome != null)
                    hash = hash * 59 + this.Nome.GetHashCode();
                if (this.Sobrenome != null)
                    hash = hash * 59 + this.Sobrenome.GetHashCode();
                if (this.DataNascimento != null)
                    hash = hash * 59 + this.DataNascimento.GetHashCode();
                if (this.Cpf != null)
                    hash = hash * 59 + this.Cpf.GetHashCode();
                if (this.Contato != null)
                    hash = hash * 59 + this.Contato.GetHashCode();
                if (this.Endereco != null)
                    hash = hash * 59 + this.Endereco.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
