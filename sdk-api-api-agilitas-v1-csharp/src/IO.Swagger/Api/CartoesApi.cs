/* 
 * API Agillitas Cartões Pré-pagos
 *
 * API para manipular recursos relacionadas à cartões pré-pagos Agillitas.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICartoesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Obtém o número de identificação (Proxy) de um cartão
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Permite a verificação de disponibilidade de cartão e qual o número de identificação (Proxy) para posterior requisição.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt; Este recurso só poderá ser utilizado em produção mediante aprovação.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoCartao">Identifica qual o tipo do cartão, físico ou virtual.</param>
        /// <returns>CartaoDisponivel</returns>
        CartaoDisponivel CartoesGet (string tipoCartao);

        /// <summary>
        /// Obtém o número de identificação (Proxy) de um cartão
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Permite a verificação de disponibilidade de cartão e qual o número de identificação (Proxy) para posterior requisição.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt; Este recurso só poderá ser utilizado em produção mediante aprovação.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoCartao">Identifica qual o tipo do cartão, físico ou virtual.</param>
        /// <returns>ApiResponse of CartaoDisponivel</returns>
        ApiResponse<CartaoDisponivel> CartoesGetWithHttpInfo (string tipoCartao);
        /// <summary>
        /// Extrato do cartão
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Permite a consulta dos movimentos por período, de um determinado cartão. A janela máxima de observação é de 30 dias, e as datas inicial e final de observação pode ser configuradas, conforme necessidade.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <param name="dataInicial">Data inicial para a consulta.</param>
        /// <param name="dataFinal">Data final para a consulta.</param>
        /// <returns>ExtratoResponse</returns>
        ExtratoResponse CartoesIdCartaoExtratoGet (string idCartao, string dataInicial, string dataFinal);

        /// <summary>
        /// Extrato do cartão
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Permite a consulta dos movimentos por período, de um determinado cartão. A janela máxima de observação é de 30 dias, e as datas inicial e final de observação pode ser configuradas, conforme necessidade.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <param name="dataInicial">Data inicial para a consulta.</param>
        /// <param name="dataFinal">Data final para a consulta.</param>
        /// <returns>ApiResponse of ExtratoResponse</returns>
        ApiResponse<ExtratoResponse> CartoesIdCartaoExtratoGetWithHttpInfo (string idCartao, string dataInicial, string dataFinal);
        /// <summary>
        /// Informações do portador do cartão
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Permite a consulta de informações cadastrais de um determinado portador de cartão.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <returns>PortadorResponse</returns>
        PortadorResponse CartoesIdCartaoPortadorGet (string idCartao);

        /// <summary>
        /// Informações do portador do cartão
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Permite a consulta de informações cadastrais de um determinado portador de cartão.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <returns>ApiResponse of PortadorResponse</returns>
        ApiResponse<PortadorResponse> CartoesIdCartaoPortadorGetWithHttpInfo (string idCartao);
        /// <summary>
        /// Saldo do cartão
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Permite a consulta do saldo disponível de um determinado cartão.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <returns>Saldo</returns>
        Saldo CartoesIdCartaoSaldoGet (string idCartao);

        /// <summary>
        /// Saldo do cartão
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Permite a consulta do saldo disponível de um determinado cartão.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <returns>ApiResponse of Saldo</returns>
        ApiResponse<Saldo> CartoesIdCartaoSaldoGetWithHttpInfo (string idCartao);
        /// <summary>
        /// Credita ou debita valor da conta de um cartão.
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Permite creditar ou debitar um valor especifico em um determinado cartão.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt;Este recurso deve ser utilizado somente pelo reseller e quando o credito do cartão for de responsabilidade e propriedade do Reseller.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <param name="saldo">Objeto de requisição</param>
        /// <returns></returns>
        void CartoesIdCartaoSaldoPut (string idCartao, SetSaldo saldo);

        /// <summary>
        /// Credita ou debita valor da conta de um cartão.
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Permite creditar ou debitar um valor especifico em um determinado cartão.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt;Este recurso deve ser utilizado somente pelo reseller e quando o credito do cartão for de responsabilidade e propriedade do Reseller.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <param name="saldo">Objeto de requisição</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CartoesIdCartaoSaldoPutWithHttpInfo (string idCartao, SetSaldo saldo);
        /// <summary>
        /// Status do cartão
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Permite a consulta do status de um determinado cartão. O status do cartão nos permite saber se o cartão esta ativo, bloqueado , desbloqueado ou cancelado.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <returns>StatusCartaoResponse</returns>
        StatusCartaoResponse CartoesIdCartaoStatusGet (string idCartao);

        /// <summary>
        /// Status do cartão
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Permite a consulta do status de um determinado cartão. O status do cartão nos permite saber se o cartão esta ativo, bloqueado , desbloqueado ou cancelado.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <returns>ApiResponse of StatusCartaoResponse</returns>
        ApiResponse<StatusCartaoResponse> CartoesIdCartaoStatusGetWithHttpInfo (string idCartao);
        /// <summary>
        /// Altera status do cartão
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Permite o bloqueio e desbloqueio de um determinado cartão.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <param name="status">Objeto de requisição</param>
        /// <returns></returns>
        void CartoesIdCartaoStatusPut (string idCartao, SetCardStatus status);

        /// <summary>
        /// Altera status do cartão
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Permite o bloqueio e desbloqueio de um determinado cartão.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <param name="status">Objeto de requisição</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CartoesIdCartaoStatusPutWithHttpInfo (string idCartao, SetCardStatus status);
        /// <summary>
        /// Requisita um cartão de debito
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Permite a carga de um valor especifico a um determinado cartão.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt;Este recurso deve ser utilizado somente pelo reseller e com fundo disponível na conta e ainda dependente de aprovação pelo agente financeiro&lt;/p&gt; 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartao">Objeto de requisição</param>
        /// <returns></returns>
        void CartoesPost (SetNovoCartao cartao);

        /// <summary>
        /// Requisita um cartão de debito
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Permite a carga de um valor especifico a um determinado cartão.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt;Este recurso deve ser utilizado somente pelo reseller e com fundo disponível na conta e ainda dependente de aprovação pelo agente financeiro&lt;/p&gt; 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartao">Objeto de requisição</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CartoesPostWithHttpInfo (SetNovoCartao cartao);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Obtém o número de identificação (Proxy) de um cartão
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Permite a verificação de disponibilidade de cartão e qual o número de identificação (Proxy) para posterior requisição.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt; Este recurso só poderá ser utilizado em produção mediante aprovação.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoCartao">Identifica qual o tipo do cartão, físico ou virtual.</param>
        /// <returns>Task of CartaoDisponivel</returns>
        System.Threading.Tasks.Task<CartaoDisponivel> CartoesGetAsync (string tipoCartao);

        /// <summary>
        /// Obtém o número de identificação (Proxy) de um cartão
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Permite a verificação de disponibilidade de cartão e qual o número de identificação (Proxy) para posterior requisição.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt; Este recurso só poderá ser utilizado em produção mediante aprovação.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoCartao">Identifica qual o tipo do cartão, físico ou virtual.</param>
        /// <returns>Task of ApiResponse (CartaoDisponivel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartaoDisponivel>> CartoesGetAsyncWithHttpInfo (string tipoCartao);
        /// <summary>
        /// Extrato do cartão
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Permite a consulta dos movimentos por período, de um determinado cartão. A janela máxima de observação é de 30 dias, e as datas inicial e final de observação pode ser configuradas, conforme necessidade.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <param name="dataInicial">Data inicial para a consulta.</param>
        /// <param name="dataFinal">Data final para a consulta.</param>
        /// <returns>Task of ExtratoResponse</returns>
        System.Threading.Tasks.Task<ExtratoResponse> CartoesIdCartaoExtratoGetAsync (string idCartao, string dataInicial, string dataFinal);

        /// <summary>
        /// Extrato do cartão
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Permite a consulta dos movimentos por período, de um determinado cartão. A janela máxima de observação é de 30 dias, e as datas inicial e final de observação pode ser configuradas, conforme necessidade.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <param name="dataInicial">Data inicial para a consulta.</param>
        /// <param name="dataFinal">Data final para a consulta.</param>
        /// <returns>Task of ApiResponse (ExtratoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtratoResponse>> CartoesIdCartaoExtratoGetAsyncWithHttpInfo (string idCartao, string dataInicial, string dataFinal);
        /// <summary>
        /// Informações do portador do cartão
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Permite a consulta de informações cadastrais de um determinado portador de cartão.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <returns>Task of PortadorResponse</returns>
        System.Threading.Tasks.Task<PortadorResponse> CartoesIdCartaoPortadorGetAsync (string idCartao);

        /// <summary>
        /// Informações do portador do cartão
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Permite a consulta de informações cadastrais de um determinado portador de cartão.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <returns>Task of ApiResponse (PortadorResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortadorResponse>> CartoesIdCartaoPortadorGetAsyncWithHttpInfo (string idCartao);
        /// <summary>
        /// Saldo do cartão
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Permite a consulta do saldo disponível de um determinado cartão.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <returns>Task of Saldo</returns>
        System.Threading.Tasks.Task<Saldo> CartoesIdCartaoSaldoGetAsync (string idCartao);

        /// <summary>
        /// Saldo do cartão
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Permite a consulta do saldo disponível de um determinado cartão.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <returns>Task of ApiResponse (Saldo)</returns>
        System.Threading.Tasks.Task<ApiResponse<Saldo>> CartoesIdCartaoSaldoGetAsyncWithHttpInfo (string idCartao);
        /// <summary>
        /// Credita ou debita valor da conta de um cartão.
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Permite creditar ou debitar um valor especifico em um determinado cartão.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt;Este recurso deve ser utilizado somente pelo reseller e quando o credito do cartão for de responsabilidade e propriedade do Reseller.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <param name="saldo">Objeto de requisição</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CartoesIdCartaoSaldoPutAsync (string idCartao, SetSaldo saldo);

        /// <summary>
        /// Credita ou debita valor da conta de um cartão.
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Permite creditar ou debitar um valor especifico em um determinado cartão.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt;Este recurso deve ser utilizado somente pelo reseller e quando o credito do cartão for de responsabilidade e propriedade do Reseller.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <param name="saldo">Objeto de requisição</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CartoesIdCartaoSaldoPutAsyncWithHttpInfo (string idCartao, SetSaldo saldo);
        /// <summary>
        /// Status do cartão
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Permite a consulta do status de um determinado cartão. O status do cartão nos permite saber se o cartão esta ativo, bloqueado , desbloqueado ou cancelado.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <returns>Task of StatusCartaoResponse</returns>
        System.Threading.Tasks.Task<StatusCartaoResponse> CartoesIdCartaoStatusGetAsync (string idCartao);

        /// <summary>
        /// Status do cartão
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Permite a consulta do status de um determinado cartão. O status do cartão nos permite saber se o cartão esta ativo, bloqueado , desbloqueado ou cancelado.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <returns>Task of ApiResponse (StatusCartaoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusCartaoResponse>> CartoesIdCartaoStatusGetAsyncWithHttpInfo (string idCartao);
        /// <summary>
        /// Altera status do cartão
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Permite o bloqueio e desbloqueio de um determinado cartão.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <param name="status">Objeto de requisição</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CartoesIdCartaoStatusPutAsync (string idCartao, SetCardStatus status);

        /// <summary>
        /// Altera status do cartão
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Permite o bloqueio e desbloqueio de um determinado cartão.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <param name="status">Objeto de requisição</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CartoesIdCartaoStatusPutAsyncWithHttpInfo (string idCartao, SetCardStatus status);
        /// <summary>
        /// Requisita um cartão de debito
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Permite a carga de um valor especifico a um determinado cartão.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt;Este recurso deve ser utilizado somente pelo reseller e com fundo disponível na conta e ainda dependente de aprovação pelo agente financeiro&lt;/p&gt; 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartao">Objeto de requisição</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CartoesPostAsync (SetNovoCartao cartao);

        /// <summary>
        /// Requisita um cartão de debito
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Permite a carga de um valor especifico a um determinado cartão.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt;Este recurso deve ser utilizado somente pelo reseller e com fundo disponível na conta e ainda dependente de aprovação pelo agente financeiro&lt;/p&gt; 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartao">Objeto de requisição</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CartoesPostAsyncWithHttpInfo (SetNovoCartao cartao);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CartoesApi : ICartoesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CartoesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CartoesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CartoesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CartoesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Obtém o número de identificação (Proxy) de um cartão &lt;p&gt;Permite a verificação de disponibilidade de cartão e qual o número de identificação (Proxy) para posterior requisição.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt; Este recurso só poderá ser utilizado em produção mediante aprovação.&lt;/p&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoCartao">Identifica qual o tipo do cartão, físico ou virtual.</param>
        /// <returns>CartaoDisponivel</returns>
        public CartaoDisponivel CartoesGet (string tipoCartao)
        {
             ApiResponse<CartaoDisponivel> localVarResponse = CartoesGetWithHttpInfo(tipoCartao);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Obtém o número de identificação (Proxy) de um cartão &lt;p&gt;Permite a verificação de disponibilidade de cartão e qual o número de identificação (Proxy) para posterior requisição.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt; Este recurso só poderá ser utilizado em produção mediante aprovação.&lt;/p&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoCartao">Identifica qual o tipo do cartão, físico ou virtual.</param>
        /// <returns>ApiResponse of CartaoDisponivel</returns>
        public ApiResponse< CartaoDisponivel > CartoesGetWithHttpInfo (string tipoCartao)
        {
            // verify the required parameter 'tipoCartao' is set
            if (tipoCartao == null)
                throw new ApiException(400, "Missing required parameter 'tipoCartao' when calling CartoesApi->CartoesGet");

            var localVarPath = "/cartoes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (tipoCartao != null) localVarQueryParams.Add("tipoCartao", Configuration.ApiClient.ParameterToString(tipoCartao)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarHeaderParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // authentication (key_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }

            // authentication (client_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client_id")))
            {
                localVarHeaderParams["client_id"] = Configuration.GetApiKeyWithPrefix("client_id");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CartoesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartaoDisponivel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartaoDisponivel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartaoDisponivel)));
            
        }

        /// <summary>
        /// Obtém o número de identificação (Proxy) de um cartão &lt;p&gt;Permite a verificação de disponibilidade de cartão e qual o número de identificação (Proxy) para posterior requisição.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt; Este recurso só poderá ser utilizado em produção mediante aprovação.&lt;/p&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoCartao">Identifica qual o tipo do cartão, físico ou virtual.</param>
        /// <returns>Task of CartaoDisponivel</returns>
        public async System.Threading.Tasks.Task<CartaoDisponivel> CartoesGetAsync (string tipoCartao)
        {
             ApiResponse<CartaoDisponivel> localVarResponse = await CartoesGetAsyncWithHttpInfo(tipoCartao);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Obtém o número de identificação (Proxy) de um cartão &lt;p&gt;Permite a verificação de disponibilidade de cartão e qual o número de identificação (Proxy) para posterior requisição.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt; Este recurso só poderá ser utilizado em produção mediante aprovação.&lt;/p&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tipoCartao">Identifica qual o tipo do cartão, físico ou virtual.</param>
        /// <returns>Task of ApiResponse (CartaoDisponivel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CartaoDisponivel>> CartoesGetAsyncWithHttpInfo (string tipoCartao)
        {
            // verify the required parameter 'tipoCartao' is set
            if (tipoCartao == null)
                throw new ApiException(400, "Missing required parameter 'tipoCartao' when calling CartoesApi->CartoesGet");

            var localVarPath = "/cartoes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (tipoCartao != null) localVarQueryParams.Add("tipoCartao", Configuration.ApiClient.ParameterToString(tipoCartao)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarHeaderParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }
            // authentication (key_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }
            // authentication (client_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client_id")))
            {
                localVarHeaderParams["client_id"] = Configuration.GetApiKeyWithPrefix("client_id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CartoesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartaoDisponivel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartaoDisponivel) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartaoDisponivel)));
            
        }

        /// <summary>
        /// Extrato do cartão &lt;p&gt;Permite a consulta dos movimentos por período, de um determinado cartão. A janela máxima de observação é de 30 dias, e as datas inicial e final de observação pode ser configuradas, conforme necessidade.&lt;/p&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <param name="dataInicial">Data inicial para a consulta.</param>
        /// <param name="dataFinal">Data final para a consulta.</param>
        /// <returns>ExtratoResponse</returns>
        public ExtratoResponse CartoesIdCartaoExtratoGet (string idCartao, string dataInicial, string dataFinal)
        {
             ApiResponse<ExtratoResponse> localVarResponse = CartoesIdCartaoExtratoGetWithHttpInfo(idCartao, dataInicial, dataFinal);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Extrato do cartão &lt;p&gt;Permite a consulta dos movimentos por período, de um determinado cartão. A janela máxima de observação é de 30 dias, e as datas inicial e final de observação pode ser configuradas, conforme necessidade.&lt;/p&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <param name="dataInicial">Data inicial para a consulta.</param>
        /// <param name="dataFinal">Data final para a consulta.</param>
        /// <returns>ApiResponse of ExtratoResponse</returns>
        public ApiResponse< ExtratoResponse > CartoesIdCartaoExtratoGetWithHttpInfo (string idCartao, string dataInicial, string dataFinal)
        {
            // verify the required parameter 'idCartao' is set
            if (idCartao == null)
                throw new ApiException(400, "Missing required parameter 'idCartao' when calling CartoesApi->CartoesIdCartaoExtratoGet");
            // verify the required parameter 'dataInicial' is set
            if (dataInicial == null)
                throw new ApiException(400, "Missing required parameter 'dataInicial' when calling CartoesApi->CartoesIdCartaoExtratoGet");
            // verify the required parameter 'dataFinal' is set
            if (dataFinal == null)
                throw new ApiException(400, "Missing required parameter 'dataFinal' when calling CartoesApi->CartoesIdCartaoExtratoGet");

            var localVarPath = "/cartoes/{idCartao}/extrato";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (idCartao != null) localVarPathParams.Add("idCartao", Configuration.ApiClient.ParameterToString(idCartao)); // path parameter
            if (dataInicial != null) localVarQueryParams.Add("dataInicial", Configuration.ApiClient.ParameterToString(dataInicial)); // query parameter
            if (dataFinal != null) localVarQueryParams.Add("dataFinal", Configuration.ApiClient.ParameterToString(dataFinal)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarHeaderParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // authentication (key_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }

            // authentication (client_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client_id")))
            {
                localVarHeaderParams["client_id"] = Configuration.GetApiKeyWithPrefix("client_id");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CartoesIdCartaoExtratoGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtratoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtratoResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtratoResponse)));
            
        }

        /// <summary>
        /// Extrato do cartão &lt;p&gt;Permite a consulta dos movimentos por período, de um determinado cartão. A janela máxima de observação é de 30 dias, e as datas inicial e final de observação pode ser configuradas, conforme necessidade.&lt;/p&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <param name="dataInicial">Data inicial para a consulta.</param>
        /// <param name="dataFinal">Data final para a consulta.</param>
        /// <returns>Task of ExtratoResponse</returns>
        public async System.Threading.Tasks.Task<ExtratoResponse> CartoesIdCartaoExtratoGetAsync (string idCartao, string dataInicial, string dataFinal)
        {
             ApiResponse<ExtratoResponse> localVarResponse = await CartoesIdCartaoExtratoGetAsyncWithHttpInfo(idCartao, dataInicial, dataFinal);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Extrato do cartão &lt;p&gt;Permite a consulta dos movimentos por período, de um determinado cartão. A janela máxima de observação é de 30 dias, e as datas inicial e final de observação pode ser configuradas, conforme necessidade.&lt;/p&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <param name="dataInicial">Data inicial para a consulta.</param>
        /// <param name="dataFinal">Data final para a consulta.</param>
        /// <returns>Task of ApiResponse (ExtratoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtratoResponse>> CartoesIdCartaoExtratoGetAsyncWithHttpInfo (string idCartao, string dataInicial, string dataFinal)
        {
            // verify the required parameter 'idCartao' is set
            if (idCartao == null)
                throw new ApiException(400, "Missing required parameter 'idCartao' when calling CartoesApi->CartoesIdCartaoExtratoGet");
            // verify the required parameter 'dataInicial' is set
            if (dataInicial == null)
                throw new ApiException(400, "Missing required parameter 'dataInicial' when calling CartoesApi->CartoesIdCartaoExtratoGet");
            // verify the required parameter 'dataFinal' is set
            if (dataFinal == null)
                throw new ApiException(400, "Missing required parameter 'dataFinal' when calling CartoesApi->CartoesIdCartaoExtratoGet");

            var localVarPath = "/cartoes/{idCartao}/extrato";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (idCartao != null) localVarPathParams.Add("idCartao", Configuration.ApiClient.ParameterToString(idCartao)); // path parameter
            if (dataInicial != null) localVarQueryParams.Add("dataInicial", Configuration.ApiClient.ParameterToString(dataInicial)); // query parameter
            if (dataFinal != null) localVarQueryParams.Add("dataFinal", Configuration.ApiClient.ParameterToString(dataFinal)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarHeaderParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }
            // authentication (key_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }
            // authentication (client_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client_id")))
            {
                localVarHeaderParams["client_id"] = Configuration.GetApiKeyWithPrefix("client_id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CartoesIdCartaoExtratoGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtratoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtratoResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtratoResponse)));
            
        }

        /// <summary>
        /// Informações do portador do cartão &lt;p&gt;Permite a consulta de informações cadastrais de um determinado portador de cartão.&lt;/p&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <returns>PortadorResponse</returns>
        public PortadorResponse CartoesIdCartaoPortadorGet (string idCartao)
        {
             ApiResponse<PortadorResponse> localVarResponse = CartoesIdCartaoPortadorGetWithHttpInfo(idCartao);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Informações do portador do cartão &lt;p&gt;Permite a consulta de informações cadastrais de um determinado portador de cartão.&lt;/p&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <returns>ApiResponse of PortadorResponse</returns>
        public ApiResponse< PortadorResponse > CartoesIdCartaoPortadorGetWithHttpInfo (string idCartao)
        {
            // verify the required parameter 'idCartao' is set
            if (idCartao == null)
                throw new ApiException(400, "Missing required parameter 'idCartao' when calling CartoesApi->CartoesIdCartaoPortadorGet");

            var localVarPath = "/cartoes/{idCartao}/portador";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (idCartao != null) localVarPathParams.Add("idCartao", Configuration.ApiClient.ParameterToString(idCartao)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarHeaderParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // authentication (key_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }

            // authentication (client_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client_id")))
            {
                localVarHeaderParams["client_id"] = Configuration.GetApiKeyWithPrefix("client_id");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CartoesIdCartaoPortadorGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortadorResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortadorResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortadorResponse)));
            
        }

        /// <summary>
        /// Informações do portador do cartão &lt;p&gt;Permite a consulta de informações cadastrais de um determinado portador de cartão.&lt;/p&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <returns>Task of PortadorResponse</returns>
        public async System.Threading.Tasks.Task<PortadorResponse> CartoesIdCartaoPortadorGetAsync (string idCartao)
        {
             ApiResponse<PortadorResponse> localVarResponse = await CartoesIdCartaoPortadorGetAsyncWithHttpInfo(idCartao);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Informações do portador do cartão &lt;p&gt;Permite a consulta de informações cadastrais de um determinado portador de cartão.&lt;/p&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <returns>Task of ApiResponse (PortadorResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortadorResponse>> CartoesIdCartaoPortadorGetAsyncWithHttpInfo (string idCartao)
        {
            // verify the required parameter 'idCartao' is set
            if (idCartao == null)
                throw new ApiException(400, "Missing required parameter 'idCartao' when calling CartoesApi->CartoesIdCartaoPortadorGet");

            var localVarPath = "/cartoes/{idCartao}/portador";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (idCartao != null) localVarPathParams.Add("idCartao", Configuration.ApiClient.ParameterToString(idCartao)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarHeaderParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }
            // authentication (key_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }
            // authentication (client_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client_id")))
            {
                localVarHeaderParams["client_id"] = Configuration.GetApiKeyWithPrefix("client_id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CartoesIdCartaoPortadorGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortadorResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortadorResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortadorResponse)));
            
        }

        /// <summary>
        /// Saldo do cartão &lt;p&gt;Permite a consulta do saldo disponível de um determinado cartão.&lt;/p&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <returns>Saldo</returns>
        public Saldo CartoesIdCartaoSaldoGet (string idCartao)
        {
             ApiResponse<Saldo> localVarResponse = CartoesIdCartaoSaldoGetWithHttpInfo(idCartao);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Saldo do cartão &lt;p&gt;Permite a consulta do saldo disponível de um determinado cartão.&lt;/p&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <returns>ApiResponse of Saldo</returns>
        public ApiResponse< Saldo > CartoesIdCartaoSaldoGetWithHttpInfo (string idCartao)
        {
            // verify the required parameter 'idCartao' is set
            if (idCartao == null)
                throw new ApiException(400, "Missing required parameter 'idCartao' when calling CartoesApi->CartoesIdCartaoSaldoGet");

            var localVarPath = "/cartoes/{idCartao}/saldo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (idCartao != null) localVarPathParams.Add("idCartao", Configuration.ApiClient.ParameterToString(idCartao)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarHeaderParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // authentication (key_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }

            // authentication (client_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client_id")))
            {
                localVarHeaderParams["client_id"] = Configuration.GetApiKeyWithPrefix("client_id");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CartoesIdCartaoSaldoGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Saldo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Saldo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Saldo)));
            
        }

        /// <summary>
        /// Saldo do cartão &lt;p&gt;Permite a consulta do saldo disponível de um determinado cartão.&lt;/p&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <returns>Task of Saldo</returns>
        public async System.Threading.Tasks.Task<Saldo> CartoesIdCartaoSaldoGetAsync (string idCartao)
        {
             ApiResponse<Saldo> localVarResponse = await CartoesIdCartaoSaldoGetAsyncWithHttpInfo(idCartao);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Saldo do cartão &lt;p&gt;Permite a consulta do saldo disponível de um determinado cartão.&lt;/p&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <returns>Task of ApiResponse (Saldo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Saldo>> CartoesIdCartaoSaldoGetAsyncWithHttpInfo (string idCartao)
        {
            // verify the required parameter 'idCartao' is set
            if (idCartao == null)
                throw new ApiException(400, "Missing required parameter 'idCartao' when calling CartoesApi->CartoesIdCartaoSaldoGet");

            var localVarPath = "/cartoes/{idCartao}/saldo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (idCartao != null) localVarPathParams.Add("idCartao", Configuration.ApiClient.ParameterToString(idCartao)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarHeaderParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }
            // authentication (key_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }
            // authentication (client_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client_id")))
            {
                localVarHeaderParams["client_id"] = Configuration.GetApiKeyWithPrefix("client_id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CartoesIdCartaoSaldoGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Saldo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Saldo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Saldo)));
            
        }

        /// <summary>
        /// Credita ou debita valor da conta de um cartão. &lt;p&gt;Permite creditar ou debitar um valor especifico em um determinado cartão.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt;Este recurso deve ser utilizado somente pelo reseller e quando o credito do cartão for de responsabilidade e propriedade do Reseller.&lt;/p&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <param name="saldo">Objeto de requisição</param>
        /// <returns></returns>
        public void CartoesIdCartaoSaldoPut (string idCartao, SetSaldo saldo)
        {
             CartoesIdCartaoSaldoPutWithHttpInfo(idCartao, saldo);
        }

        /// <summary>
        /// Credita ou debita valor da conta de um cartão. &lt;p&gt;Permite creditar ou debitar um valor especifico em um determinado cartão.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt;Este recurso deve ser utilizado somente pelo reseller e quando o credito do cartão for de responsabilidade e propriedade do Reseller.&lt;/p&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <param name="saldo">Objeto de requisição</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CartoesIdCartaoSaldoPutWithHttpInfo (string idCartao, SetSaldo saldo)
        {
            // verify the required parameter 'idCartao' is set
            if (idCartao == null)
                throw new ApiException(400, "Missing required parameter 'idCartao' when calling CartoesApi->CartoesIdCartaoSaldoPut");
            // verify the required parameter 'saldo' is set
            if (saldo == null)
                throw new ApiException(400, "Missing required parameter 'saldo' when calling CartoesApi->CartoesIdCartaoSaldoPut");

            var localVarPath = "/cartoes/{idCartao}/saldo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (idCartao != null) localVarPathParams.Add("idCartao", Configuration.ApiClient.ParameterToString(idCartao)); // path parameter
            if (saldo != null && saldo.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(saldo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = saldo; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarHeaderParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // authentication (key_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }

            // authentication (client_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client_id")))
            {
                localVarHeaderParams["client_id"] = Configuration.GetApiKeyWithPrefix("client_id");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CartoesIdCartaoSaldoPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Credita ou debita valor da conta de um cartão. &lt;p&gt;Permite creditar ou debitar um valor especifico em um determinado cartão.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt;Este recurso deve ser utilizado somente pelo reseller e quando o credito do cartão for de responsabilidade e propriedade do Reseller.&lt;/p&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <param name="saldo">Objeto de requisição</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CartoesIdCartaoSaldoPutAsync (string idCartao, SetSaldo saldo)
        {
             await CartoesIdCartaoSaldoPutAsyncWithHttpInfo(idCartao, saldo);

        }

        /// <summary>
        /// Credita ou debita valor da conta de um cartão. &lt;p&gt;Permite creditar ou debitar um valor especifico em um determinado cartão.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt;Este recurso deve ser utilizado somente pelo reseller e quando o credito do cartão for de responsabilidade e propriedade do Reseller.&lt;/p&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <param name="saldo">Objeto de requisição</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CartoesIdCartaoSaldoPutAsyncWithHttpInfo (string idCartao, SetSaldo saldo)
        {
            // verify the required parameter 'idCartao' is set
            if (idCartao == null)
                throw new ApiException(400, "Missing required parameter 'idCartao' when calling CartoesApi->CartoesIdCartaoSaldoPut");
            // verify the required parameter 'saldo' is set
            if (saldo == null)
                throw new ApiException(400, "Missing required parameter 'saldo' when calling CartoesApi->CartoesIdCartaoSaldoPut");

            var localVarPath = "/cartoes/{idCartao}/saldo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (idCartao != null) localVarPathParams.Add("idCartao", Configuration.ApiClient.ParameterToString(idCartao)); // path parameter
            if (saldo != null && saldo.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(saldo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = saldo; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarHeaderParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }
            // authentication (key_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }
            // authentication (client_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client_id")))
            {
                localVarHeaderParams["client_id"] = Configuration.GetApiKeyWithPrefix("client_id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CartoesIdCartaoSaldoPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Status do cartão &lt;p&gt;Permite a consulta do status de um determinado cartão. O status do cartão nos permite saber se o cartão esta ativo, bloqueado , desbloqueado ou cancelado.&lt;/p&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <returns>StatusCartaoResponse</returns>
        public StatusCartaoResponse CartoesIdCartaoStatusGet (string idCartao)
        {
             ApiResponse<StatusCartaoResponse> localVarResponse = CartoesIdCartaoStatusGetWithHttpInfo(idCartao);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Status do cartão &lt;p&gt;Permite a consulta do status de um determinado cartão. O status do cartão nos permite saber se o cartão esta ativo, bloqueado , desbloqueado ou cancelado.&lt;/p&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <returns>ApiResponse of StatusCartaoResponse</returns>
        public ApiResponse< StatusCartaoResponse > CartoesIdCartaoStatusGetWithHttpInfo (string idCartao)
        {
            // verify the required parameter 'idCartao' is set
            if (idCartao == null)
                throw new ApiException(400, "Missing required parameter 'idCartao' when calling CartoesApi->CartoesIdCartaoStatusGet");

            var localVarPath = "/cartoes/{idCartao}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (idCartao != null) localVarPathParams.Add("idCartao", Configuration.ApiClient.ParameterToString(idCartao)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarHeaderParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // authentication (key_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }

            // authentication (client_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client_id")))
            {
                localVarHeaderParams["client_id"] = Configuration.GetApiKeyWithPrefix("client_id");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CartoesIdCartaoStatusGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatusCartaoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StatusCartaoResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatusCartaoResponse)));
            
        }

        /// <summary>
        /// Status do cartão &lt;p&gt;Permite a consulta do status de um determinado cartão. O status do cartão nos permite saber se o cartão esta ativo, bloqueado , desbloqueado ou cancelado.&lt;/p&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <returns>Task of StatusCartaoResponse</returns>
        public async System.Threading.Tasks.Task<StatusCartaoResponse> CartoesIdCartaoStatusGetAsync (string idCartao)
        {
             ApiResponse<StatusCartaoResponse> localVarResponse = await CartoesIdCartaoStatusGetAsyncWithHttpInfo(idCartao);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Status do cartão &lt;p&gt;Permite a consulta do status de um determinado cartão. O status do cartão nos permite saber se o cartão esta ativo, bloqueado , desbloqueado ou cancelado.&lt;/p&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <returns>Task of ApiResponse (StatusCartaoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusCartaoResponse>> CartoesIdCartaoStatusGetAsyncWithHttpInfo (string idCartao)
        {
            // verify the required parameter 'idCartao' is set
            if (idCartao == null)
                throw new ApiException(400, "Missing required parameter 'idCartao' when calling CartoesApi->CartoesIdCartaoStatusGet");

            var localVarPath = "/cartoes/{idCartao}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (idCartao != null) localVarPathParams.Add("idCartao", Configuration.ApiClient.ParameterToString(idCartao)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarHeaderParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }
            // authentication (key_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }
            // authentication (client_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client_id")))
            {
                localVarHeaderParams["client_id"] = Configuration.GetApiKeyWithPrefix("client_id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CartoesIdCartaoStatusGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatusCartaoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StatusCartaoResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatusCartaoResponse)));
            
        }

        /// <summary>
        /// Altera status do cartão &lt;p&gt;Permite o bloqueio e desbloqueio de um determinado cartão.&lt;/p&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <param name="status">Objeto de requisição</param>
        /// <returns></returns>
        public void CartoesIdCartaoStatusPut (string idCartao, SetCardStatus status)
        {
             CartoesIdCartaoStatusPutWithHttpInfo(idCartao, status);
        }

        /// <summary>
        /// Altera status do cartão &lt;p&gt;Permite o bloqueio e desbloqueio de um determinado cartão.&lt;/p&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <param name="status">Objeto de requisição</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CartoesIdCartaoStatusPutWithHttpInfo (string idCartao, SetCardStatus status)
        {
            // verify the required parameter 'idCartao' is set
            if (idCartao == null)
                throw new ApiException(400, "Missing required parameter 'idCartao' when calling CartoesApi->CartoesIdCartaoStatusPut");
            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling CartoesApi->CartoesIdCartaoStatusPut");

            var localVarPath = "/cartoes/{idCartao}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (idCartao != null) localVarPathParams.Add("idCartao", Configuration.ApiClient.ParameterToString(idCartao)); // path parameter
            if (status != null && status.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(status); // http body (model) parameter
            }
            else
            {
                localVarPostBody = status; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarHeaderParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // authentication (key_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }

            // authentication (client_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client_id")))
            {
                localVarHeaderParams["client_id"] = Configuration.GetApiKeyWithPrefix("client_id");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CartoesIdCartaoStatusPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Altera status do cartão &lt;p&gt;Permite o bloqueio e desbloqueio de um determinado cartão.&lt;/p&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <param name="status">Objeto de requisição</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CartoesIdCartaoStatusPutAsync (string idCartao, SetCardStatus status)
        {
             await CartoesIdCartaoStatusPutAsyncWithHttpInfo(idCartao, status);

        }

        /// <summary>
        /// Altera status do cartão &lt;p&gt;Permite o bloqueio e desbloqueio de um determinado cartão.&lt;/p&gt;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCartao">Número identificador referente ao proxy localizado no verso do cartão.</param>
        /// <param name="status">Objeto de requisição</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CartoesIdCartaoStatusPutAsyncWithHttpInfo (string idCartao, SetCardStatus status)
        {
            // verify the required parameter 'idCartao' is set
            if (idCartao == null)
                throw new ApiException(400, "Missing required parameter 'idCartao' when calling CartoesApi->CartoesIdCartaoStatusPut");
            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling CartoesApi->CartoesIdCartaoStatusPut");

            var localVarPath = "/cartoes/{idCartao}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (idCartao != null) localVarPathParams.Add("idCartao", Configuration.ApiClient.ParameterToString(idCartao)); // path parameter
            if (status != null && status.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(status); // http body (model) parameter
            }
            else
            {
                localVarPostBody = status; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarHeaderParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }
            // authentication (key_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }
            // authentication (client_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client_id")))
            {
                localVarHeaderParams["client_id"] = Configuration.GetApiKeyWithPrefix("client_id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CartoesIdCartaoStatusPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Requisita um cartão de debito &lt;p&gt;Permite a carga de um valor especifico a um determinado cartão.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt;Este recurso deve ser utilizado somente pelo reseller e com fundo disponível na conta e ainda dependente de aprovação pelo agente financeiro&lt;/p&gt; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartao">Objeto de requisição</param>
        /// <returns></returns>
        public void CartoesPost (SetNovoCartao cartao)
        {
             CartoesPostWithHttpInfo(cartao);
        }

        /// <summary>
        /// Requisita um cartão de debito &lt;p&gt;Permite a carga de um valor especifico a um determinado cartão.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt;Este recurso deve ser utilizado somente pelo reseller e com fundo disponível na conta e ainda dependente de aprovação pelo agente financeiro&lt;/p&gt; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartao">Objeto de requisição</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CartoesPostWithHttpInfo (SetNovoCartao cartao)
        {
            // verify the required parameter 'cartao' is set
            if (cartao == null)
                throw new ApiException(400, "Missing required parameter 'cartao' when calling CartoesApi->CartoesPost");

            var localVarPath = "/cartoes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (cartao != null && cartao.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cartao); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cartao; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarHeaderParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // authentication (key_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }

            // authentication (client_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client_id")))
            {
                localVarHeaderParams["client_id"] = Configuration.GetApiKeyWithPrefix("client_id");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CartoesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Requisita um cartão de debito &lt;p&gt;Permite a carga de um valor especifico a um determinado cartão.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt;Este recurso deve ser utilizado somente pelo reseller e com fundo disponível na conta e ainda dependente de aprovação pelo agente financeiro&lt;/p&gt; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartao">Objeto de requisição</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CartoesPostAsync (SetNovoCartao cartao)
        {
             await CartoesPostAsyncWithHttpInfo(cartao);

        }

        /// <summary>
        /// Requisita um cartão de debito &lt;p&gt;Permite a carga de um valor especifico a um determinado cartão.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt;Este recurso deve ser utilizado somente pelo reseller e com fundo disponível na conta e ainda dependente de aprovação pelo agente financeiro&lt;/p&gt; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cartao">Objeto de requisição</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CartoesPostAsyncWithHttpInfo (SetNovoCartao cartao)
        {
            // verify the required parameter 'cartao' is set
            if (cartao == null)
                throw new ApiException(400, "Missing required parameter 'cartao' when calling CartoesApi->CartoesPost");

            var localVarPath = "/cartoes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (cartao != null && cartao.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cartao); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cartao; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarHeaderParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }
            // authentication (key_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }
            // authentication (client_id) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("client_id")))
            {
                localVarHeaderParams["client_id"] = Configuration.GetApiKeyWithPrefix("client_id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CartoesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
