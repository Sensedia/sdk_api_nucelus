/*
 * API Agillitas Cartões Pré-pagos
 * API para manipular recursos relacionadas à cartões pré-pagos Agillitas.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.CartaoDisponivel;
import io.swagger.client.model.ExtratoResponse;
import io.swagger.client.model.MsgErro;
import io.swagger.client.model.PortadorResponse;
import io.swagger.client.model.Saldo;
import io.swagger.client.model.SetCardStatus;
import io.swagger.client.model.SetNovoCartao;
import io.swagger.client.model.SetSaldo;
import io.swagger.client.model.StatusCartaoResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CartoesApi
 */
@Ignore
public class CartoesApiTest {

    private final CartoesApi api = new CartoesApi();

    
    /**
     * Obtém o número de identificação (Proxy) de um cartão
     *
     * &lt;p&gt;Permite a verificação de disponibilidade de cartão e qual o número de identificação (Proxy) para posterior requisição.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt; Este recurso só poderá ser utilizado em produção mediante aprovação.&lt;/p&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cartoesGetTest() throws ApiException {
        String tipoCartao = null;
        CartaoDisponivel response = api.cartoesGet(tipoCartao);

        // TODO: test validations
    }
    
    /**
     * Extrato do cartão
     *
     * &lt;p&gt;Permite a consulta dos movimentos por período, de um determinado cartão. A janela máxima de observação é de 30 dias, e as datas inicial e final de observação pode ser configuradas, conforme necessidade.&lt;/p&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cartoesIdCartaoExtratoGetTest() throws ApiException {
        String idCartao = null;
        String dataInicial = null;
        String dataFinal = null;
        ExtratoResponse response = api.cartoesIdCartaoExtratoGet(idCartao, dataInicial, dataFinal);

        // TODO: test validations
    }
    
    /**
     * Informações do portador do cartão
     *
     * &lt;p&gt;Permite a consulta de informações cadastrais de um determinado portador de cartão.&lt;/p&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cartoesIdCartaoPortadorGetTest() throws ApiException {
        String idCartao = null;
        PortadorResponse response = api.cartoesIdCartaoPortadorGet(idCartao);

        // TODO: test validations
    }
    
    /**
     * Saldo do cartão
     *
     * &lt;p&gt;Permite a consulta do saldo disponível de um determinado cartão.&lt;/p&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cartoesIdCartaoSaldoGetTest() throws ApiException {
        String idCartao = null;
        Saldo response = api.cartoesIdCartaoSaldoGet(idCartao);

        // TODO: test validations
    }
    
    /**
     * Credita ou debita valor da conta de um cartão.
     *
     * &lt;p&gt;Permite creditar ou debitar um valor especifico em um determinado cartão.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt;Este recurso deve ser utilizado somente pelo reseller e quando o credito do cartão for de responsabilidade e propriedade do Reseller.&lt;/p&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cartoesIdCartaoSaldoPutTest() throws ApiException {
        String idCartao = null;
        SetSaldo saldo = null;
        api.cartoesIdCartaoSaldoPut(idCartao, saldo);

        // TODO: test validations
    }
    
    /**
     * Status do cartão
     *
     * &lt;p&gt;Permite a consulta do status de um determinado cartão. O status do cartão nos permite saber se o cartão esta ativo, bloqueado , desbloqueado ou cancelado.&lt;/p&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cartoesIdCartaoStatusGetTest() throws ApiException {
        String idCartao = null;
        StatusCartaoResponse response = api.cartoesIdCartaoStatusGet(idCartao);

        // TODO: test validations
    }
    
    /**
     * Altera status do cartão
     *
     * &lt;p&gt;Permite o bloqueio e desbloqueio de um determinado cartão.&lt;/p&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cartoesIdCartaoStatusPutTest() throws ApiException {
        String idCartao = null;
        SetCardStatus status = null;
        api.cartoesIdCartaoStatusPut(idCartao, status);

        // TODO: test validations
    }
    
    /**
     * Requisita um cartão de debito
     *
     * &lt;p&gt;Permite a carga de um valor especifico a um determinado cartão.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt;Este recurso deve ser utilizado somente pelo reseller e com fundo disponível na conta e ainda dependente de aprovação pelo agente financeiro&lt;/p&gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cartoesPostTest() throws ApiException {
        SetNovoCartao cartao = null;
        api.cartoesPost(cartao);

        // TODO: test validations
    }
    
}
