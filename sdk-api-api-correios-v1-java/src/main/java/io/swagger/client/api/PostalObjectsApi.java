/*
 * API dos Correios
 * Postal Object tracking API
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.InlineResponse2002;
import io.swagger.client.model.InlineResponse2003;
import io.swagger.client.model.InlineResponse400;
import io.swagger.client.model.ObjectsEventos;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PostalObjectsApi {
    private ApiClient apiClient;

    public PostalObjectsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PostalObjectsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for eventsEventTypeGet */
    private com.squareup.okhttp.Call eventsEventTypeGetCall(String clientId, String accessToken, String eventType, String eventStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/events/{eventType}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "eventType" + "\\}", apiClient.escapeString(eventType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (eventStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "eventStatus", eventStatus));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access_token", apiClient.parameterToString(accessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventsEventTypeGetValidateBeforeCall(String clientId, String accessToken, String eventType, String eventStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling eventsEventTypeGet(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling eventsEventTypeGet(Async)");
        }
        
        // verify the required parameter 'eventType' is set
        if (eventType == null) {
            throw new ApiException("Missing the required parameter 'eventType' when calling eventsEventTypeGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = eventsEventTypeGetCall(clientId, accessToken, eventType, eventStatus, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Returns the list of possible event status for a given postal events.
     * @param clientId Customer identifier used for authentication. (required)
     * @param accessToken Access token used in the authentication. (required)
     * @param eventType Event type to be searched. (required)
     * @param eventStatus Filter the search by a certain event status. (optional)
     * @return List&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InlineResponse2002> eventsEventTypeGet(String clientId, String accessToken, String eventType, String eventStatus) throws ApiException {
        ApiResponse<List<InlineResponse2002>> resp = eventsEventTypeGetWithHttpInfo(clientId, accessToken, eventType, eventStatus);
        return resp.getData();
    }

    /**
     * 
     * Returns the list of possible event status for a given postal events.
     * @param clientId Customer identifier used for authentication. (required)
     * @param accessToken Access token used in the authentication. (required)
     * @param eventType Event type to be searched. (required)
     * @param eventStatus Filter the search by a certain event status. (optional)
     * @return ApiResponse&lt;List&lt;InlineResponse2002&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InlineResponse2002>> eventsEventTypeGetWithHttpInfo(String clientId, String accessToken, String eventType, String eventStatus) throws ApiException {
        com.squareup.okhttp.Call call = eventsEventTypeGetValidateBeforeCall(clientId, accessToken, eventType, eventStatus, null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse2002>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the list of possible event status for a given postal events.
     * @param clientId Customer identifier used for authentication. (required)
     * @param accessToken Access token used in the authentication. (required)
     * @param eventType Event type to be searched. (required)
     * @param eventStatus Filter the search by a certain event status. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventsEventTypeGetAsync(String clientId, String accessToken, String eventType, String eventStatus, final ApiCallback<List<InlineResponse2002>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventsEventTypeGetValidateBeforeCall(clientId, accessToken, eventType, eventStatus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse2002>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for objectsGet */
    private com.squareup.okhttp.Call objectsGetCall(String clientId, String accessToken, String objectCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/objects".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (objectCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "objectCode", objectCode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access_token", apiClient.parameterToString(accessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call objectsGetValidateBeforeCall(String clientId, String accessToken, String objectCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling objectsGet(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling objectsGet(Async)");
        }
        
        // verify the required parameter 'objectCode' is set
        if (objectCode == null) {
            throw new ApiException("Missing the required parameter 'objectCode' when calling objectsGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = objectsGetCall(clientId, accessToken, objectCode, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Searches for the events related to a list of postal objects.
     * @param clientId Customer identifier used for authentication. (required)
     * @param accessToken Access token used in the authentication. (required)
     * @param objectCode List of comma separated codes to be consulted. (required)
     * @return List&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InlineResponse2003> objectsGet(String clientId, String accessToken, String objectCode) throws ApiException {
        ApiResponse<List<InlineResponse2003>> resp = objectsGetWithHttpInfo(clientId, accessToken, objectCode);
        return resp.getData();
    }

    /**
     * 
     * Searches for the events related to a list of postal objects.
     * @param clientId Customer identifier used for authentication. (required)
     * @param accessToken Access token used in the authentication. (required)
     * @param objectCode List of comma separated codes to be consulted. (required)
     * @return ApiResponse&lt;List&lt;InlineResponse2003&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InlineResponse2003>> objectsGetWithHttpInfo(String clientId, String accessToken, String objectCode) throws ApiException {
        com.squareup.okhttp.Call call = objectsGetValidateBeforeCall(clientId, accessToken, objectCode, null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse2003>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Searches for the events related to a list of postal objects.
     * @param clientId Customer identifier used for authentication. (required)
     * @param accessToken Access token used in the authentication. (required)
     * @param objectCode List of comma separated codes to be consulted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call objectsGetAsync(String clientId, String accessToken, String objectCode, final ApiCallback<List<InlineResponse2003>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = objectsGetValidateBeforeCall(clientId, accessToken, objectCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse2003>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for objectsObjectCodeGet */
    private com.squareup.okhttp.Call objectsObjectCodeGetCall(String clientId, String accessToken, String objectCode, String eventType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/objects/{objectCode}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "objectCode" + "\\}", apiClient.escapeString(objectCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (eventType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "eventType", eventType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access_token", apiClient.parameterToString(accessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call objectsObjectCodeGetValidateBeforeCall(String clientId, String accessToken, String objectCode, String eventType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling objectsObjectCodeGet(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling objectsObjectCodeGet(Async)");
        }
        
        // verify the required parameter 'objectCode' is set
        if (objectCode == null) {
            throw new ApiException("Missing the required parameter 'objectCode' when calling objectsObjectCodeGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = objectsObjectCodeGetCall(clientId, accessToken, objectCode, eventType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Searches for the informations related to a specific postal object.
     * @param clientId Customer identifier used for authentication. (required)
     * @param accessToken Access token used in the authentication. (required)
     * @param objectCode Code of the object to be consulted. (required)
     * @param eventType Event type to be filtered. (optional)
     * @return List&lt;ObjectsEventos&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ObjectsEventos> objectsObjectCodeGet(String clientId, String accessToken, String objectCode, String eventType) throws ApiException {
        ApiResponse<List<ObjectsEventos>> resp = objectsObjectCodeGetWithHttpInfo(clientId, accessToken, objectCode, eventType);
        return resp.getData();
    }

    /**
     * 
     * Searches for the informations related to a specific postal object.
     * @param clientId Customer identifier used for authentication. (required)
     * @param accessToken Access token used in the authentication. (required)
     * @param objectCode Code of the object to be consulted. (required)
     * @param eventType Event type to be filtered. (optional)
     * @return ApiResponse&lt;List&lt;ObjectsEventos&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ObjectsEventos>> objectsObjectCodeGetWithHttpInfo(String clientId, String accessToken, String objectCode, String eventType) throws ApiException {
        com.squareup.okhttp.Call call = objectsObjectCodeGetValidateBeforeCall(clientId, accessToken, objectCode, eventType, null, null);
        Type localVarReturnType = new TypeToken<List<ObjectsEventos>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Searches for the informations related to a specific postal object.
     * @param clientId Customer identifier used for authentication. (required)
     * @param accessToken Access token used in the authentication. (required)
     * @param objectCode Code of the object to be consulted. (required)
     * @param eventType Event type to be filtered. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call objectsObjectCodeGetAsync(String clientId, String accessToken, String objectCode, String eventType, final ApiCallback<List<ObjectsEventos>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = objectsObjectCodeGetValidateBeforeCall(clientId, accessToken, objectCode, eventType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ObjectsEventos>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
