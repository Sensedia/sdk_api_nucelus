<?php
/**
 * Events
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API dos Correios
 *
 * Postal Object tracking API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Events Class Doc Comment
 *
 * @category    Class
 * @description Customer Model
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Events implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Events';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'object_code' => 'string',
        'event_type' => 'string',
        'event_status' => 'int',
        'event_description' => 'string',
        'unit_name' => 'string',
        'sro_code' => 'string',
        'county' => 'string',
        'state' => 'string',
        'mcu_code' => 'string',
        'dr_code' => 'string',
        'dr_abbreviation' => 'string',
        'list_number' => 'string',
        'station' => 'int',
        'user' => 'string',
        'recording_date' => 'string',
        'deliveryman' => 'string',
        'creation_date' => 'string',
        'block_action' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'object_code' => 'objectCode',
        'event_type' => 'eventType',
        'event_status' => 'eventStatus',
        'event_description' => 'eventDescription',
        'unit_name' => 'unitName',
        'sro_code' => 'SROCode',
        'county' => 'county',
        'state' => 'state',
        'mcu_code' => 'MCUCode',
        'dr_code' => 'DRCode',
        'dr_abbreviation' => 'DRAbbreviation',
        'list_number' => 'listNumber',
        'station' => 'station',
        'user' => 'user',
        'recording_date' => 'recordingDate',
        'deliveryman' => 'deliveryman',
        'creation_date' => 'creationDate',
        'block_action' => 'blockAction'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'object_code' => 'setObjectCode',
        'event_type' => 'setEventType',
        'event_status' => 'setEventStatus',
        'event_description' => 'setEventDescription',
        'unit_name' => 'setUnitName',
        'sro_code' => 'setSroCode',
        'county' => 'setCounty',
        'state' => 'setState',
        'mcu_code' => 'setMcuCode',
        'dr_code' => 'setDrCode',
        'dr_abbreviation' => 'setDrAbbreviation',
        'list_number' => 'setListNumber',
        'station' => 'setStation',
        'user' => 'setUser',
        'recording_date' => 'setRecordingDate',
        'deliveryman' => 'setDeliveryman',
        'creation_date' => 'setCreationDate',
        'block_action' => 'setBlockAction'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'object_code' => 'getObjectCode',
        'event_type' => 'getEventType',
        'event_status' => 'getEventStatus',
        'event_description' => 'getEventDescription',
        'unit_name' => 'getUnitName',
        'sro_code' => 'getSroCode',
        'county' => 'getCounty',
        'state' => 'getState',
        'mcu_code' => 'getMcuCode',
        'dr_code' => 'getDrCode',
        'dr_abbreviation' => 'getDrAbbreviation',
        'list_number' => 'getListNumber',
        'station' => 'getStation',
        'user' => 'getUser',
        'recording_date' => 'getRecordingDate',
        'deliveryman' => 'getDeliveryman',
        'creation_date' => 'getCreationDate',
        'block_action' => 'getBlockAction'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['object_code'] = isset($data['object_code']) ? $data['object_code'] : null;
        $this->container['event_type'] = isset($data['event_type']) ? $data['event_type'] : null;
        $this->container['event_status'] = isset($data['event_status']) ? $data['event_status'] : null;
        $this->container['event_description'] = isset($data['event_description']) ? $data['event_description'] : null;
        $this->container['unit_name'] = isset($data['unit_name']) ? $data['unit_name'] : null;
        $this->container['sro_code'] = isset($data['sro_code']) ? $data['sro_code'] : null;
        $this->container['county'] = isset($data['county']) ? $data['county'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['mcu_code'] = isset($data['mcu_code']) ? $data['mcu_code'] : null;
        $this->container['dr_code'] = isset($data['dr_code']) ? $data['dr_code'] : null;
        $this->container['dr_abbreviation'] = isset($data['dr_abbreviation']) ? $data['dr_abbreviation'] : null;
        $this->container['list_number'] = isset($data['list_number']) ? $data['list_number'] : null;
        $this->container['station'] = isset($data['station']) ? $data['station'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['recording_date'] = isset($data['recording_date']) ? $data['recording_date'] : null;
        $this->container['deliveryman'] = isset($data['deliveryman']) ? $data['deliveryman'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['block_action'] = isset($data['block_action']) ? $data['block_action'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets object_code
     * @return string
     */
    public function getObjectCode()
    {
        return $this->container['object_code'];
    }

    /**
     * Sets object_code
     * @param string $object_code 
     * @return $this
     */
    public function setObjectCode($object_code)
    {
        $this->container['object_code'] = $object_code;

        return $this;
    }

    /**
     * Gets event_type
     * @return string
     */
    public function getEventType()
    {
        return $this->container['event_type'];
    }

    /**
     * Sets event_type
     * @param string $event_type 
     * @return $this
     */
    public function setEventType($event_type)
    {
        $this->container['event_type'] = $event_type;

        return $this;
    }

    /**
     * Gets event_status
     * @return int
     */
    public function getEventStatus()
    {
        return $this->container['event_status'];
    }

    /**
     * Sets event_status
     * @param int $event_status 
     * @return $this
     */
    public function setEventStatus($event_status)
    {
        $this->container['event_status'] = $event_status;

        return $this;
    }

    /**
     * Gets event_description
     * @return string
     */
    public function getEventDescription()
    {
        return $this->container['event_description'];
    }

    /**
     * Sets event_description
     * @param string $event_description 
     * @return $this
     */
    public function setEventDescription($event_description)
    {
        $this->container['event_description'] = $event_description;

        return $this;
    }

    /**
     * Gets unit_name
     * @return string
     */
    public function getUnitName()
    {
        return $this->container['unit_name'];
    }

    /**
     * Sets unit_name
     * @param string $unit_name 
     * @return $this
     */
    public function setUnitName($unit_name)
    {
        $this->container['unit_name'] = $unit_name;

        return $this;
    }

    /**
     * Gets sro_code
     * @return string
     */
    public function getSroCode()
    {
        return $this->container['sro_code'];
    }

    /**
     * Sets sro_code
     * @param string $sro_code 
     * @return $this
     */
    public function setSroCode($sro_code)
    {
        $this->container['sro_code'] = $sro_code;

        return $this;
    }

    /**
     * Gets county
     * @return string
     */
    public function getCounty()
    {
        return $this->container['county'];
    }

    /**
     * Sets county
     * @param string $county 
     * @return $this
     */
    public function setCounty($county)
    {
        $this->container['county'] = $county;

        return $this;
    }

    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param string $state 
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets mcu_code
     * @return string
     */
    public function getMcuCode()
    {
        return $this->container['mcu_code'];
    }

    /**
     * Sets mcu_code
     * @param string $mcu_code 
     * @return $this
     */
    public function setMcuCode($mcu_code)
    {
        $this->container['mcu_code'] = $mcu_code;

        return $this;
    }

    /**
     * Gets dr_code
     * @return string
     */
    public function getDrCode()
    {
        return $this->container['dr_code'];
    }

    /**
     * Sets dr_code
     * @param string $dr_code 
     * @return $this
     */
    public function setDrCode($dr_code)
    {
        $this->container['dr_code'] = $dr_code;

        return $this;
    }

    /**
     * Gets dr_abbreviation
     * @return string
     */
    public function getDrAbbreviation()
    {
        return $this->container['dr_abbreviation'];
    }

    /**
     * Sets dr_abbreviation
     * @param string $dr_abbreviation 
     * @return $this
     */
    public function setDrAbbreviation($dr_abbreviation)
    {
        $this->container['dr_abbreviation'] = $dr_abbreviation;

        return $this;
    }

    /**
     * Gets list_number
     * @return string
     */
    public function getListNumber()
    {
        return $this->container['list_number'];
    }

    /**
     * Sets list_number
     * @param string $list_number 
     * @return $this
     */
    public function setListNumber($list_number)
    {
        $this->container['list_number'] = $list_number;

        return $this;
    }

    /**
     * Gets station
     * @return int
     */
    public function getStation()
    {
        return $this->container['station'];
    }

    /**
     * Sets station
     * @param int $station 
     * @return $this
     */
    public function setStation($station)
    {
        $this->container['station'] = $station;

        return $this;
    }

    /**
     * Gets user
     * @return string
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     * @param string $user 
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets recording_date
     * @return string
     */
    public function getRecordingDate()
    {
        return $this->container['recording_date'];
    }

    /**
     * Sets recording_date
     * @param string $recording_date 
     * @return $this
     */
    public function setRecordingDate($recording_date)
    {
        $this->container['recording_date'] = $recording_date;

        return $this;
    }

    /**
     * Gets deliveryman
     * @return string
     */
    public function getDeliveryman()
    {
        return $this->container['deliveryman'];
    }

    /**
     * Sets deliveryman
     * @param string $deliveryman 
     * @return $this
     */
    public function setDeliveryman($deliveryman)
    {
        $this->container['deliveryman'] = $deliveryman;

        return $this;
    }

    /**
     * Gets creation_date
     * @return string
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     * @param string $creation_date 
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets block_action
     * @return int
     */
    public function getBlockAction()
    {
        return $this->container['block_action'];
    }

    /**
     * Sets block_action
     * @param int $block_action 
     * @return $this
     */
    public function setBlockAction($block_action)
    {
        $this->container['block_action'] = $block_action;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


