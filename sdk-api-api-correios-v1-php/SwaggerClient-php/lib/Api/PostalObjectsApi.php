<?php
/**
 * PostalObjectsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API dos Correios
 *
 * Postal Object tracking API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * PostalObjectsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PostalObjectsApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return PostalObjectsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation eventsEventTypeGet
     *
     * 
     *
     * @param string $client_id Customer identifier used for authentication. (required)
     * @param string $access_token Access token used in the authentication. (required)
     * @param string $event_type Event type to be searched. (required)
     * @param string $event_status Filter the search by a certain event status. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2002[]
     */
    public function eventsEventTypeGet($client_id, $access_token, $event_type, $event_status = null)
    {
        list($response) = $this->eventsEventTypeGetWithHttpInfo($client_id, $access_token, $event_type, $event_status);
        return $response;
    }

    /**
     * Operation eventsEventTypeGetWithHttpInfo
     *
     * 
     *
     * @param string $client_id Customer identifier used for authentication. (required)
     * @param string $access_token Access token used in the authentication. (required)
     * @param string $event_type Event type to be searched. (required)
     * @param string $event_status Filter the search by a certain event status. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2002[], HTTP status code, HTTP response headers (array of strings)
     */
    public function eventsEventTypeGetWithHttpInfo($client_id, $access_token, $event_type, $event_status = null)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_id when calling eventsEventTypeGet');
        }
        // verify the required parameter 'access_token' is set
        if ($access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $access_token when calling eventsEventTypeGet');
        }
        // verify the required parameter 'event_type' is set
        if ($event_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $event_type when calling eventsEventTypeGet');
        }
        // parse inputs
        $resourcePath = "/events/{eventType}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($event_status !== null) {
            $queryParams['eventStatus'] = $this->apiClient->getSerializer()->toQueryValue($event_status);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = $this->apiClient->getSerializer()->toHeaderValue($client_id);
        }
        // header params
        if ($access_token !== null) {
            $headerParams['access_token'] = $this->apiClient->getSerializer()->toHeaderValue($access_token);
        }
        // path params
        if ($event_type !== null) {
            $resourcePath = str_replace(
                "{" . "eventType" . "}",
                $this->apiClient->getSerializer()->toPathValue($event_type),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2002[]',
                '/events/{eventType}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2002[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2002[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation objectsGet
     *
     * 
     *
     * @param string $client_id Customer identifier used for authentication. (required)
     * @param string $access_token Access token used in the authentication. (required)
     * @param string $object_code List of comma separated codes to be consulted. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2003[]
     */
    public function objectsGet($client_id, $access_token, $object_code)
    {
        list($response) = $this->objectsGetWithHttpInfo($client_id, $access_token, $object_code);
        return $response;
    }

    /**
     * Operation objectsGetWithHttpInfo
     *
     * 
     *
     * @param string $client_id Customer identifier used for authentication. (required)
     * @param string $access_token Access token used in the authentication. (required)
     * @param string $object_code List of comma separated codes to be consulted. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2003[], HTTP status code, HTTP response headers (array of strings)
     */
    public function objectsGetWithHttpInfo($client_id, $access_token, $object_code)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_id when calling objectsGet');
        }
        // verify the required parameter 'access_token' is set
        if ($access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $access_token when calling objectsGet');
        }
        // verify the required parameter 'object_code' is set
        if ($object_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $object_code when calling objectsGet');
        }
        // parse inputs
        $resourcePath = "/objects";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($object_code !== null) {
            $queryParams['objectCode'] = $this->apiClient->getSerializer()->toQueryValue($object_code);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = $this->apiClient->getSerializer()->toHeaderValue($client_id);
        }
        // header params
        if ($access_token !== null) {
            $headerParams['access_token'] = $this->apiClient->getSerializer()->toHeaderValue($access_token);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2003[]',
                '/objects'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2003[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2003[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation objectsObjectCodeGet
     *
     * 
     *
     * @param string $client_id Customer identifier used for authentication. (required)
     * @param string $access_token Access token used in the authentication. (required)
     * @param string $object_code Code of the object to be consulted. (required)
     * @param string $event_type Event type to be filtered. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ObjectsEventos[]
     */
    public function objectsObjectCodeGet($client_id, $access_token, $object_code, $event_type = null)
    {
        list($response) = $this->objectsObjectCodeGetWithHttpInfo($client_id, $access_token, $object_code, $event_type);
        return $response;
    }

    /**
     * Operation objectsObjectCodeGetWithHttpInfo
     *
     * 
     *
     * @param string $client_id Customer identifier used for authentication. (required)
     * @param string $access_token Access token used in the authentication. (required)
     * @param string $object_code Code of the object to be consulted. (required)
     * @param string $event_type Event type to be filtered. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ObjectsEventos[], HTTP status code, HTTP response headers (array of strings)
     */
    public function objectsObjectCodeGetWithHttpInfo($client_id, $access_token, $object_code, $event_type = null)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_id when calling objectsObjectCodeGet');
        }
        // verify the required parameter 'access_token' is set
        if ($access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $access_token when calling objectsObjectCodeGet');
        }
        // verify the required parameter 'object_code' is set
        if ($object_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $object_code when calling objectsObjectCodeGet');
        }
        // parse inputs
        $resourcePath = "/objects/{objectCode}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($event_type !== null) {
            $queryParams['eventType'] = $this->apiClient->getSerializer()->toQueryValue($event_type);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = $this->apiClient->getSerializer()->toHeaderValue($client_id);
        }
        // header params
        if ($access_token !== null) {
            $headerParams['access_token'] = $this->apiClient->getSerializer()->toHeaderValue($access_token);
        }
        // path params
        if ($object_code !== null) {
            $resourcePath = str_replace(
                "{" . "objectCode" . "}",
                $this->apiClient->getSerializer()->toPathValue($object_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ObjectsEventos[]',
                '/objects/{objectCode}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ObjectsEventos[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ObjectsEventos[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
