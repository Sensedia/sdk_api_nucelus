<?php
/**
 * EventsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API do Futebolcard
 *
 * Futebolcard manipulation API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * EventsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EventsApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return EventsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation eventsEventIdGet
     *
     * 
     *
     * @param string $client_id Customer identifier used for authentication. (required)
     * @param string $access_token Access token used in the authentication. (required)
     * @param string $event_id Event to search. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse200
     */
    public function eventsEventIdGet($client_id, $access_token, $event_id)
    {
        list($response) = $this->eventsEventIdGetWithHttpInfo($client_id, $access_token, $event_id);
        return $response;
    }

    /**
     * Operation eventsEventIdGetWithHttpInfo
     *
     * 
     *
     * @param string $client_id Customer identifier used for authentication. (required)
     * @param string $access_token Access token used in the authentication. (required)
     * @param string $event_id Event to search. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function eventsEventIdGetWithHttpInfo($client_id, $access_token, $event_id)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_id when calling eventsEventIdGet');
        }
        // verify the required parameter 'access_token' is set
        if ($access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $access_token when calling eventsEventIdGet');
        }
        // verify the required parameter 'event_id' is set
        if ($event_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $event_id when calling eventsEventIdGet');
        }
        // parse inputs
        $resourcePath = "/events/{eventId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = $this->apiClient->getSerializer()->toHeaderValue($client_id);
        }
        // header params
        if ($access_token !== null) {
            $headerParams['access_token'] = $this->apiClient->getSerializer()->toHeaderValue($access_token);
        }
        // path params
        if ($event_id !== null) {
            $resourcePath = str_replace(
                "{" . "eventId" . "}",
                $this->apiClient->getSerializer()->toPathValue($event_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200',
                '/events/{eventId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation eventsEventIdSectorsGet
     *
     * 
     *
     * @param string $client_id Customer identifier used for authentication. (required)
     * @param string $access_token Access token used in the authentication. (required)
     * @param string $event_id Event to search. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2001
     */
    public function eventsEventIdSectorsGet($client_id, $access_token, $event_id)
    {
        list($response) = $this->eventsEventIdSectorsGetWithHttpInfo($client_id, $access_token, $event_id);
        return $response;
    }

    /**
     * Operation eventsEventIdSectorsGetWithHttpInfo
     *
     * 
     *
     * @param string $client_id Customer identifier used for authentication. (required)
     * @param string $access_token Access token used in the authentication. (required)
     * @param string $event_id Event to search. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function eventsEventIdSectorsGetWithHttpInfo($client_id, $access_token, $event_id)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_id when calling eventsEventIdSectorsGet');
        }
        // verify the required parameter 'access_token' is set
        if ($access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $access_token when calling eventsEventIdSectorsGet');
        }
        // verify the required parameter 'event_id' is set
        if ($event_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $event_id when calling eventsEventIdSectorsGet');
        }
        // parse inputs
        $resourcePath = "/events/{eventId}/sectors";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = $this->apiClient->getSerializer()->toHeaderValue($client_id);
        }
        // header params
        if ($access_token !== null) {
            $headerParams['access_token'] = $this->apiClient->getSerializer()->toHeaderValue($access_token);
        }
        // path params
        if ($event_id !== null) {
            $resourcePath = str_replace(
                "{" . "eventId" . "}",
                $this->apiClient->getSerializer()->toPathValue($event_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2001',
                '/events/{eventId}/sectors'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation eventsEventIdSectorsSectorIdGet
     *
     * 
     *
     * @param string $client_id Customer identifier used for authentication. (required)
     * @param string $access_token Access token used in the authentication. (required)
     * @param string $event_id Event to search. (required)
     * @param string $sector_id Sector to search. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2002
     */
    public function eventsEventIdSectorsSectorIdGet($client_id, $access_token, $event_id, $sector_id)
    {
        list($response) = $this->eventsEventIdSectorsSectorIdGetWithHttpInfo($client_id, $access_token, $event_id, $sector_id);
        return $response;
    }

    /**
     * Operation eventsEventIdSectorsSectorIdGetWithHttpInfo
     *
     * 
     *
     * @param string $client_id Customer identifier used for authentication. (required)
     * @param string $access_token Access token used in the authentication. (required)
     * @param string $event_id Event to search. (required)
     * @param string $sector_id Sector to search. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function eventsEventIdSectorsSectorIdGetWithHttpInfo($client_id, $access_token, $event_id, $sector_id)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_id when calling eventsEventIdSectorsSectorIdGet');
        }
        // verify the required parameter 'access_token' is set
        if ($access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $access_token when calling eventsEventIdSectorsSectorIdGet');
        }
        // verify the required parameter 'event_id' is set
        if ($event_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $event_id when calling eventsEventIdSectorsSectorIdGet');
        }
        // verify the required parameter 'sector_id' is set
        if ($sector_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sector_id when calling eventsEventIdSectorsSectorIdGet');
        }
        // parse inputs
        $resourcePath = "/events/{eventId}/sectors/{sectorId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = $this->apiClient->getSerializer()->toHeaderValue($client_id);
        }
        // header params
        if ($access_token !== null) {
            $headerParams['access_token'] = $this->apiClient->getSerializer()->toHeaderValue($access_token);
        }
        // path params
        if ($event_id !== null) {
            $resourcePath = str_replace(
                "{" . "eventId" . "}",
                $this->apiClient->getSerializer()->toPathValue($event_id),
                $resourcePath
            );
        }
        // path params
        if ($sector_id !== null) {
            $resourcePath = str_replace(
                "{" . "sectorId" . "}",
                $this->apiClient->getSerializer()->toPathValue($sector_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2002',
                '/events/{eventId}/sectors/{sectorId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2002', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2002', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation eventsEventIdSectorsSectorIdSubsectorsGet
     *
     * 
     *
     * @param string $client_id Customer identifier used for authentication. (required)
     * @param string $access_token Access token used in the authentication. (required)
     * @param string $event_id Event to search. (required)
     * @param string $sector_id Sector to search. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2002[]
     */
    public function eventsEventIdSectorsSectorIdSubsectorsGet($client_id, $access_token, $event_id, $sector_id)
    {
        list($response) = $this->eventsEventIdSectorsSectorIdSubsectorsGetWithHttpInfo($client_id, $access_token, $event_id, $sector_id);
        return $response;
    }

    /**
     * Operation eventsEventIdSectorsSectorIdSubsectorsGetWithHttpInfo
     *
     * 
     *
     * @param string $client_id Customer identifier used for authentication. (required)
     * @param string $access_token Access token used in the authentication. (required)
     * @param string $event_id Event to search. (required)
     * @param string $sector_id Sector to search. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2002[], HTTP status code, HTTP response headers (array of strings)
     */
    public function eventsEventIdSectorsSectorIdSubsectorsGetWithHttpInfo($client_id, $access_token, $event_id, $sector_id)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_id when calling eventsEventIdSectorsSectorIdSubsectorsGet');
        }
        // verify the required parameter 'access_token' is set
        if ($access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $access_token when calling eventsEventIdSectorsSectorIdSubsectorsGet');
        }
        // verify the required parameter 'event_id' is set
        if ($event_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $event_id when calling eventsEventIdSectorsSectorIdSubsectorsGet');
        }
        // verify the required parameter 'sector_id' is set
        if ($sector_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sector_id when calling eventsEventIdSectorsSectorIdSubsectorsGet');
        }
        // parse inputs
        $resourcePath = "/events/{eventId}/sectors/{sectorId}/subsectors";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = $this->apiClient->getSerializer()->toHeaderValue($client_id);
        }
        // header params
        if ($access_token !== null) {
            $headerParams['access_token'] = $this->apiClient->getSerializer()->toHeaderValue($access_token);
        }
        // path params
        if ($event_id !== null) {
            $resourcePath = str_replace(
                "{" . "eventId" . "}",
                $this->apiClient->getSerializer()->toPathValue($event_id),
                $resourcePath
            );
        }
        // path params
        if ($sector_id !== null) {
            $resourcePath = str_replace(
                "{" . "sectorId" . "}",
                $this->apiClient->getSerializer()->toPathValue($sector_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2002[]',
                '/events/{eventId}/sectors/{sectorId}/subsectors'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2002[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2002[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation eventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet
     *
     * 
     *
     * @param string $client_id Customer identifier used for authentication. (required)
     * @param string $access_token Access token used in the authentication. (required)
     * @param string $event_id Event to search. (required)
     * @param string $sector_id Sector to search. (required)
     * @param string $subsector_id Subsector to search. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2003[]
     */
    public function eventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet($client_id, $access_token, $event_id, $sector_id, $subsector_id)
    {
        list($response) = $this->eventsEventIdSectorsSectorIdSubsectorsSubsectorIdGetWithHttpInfo($client_id, $access_token, $event_id, $sector_id, $subsector_id);
        return $response;
    }

    /**
     * Operation eventsEventIdSectorsSectorIdSubsectorsSubsectorIdGetWithHttpInfo
     *
     * 
     *
     * @param string $client_id Customer identifier used for authentication. (required)
     * @param string $access_token Access token used in the authentication. (required)
     * @param string $event_id Event to search. (required)
     * @param string $sector_id Sector to search. (required)
     * @param string $subsector_id Subsector to search. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2003[], HTTP status code, HTTP response headers (array of strings)
     */
    public function eventsEventIdSectorsSectorIdSubsectorsSubsectorIdGetWithHttpInfo($client_id, $access_token, $event_id, $sector_id, $subsector_id)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_id when calling eventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet');
        }
        // verify the required parameter 'access_token' is set
        if ($access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $access_token when calling eventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet');
        }
        // verify the required parameter 'event_id' is set
        if ($event_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $event_id when calling eventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet');
        }
        // verify the required parameter 'sector_id' is set
        if ($sector_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sector_id when calling eventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet');
        }
        // verify the required parameter 'subsector_id' is set
        if ($subsector_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subsector_id when calling eventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet');
        }
        // parse inputs
        $resourcePath = "/events/{eventId}/sectors/{sectorId}/subsectors/{subsectorId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = $this->apiClient->getSerializer()->toHeaderValue($client_id);
        }
        // header params
        if ($access_token !== null) {
            $headerParams['access_token'] = $this->apiClient->getSerializer()->toHeaderValue($access_token);
        }
        // path params
        if ($event_id !== null) {
            $resourcePath = str_replace(
                "{" . "eventId" . "}",
                $this->apiClient->getSerializer()->toPathValue($event_id),
                $resourcePath
            );
        }
        // path params
        if ($sector_id !== null) {
            $resourcePath = str_replace(
                "{" . "sectorId" . "}",
                $this->apiClient->getSerializer()->toPathValue($sector_id),
                $resourcePath
            );
        }
        // path params
        if ($subsector_id !== null) {
            $resourcePath = str_replace(
                "{" . "subsectorId" . "}",
                $this->apiClient->getSerializer()->toPathValue($subsector_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2003[]',
                '/events/{eventId}/sectors/{sectorId}/subsectors/{subsectorId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2003[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2003[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation eventsGet
     *
     * 
     *
     * @param string $client_id Customer identifier used for authentication. (required)
     * @param string $access_token Access token used in the authentication. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse200[]
     */
    public function eventsGet($client_id, $access_token)
    {
        list($response) = $this->eventsGetWithHttpInfo($client_id, $access_token);
        return $response;
    }

    /**
     * Operation eventsGetWithHttpInfo
     *
     * 
     *
     * @param string $client_id Customer identifier used for authentication. (required)
     * @param string $access_token Access token used in the authentication. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse200[], HTTP status code, HTTP response headers (array of strings)
     */
    public function eventsGetWithHttpInfo($client_id, $access_token)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_id when calling eventsGet');
        }
        // verify the required parameter 'access_token' is set
        if ($access_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $access_token when calling eventsGet');
        }
        // parse inputs
        $resourcePath = "/events";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = $this->apiClient->getSerializer()->toHeaderValue($client_id);
        }
        // header params
        if ($access_token !== null) {
            $headerParams['access_token'] = $this->apiClient->getSerializer()->toHeaderValue($access_token);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200[]',
                '/events'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse400', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
