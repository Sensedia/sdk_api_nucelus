=begin
#API Agillitas Cartões Pré-pagos

#API para manipular recursos relacionadas à cartões pré-pagos Agillitas.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class CartoesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Obtém o número de identificação (Proxy) de um cartão
    # <p>Permite a verificação de disponibilidade de cartão e qual o número de identificação (Proxy) para posterior requisição.</p><br/><p class='obs obs-danger'> Este recurso só poderá ser utilizado em produção mediante aprovação.</p>
    # @param tipo_cartao Identifica qual o tipo do cartão, físico ou virtual.
    # @param [Hash] opts the optional parameters
    # @return [CartaoDisponivel]
    def cartoes_get(tipo_cartao, opts = {})
      data, _status_code, _headers = cartoes_get_with_http_info(tipo_cartao, opts)
      return data
    end

    # Obtém o número de identificação (Proxy) de um cartão
    # &lt;p&gt;Permite a verificação de disponibilidade de cartão e qual o número de identificação (Proxy) para posterior requisição.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt; Este recurso só poderá ser utilizado em produção mediante aprovação.&lt;/p&gt;
    # @param tipo_cartao Identifica qual o tipo do cartão, físico ou virtual.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CartaoDisponivel, Fixnum, Hash)>] CartaoDisponivel data, response status code and response headers
    def cartoes_get_with_http_info(tipo_cartao, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartoesApi.cartoes_get ..."
      end
      # verify the required parameter 'tipo_cartao' is set
      fail ArgumentError, "Missing the required parameter 'tipo_cartao' when calling CartoesApi.cartoes_get" if tipo_cartao.nil?
      # verify enum value
      unless ['fisico', 'virtual'].include?(tipo_cartao)
        fail ArgumentError, "invalid value for 'tipo_cartao', must be one of fisico, virtual"
      end
      # resource path
      local_var_path = "/cartoes".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'tipoCartao'] = tipo_cartao

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token', 'key_id', 'client_id']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CartaoDisponivel')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartoesApi#cartoes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Extrato do cartão
    # <p>Permite a consulta dos movimentos por período, de um determinado cartão. A janela máxima de observação é de 30 dias, e as datas inicial e final de observação pode ser configuradas, conforme necessidade.</p>
    # @param id_cartao Número identificador referente ao proxy localizado no verso do cartão.
    # @param data_inicial Data inicial para a consulta.
    # @param data_final Data final para a consulta.
    # @param [Hash] opts the optional parameters
    # @return [ExtratoResponse]
    def cartoes_id_cartao_extrato_get(id_cartao, data_inicial, data_final, opts = {})
      data, _status_code, _headers = cartoes_id_cartao_extrato_get_with_http_info(id_cartao, data_inicial, data_final, opts)
      return data
    end

    # Extrato do cartão
    # &lt;p&gt;Permite a consulta dos movimentos por período, de um determinado cartão. A janela máxima de observação é de 30 dias, e as datas inicial e final de observação pode ser configuradas, conforme necessidade.&lt;/p&gt;
    # @param id_cartao Número identificador referente ao proxy localizado no verso do cartão.
    # @param data_inicial Data inicial para a consulta.
    # @param data_final Data final para a consulta.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExtratoResponse, Fixnum, Hash)>] ExtratoResponse data, response status code and response headers
    def cartoes_id_cartao_extrato_get_with_http_info(id_cartao, data_inicial, data_final, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartoesApi.cartoes_id_cartao_extrato_get ..."
      end
      # verify the required parameter 'id_cartao' is set
      fail ArgumentError, "Missing the required parameter 'id_cartao' when calling CartoesApi.cartoes_id_cartao_extrato_get" if id_cartao.nil?
      # verify the required parameter 'data_inicial' is set
      fail ArgumentError, "Missing the required parameter 'data_inicial' when calling CartoesApi.cartoes_id_cartao_extrato_get" if data_inicial.nil?
      # verify the required parameter 'data_final' is set
      fail ArgumentError, "Missing the required parameter 'data_final' when calling CartoesApi.cartoes_id_cartao_extrato_get" if data_final.nil?
      # resource path
      local_var_path = "/cartoes/{idCartao}/extrato".sub('{format}','json').sub('{' + 'idCartao' + '}', id_cartao.to_s)

      # query parameters
      query_params = {}
      query_params[:'dataInicial'] = data_inicial
      query_params[:'dataFinal'] = data_final

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token', 'key_id', 'client_id']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExtratoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartoesApi#cartoes_id_cartao_extrato_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Informações do portador do cartão
    # <p>Permite a consulta de informações cadastrais de um determinado portador de cartão.</p>
    # @param id_cartao Número identificador referente ao proxy localizado no verso do cartão.
    # @param [Hash] opts the optional parameters
    # @return [PortadorResponse]
    def cartoes_id_cartao_portador_get(id_cartao, opts = {})
      data, _status_code, _headers = cartoes_id_cartao_portador_get_with_http_info(id_cartao, opts)
      return data
    end

    # Informações do portador do cartão
    # &lt;p&gt;Permite a consulta de informações cadastrais de um determinado portador de cartão.&lt;/p&gt;
    # @param id_cartao Número identificador referente ao proxy localizado no verso do cartão.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortadorResponse, Fixnum, Hash)>] PortadorResponse data, response status code and response headers
    def cartoes_id_cartao_portador_get_with_http_info(id_cartao, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartoesApi.cartoes_id_cartao_portador_get ..."
      end
      # verify the required parameter 'id_cartao' is set
      fail ArgumentError, "Missing the required parameter 'id_cartao' when calling CartoesApi.cartoes_id_cartao_portador_get" if id_cartao.nil?
      # resource path
      local_var_path = "/cartoes/{idCartao}/portador".sub('{format}','json').sub('{' + 'idCartao' + '}', id_cartao.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token', 'key_id', 'client_id']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortadorResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartoesApi#cartoes_id_cartao_portador_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saldo do cartão
    # <p>Permite a consulta do saldo disponível de um determinado cartão.</p>
    # @param id_cartao Número identificador referente ao proxy localizado no verso do cartão.
    # @param [Hash] opts the optional parameters
    # @return [Saldo]
    def cartoes_id_cartao_saldo_get(id_cartao, opts = {})
      data, _status_code, _headers = cartoes_id_cartao_saldo_get_with_http_info(id_cartao, opts)
      return data
    end

    # Saldo do cartão
    # &lt;p&gt;Permite a consulta do saldo disponível de um determinado cartão.&lt;/p&gt;
    # @param id_cartao Número identificador referente ao proxy localizado no verso do cartão.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Saldo, Fixnum, Hash)>] Saldo data, response status code and response headers
    def cartoes_id_cartao_saldo_get_with_http_info(id_cartao, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartoesApi.cartoes_id_cartao_saldo_get ..."
      end
      # verify the required parameter 'id_cartao' is set
      fail ArgumentError, "Missing the required parameter 'id_cartao' when calling CartoesApi.cartoes_id_cartao_saldo_get" if id_cartao.nil?
      # resource path
      local_var_path = "/cartoes/{idCartao}/saldo".sub('{format}','json').sub('{' + 'idCartao' + '}', id_cartao.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token', 'key_id', 'client_id']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Saldo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartoesApi#cartoes_id_cartao_saldo_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Credita ou debita valor da conta de um cartão.
    # <p>Permite creditar ou debitar um valor especifico em um determinado cartão.</p><br/><p class='obs obs-danger'>Este recurso deve ser utilizado somente pelo reseller e quando o credito do cartão for de responsabilidade e propriedade do Reseller.</p>
    # @param id_cartao Número identificador referente ao proxy localizado no verso do cartão.
    # @param saldo Objeto de requisição
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def cartoes_id_cartao_saldo_put(id_cartao, saldo, opts = {})
      cartoes_id_cartao_saldo_put_with_http_info(id_cartao, saldo, opts)
      return nil
    end

    # Credita ou debita valor da conta de um cartão.
    # &lt;p&gt;Permite creditar ou debitar um valor especifico em um determinado cartão.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt;Este recurso deve ser utilizado somente pelo reseller e quando o credito do cartão for de responsabilidade e propriedade do Reseller.&lt;/p&gt;
    # @param id_cartao Número identificador referente ao proxy localizado no verso do cartão.
    # @param saldo Objeto de requisição
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def cartoes_id_cartao_saldo_put_with_http_info(id_cartao, saldo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartoesApi.cartoes_id_cartao_saldo_put ..."
      end
      # verify the required parameter 'id_cartao' is set
      fail ArgumentError, "Missing the required parameter 'id_cartao' when calling CartoesApi.cartoes_id_cartao_saldo_put" if id_cartao.nil?
      # verify the required parameter 'saldo' is set
      fail ArgumentError, "Missing the required parameter 'saldo' when calling CartoesApi.cartoes_id_cartao_saldo_put" if saldo.nil?
      # resource path
      local_var_path = "/cartoes/{idCartao}/saldo".sub('{format}','json').sub('{' + 'idCartao' + '}', id_cartao.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(saldo)
      auth_names = ['access_token', 'key_id', 'client_id']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartoesApi#cartoes_id_cartao_saldo_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Status do cartão
    # <p>Permite a consulta do status de um determinado cartão. O status do cartão nos permite saber se o cartão esta ativo, bloqueado , desbloqueado ou cancelado.</p>
    # @param id_cartao Número identificador referente ao proxy localizado no verso do cartão.
    # @param [Hash] opts the optional parameters
    # @return [StatusCartaoResponse]
    def cartoes_id_cartao_status_get(id_cartao, opts = {})
      data, _status_code, _headers = cartoes_id_cartao_status_get_with_http_info(id_cartao, opts)
      return data
    end

    # Status do cartão
    # &lt;p&gt;Permite a consulta do status de um determinado cartão. O status do cartão nos permite saber se o cartão esta ativo, bloqueado , desbloqueado ou cancelado.&lt;/p&gt;
    # @param id_cartao Número identificador referente ao proxy localizado no verso do cartão.
    # @param [Hash] opts the optional parameters
    # @return [Array<(StatusCartaoResponse, Fixnum, Hash)>] StatusCartaoResponse data, response status code and response headers
    def cartoes_id_cartao_status_get_with_http_info(id_cartao, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartoesApi.cartoes_id_cartao_status_get ..."
      end
      # verify the required parameter 'id_cartao' is set
      fail ArgumentError, "Missing the required parameter 'id_cartao' when calling CartoesApi.cartoes_id_cartao_status_get" if id_cartao.nil?
      # resource path
      local_var_path = "/cartoes/{idCartao}/status".sub('{format}','json').sub('{' + 'idCartao' + '}', id_cartao.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token', 'key_id', 'client_id']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StatusCartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartoesApi#cartoes_id_cartao_status_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Altera status do cartão
    # <p>Permite o bloqueio e desbloqueio de um determinado cartão.</p>
    # @param id_cartao Número identificador referente ao proxy localizado no verso do cartão.
    # @param status Objeto de requisição
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def cartoes_id_cartao_status_put(id_cartao, status, opts = {})
      cartoes_id_cartao_status_put_with_http_info(id_cartao, status, opts)
      return nil
    end

    # Altera status do cartão
    # &lt;p&gt;Permite o bloqueio e desbloqueio de um determinado cartão.&lt;/p&gt;
    # @param id_cartao Número identificador referente ao proxy localizado no verso do cartão.
    # @param status Objeto de requisição
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def cartoes_id_cartao_status_put_with_http_info(id_cartao, status, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartoesApi.cartoes_id_cartao_status_put ..."
      end
      # verify the required parameter 'id_cartao' is set
      fail ArgumentError, "Missing the required parameter 'id_cartao' when calling CartoesApi.cartoes_id_cartao_status_put" if id_cartao.nil?
      # verify the required parameter 'status' is set
      fail ArgumentError, "Missing the required parameter 'status' when calling CartoesApi.cartoes_id_cartao_status_put" if status.nil?
      # resource path
      local_var_path = "/cartoes/{idCartao}/status".sub('{format}','json').sub('{' + 'idCartao' + '}', id_cartao.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(status)
      auth_names = ['access_token', 'key_id', 'client_id']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartoesApi#cartoes_id_cartao_status_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Requisita um cartão de debito
    # <p>Permite a carga de um valor especifico a um determinado cartão.</p><br/><p class='obs obs-danger'>Este recurso deve ser utilizado somente pelo reseller e com fundo disponível na conta e ainda dependente de aprovação pelo agente financeiro</p> 
    # @param cartao Objeto de requisição
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def cartoes_post(cartao, opts = {})
      cartoes_post_with_http_info(cartao, opts)
      return nil
    end

    # Requisita um cartão de debito
    # &lt;p&gt;Permite a carga de um valor especifico a um determinado cartão.&lt;/p&gt;&lt;br/&gt;&lt;p class&#x3D;&#39;obs obs-danger&#39;&gt;Este recurso deve ser utilizado somente pelo reseller e com fundo disponível na conta e ainda dependente de aprovação pelo agente financeiro&lt;/p&gt; 
    # @param cartao Objeto de requisição
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def cartoes_post_with_http_info(cartao, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartoesApi.cartoes_post ..."
      end
      # verify the required parameter 'cartao' is set
      fail ArgumentError, "Missing the required parameter 'cartao' when calling CartoesApi.cartoes_post" if cartao.nil?
      # resource path
      local_var_path = "/cartoes".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(cartao)
      auth_names = ['access_token', 'key_id', 'client_id']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartoesApi#cartoes_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
