# coding: utf-8

"""
    API Agillitas Cartões Pré-pagos

    API para manipular recursos relacionadas à cartões pré-pagos Agillitas.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CartoesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def cartoes_get(self, tipo_cartao, **kwargs):
        """
        Obtém o número de identificação (Proxy) de um cartão
        <p>Permite a verificação de disponibilidade de cartão e qual o número de identificação (Proxy) para posterior requisição.</p><br/><p class='obs obs-danger'> Este recurso só poderá ser utilizado em produção mediante aprovação.</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cartoes_get(tipo_cartao, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tipo_cartao: Identifica qual o tipo do cartão, físico ou virtual. (required)
        :return: CartaoDisponivel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cartoes_get_with_http_info(tipo_cartao, **kwargs)
        else:
            (data) = self.cartoes_get_with_http_info(tipo_cartao, **kwargs)
            return data

    def cartoes_get_with_http_info(self, tipo_cartao, **kwargs):
        """
        Obtém o número de identificação (Proxy) de um cartão
        <p>Permite a verificação de disponibilidade de cartão e qual o número de identificação (Proxy) para posterior requisição.</p><br/><p class='obs obs-danger'> Este recurso só poderá ser utilizado em produção mediante aprovação.</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cartoes_get_with_http_info(tipo_cartao, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tipo_cartao: Identifica qual o tipo do cartão, físico ou virtual. (required)
        :return: CartaoDisponivel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tipo_cartao']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cartoes_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tipo_cartao' is set
        if ('tipo_cartao' not in params) or (params['tipo_cartao'] is None):
            raise ValueError("Missing the required parameter `tipo_cartao` when calling `cartoes_get`")


        collection_formats = {}

        resource_path = '/cartoes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'tipo_cartao' in params:
            query_params['tipoCartao'] = params['tipo_cartao']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token', 'key_id', 'client_id']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CartaoDisponivel',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cartoes_id_cartao_extrato_get(self, id_cartao, data_inicial, data_final, **kwargs):
        """
        Extrato do cartão
        <p>Permite a consulta dos movimentos por período, de um determinado cartão. A janela máxima de observação é de 30 dias, e as datas inicial e final de observação pode ser configuradas, conforme necessidade.</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cartoes_id_cartao_extrato_get(id_cartao, data_inicial, data_final, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id_cartao: Número identificador referente ao proxy localizado no verso do cartão. (required)
        :param str data_inicial: Data inicial para a consulta. (required)
        :param str data_final: Data final para a consulta. (required)
        :return: ExtratoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cartoes_id_cartao_extrato_get_with_http_info(id_cartao, data_inicial, data_final, **kwargs)
        else:
            (data) = self.cartoes_id_cartao_extrato_get_with_http_info(id_cartao, data_inicial, data_final, **kwargs)
            return data

    def cartoes_id_cartao_extrato_get_with_http_info(self, id_cartao, data_inicial, data_final, **kwargs):
        """
        Extrato do cartão
        <p>Permite a consulta dos movimentos por período, de um determinado cartão. A janela máxima de observação é de 30 dias, e as datas inicial e final de observação pode ser configuradas, conforme necessidade.</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cartoes_id_cartao_extrato_get_with_http_info(id_cartao, data_inicial, data_final, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id_cartao: Número identificador referente ao proxy localizado no verso do cartão. (required)
        :param str data_inicial: Data inicial para a consulta. (required)
        :param str data_final: Data final para a consulta. (required)
        :return: ExtratoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_cartao', 'data_inicial', 'data_final']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cartoes_id_cartao_extrato_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_cartao' is set
        if ('id_cartao' not in params) or (params['id_cartao'] is None):
            raise ValueError("Missing the required parameter `id_cartao` when calling `cartoes_id_cartao_extrato_get`")
        # verify the required parameter 'data_inicial' is set
        if ('data_inicial' not in params) or (params['data_inicial'] is None):
            raise ValueError("Missing the required parameter `data_inicial` when calling `cartoes_id_cartao_extrato_get`")
        # verify the required parameter 'data_final' is set
        if ('data_final' not in params) or (params['data_final'] is None):
            raise ValueError("Missing the required parameter `data_final` when calling `cartoes_id_cartao_extrato_get`")


        collection_formats = {}

        resource_path = '/cartoes/{idCartao}/extrato'.replace('{format}', 'json')
        path_params = {}
        if 'id_cartao' in params:
            path_params['idCartao'] = params['id_cartao']

        query_params = {}
        if 'data_inicial' in params:
            query_params['dataInicial'] = params['data_inicial']
        if 'data_final' in params:
            query_params['dataFinal'] = params['data_final']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token', 'key_id', 'client_id']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ExtratoResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cartoes_id_cartao_portador_get(self, id_cartao, **kwargs):
        """
        Informações do portador do cartão
        <p>Permite a consulta de informações cadastrais de um determinado portador de cartão.</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cartoes_id_cartao_portador_get(id_cartao, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id_cartao: Número identificador referente ao proxy localizado no verso do cartão. (required)
        :return: PortadorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cartoes_id_cartao_portador_get_with_http_info(id_cartao, **kwargs)
        else:
            (data) = self.cartoes_id_cartao_portador_get_with_http_info(id_cartao, **kwargs)
            return data

    def cartoes_id_cartao_portador_get_with_http_info(self, id_cartao, **kwargs):
        """
        Informações do portador do cartão
        <p>Permite a consulta de informações cadastrais de um determinado portador de cartão.</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cartoes_id_cartao_portador_get_with_http_info(id_cartao, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id_cartao: Número identificador referente ao proxy localizado no verso do cartão. (required)
        :return: PortadorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_cartao']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cartoes_id_cartao_portador_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_cartao' is set
        if ('id_cartao' not in params) or (params['id_cartao'] is None):
            raise ValueError("Missing the required parameter `id_cartao` when calling `cartoes_id_cartao_portador_get`")


        collection_formats = {}

        resource_path = '/cartoes/{idCartao}/portador'.replace('{format}', 'json')
        path_params = {}
        if 'id_cartao' in params:
            path_params['idCartao'] = params['id_cartao']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token', 'key_id', 'client_id']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PortadorResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cartoes_id_cartao_saldo_get(self, id_cartao, **kwargs):
        """
        Saldo do cartão
        <p>Permite a consulta do saldo disponível de um determinado cartão.</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cartoes_id_cartao_saldo_get(id_cartao, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id_cartao: Número identificador referente ao proxy localizado no verso do cartão. (required)
        :return: Saldo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cartoes_id_cartao_saldo_get_with_http_info(id_cartao, **kwargs)
        else:
            (data) = self.cartoes_id_cartao_saldo_get_with_http_info(id_cartao, **kwargs)
            return data

    def cartoes_id_cartao_saldo_get_with_http_info(self, id_cartao, **kwargs):
        """
        Saldo do cartão
        <p>Permite a consulta do saldo disponível de um determinado cartão.</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cartoes_id_cartao_saldo_get_with_http_info(id_cartao, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id_cartao: Número identificador referente ao proxy localizado no verso do cartão. (required)
        :return: Saldo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_cartao']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cartoes_id_cartao_saldo_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_cartao' is set
        if ('id_cartao' not in params) or (params['id_cartao'] is None):
            raise ValueError("Missing the required parameter `id_cartao` when calling `cartoes_id_cartao_saldo_get`")


        collection_formats = {}

        resource_path = '/cartoes/{idCartao}/saldo'.replace('{format}', 'json')
        path_params = {}
        if 'id_cartao' in params:
            path_params['idCartao'] = params['id_cartao']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token', 'key_id', 'client_id']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Saldo',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cartoes_id_cartao_saldo_put(self, id_cartao, saldo, **kwargs):
        """
        Credita ou debita valor da conta de um cartão.
        <p>Permite creditar ou debitar um valor especifico em um determinado cartão.</p><br/><p class='obs obs-danger'>Este recurso deve ser utilizado somente pelo reseller e quando o credito do cartão for de responsabilidade e propriedade do Reseller.</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cartoes_id_cartao_saldo_put(id_cartao, saldo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id_cartao: Número identificador referente ao proxy localizado no verso do cartão. (required)
        :param SetSaldo saldo: Objeto de requisição (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cartoes_id_cartao_saldo_put_with_http_info(id_cartao, saldo, **kwargs)
        else:
            (data) = self.cartoes_id_cartao_saldo_put_with_http_info(id_cartao, saldo, **kwargs)
            return data

    def cartoes_id_cartao_saldo_put_with_http_info(self, id_cartao, saldo, **kwargs):
        """
        Credita ou debita valor da conta de um cartão.
        <p>Permite creditar ou debitar um valor especifico em um determinado cartão.</p><br/><p class='obs obs-danger'>Este recurso deve ser utilizado somente pelo reseller e quando o credito do cartão for de responsabilidade e propriedade do Reseller.</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cartoes_id_cartao_saldo_put_with_http_info(id_cartao, saldo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id_cartao: Número identificador referente ao proxy localizado no verso do cartão. (required)
        :param SetSaldo saldo: Objeto de requisição (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_cartao', 'saldo']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cartoes_id_cartao_saldo_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_cartao' is set
        if ('id_cartao' not in params) or (params['id_cartao'] is None):
            raise ValueError("Missing the required parameter `id_cartao` when calling `cartoes_id_cartao_saldo_put`")
        # verify the required parameter 'saldo' is set
        if ('saldo' not in params) or (params['saldo'] is None):
            raise ValueError("Missing the required parameter `saldo` when calling `cartoes_id_cartao_saldo_put`")


        collection_formats = {}

        resource_path = '/cartoes/{idCartao}/saldo'.replace('{format}', 'json')
        path_params = {}
        if 'id_cartao' in params:
            path_params['idCartao'] = params['id_cartao']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'saldo' in params:
            body_params = params['saldo']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token', 'key_id', 'client_id']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cartoes_id_cartao_status_get(self, id_cartao, **kwargs):
        """
        Status do cartão
        <p>Permite a consulta do status de um determinado cartão. O status do cartão nos permite saber se o cartão esta ativo, bloqueado , desbloqueado ou cancelado.</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cartoes_id_cartao_status_get(id_cartao, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id_cartao: Número identificador referente ao proxy localizado no verso do cartão. (required)
        :return: StatusCartaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cartoes_id_cartao_status_get_with_http_info(id_cartao, **kwargs)
        else:
            (data) = self.cartoes_id_cartao_status_get_with_http_info(id_cartao, **kwargs)
            return data

    def cartoes_id_cartao_status_get_with_http_info(self, id_cartao, **kwargs):
        """
        Status do cartão
        <p>Permite a consulta do status de um determinado cartão. O status do cartão nos permite saber se o cartão esta ativo, bloqueado , desbloqueado ou cancelado.</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cartoes_id_cartao_status_get_with_http_info(id_cartao, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id_cartao: Número identificador referente ao proxy localizado no verso do cartão. (required)
        :return: StatusCartaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_cartao']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cartoes_id_cartao_status_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_cartao' is set
        if ('id_cartao' not in params) or (params['id_cartao'] is None):
            raise ValueError("Missing the required parameter `id_cartao` when calling `cartoes_id_cartao_status_get`")


        collection_formats = {}

        resource_path = '/cartoes/{idCartao}/status'.replace('{format}', 'json')
        path_params = {}
        if 'id_cartao' in params:
            path_params['idCartao'] = params['id_cartao']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token', 'key_id', 'client_id']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StatusCartaoResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cartoes_id_cartao_status_put(self, id_cartao, status, **kwargs):
        """
        Altera status do cartão
        <p>Permite o bloqueio e desbloqueio de um determinado cartão.</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cartoes_id_cartao_status_put(id_cartao, status, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id_cartao: Número identificador referente ao proxy localizado no verso do cartão. (required)
        :param SetCardStatus status: Objeto de requisição (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cartoes_id_cartao_status_put_with_http_info(id_cartao, status, **kwargs)
        else:
            (data) = self.cartoes_id_cartao_status_put_with_http_info(id_cartao, status, **kwargs)
            return data

    def cartoes_id_cartao_status_put_with_http_info(self, id_cartao, status, **kwargs):
        """
        Altera status do cartão
        <p>Permite o bloqueio e desbloqueio de um determinado cartão.</p>
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cartoes_id_cartao_status_put_with_http_info(id_cartao, status, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id_cartao: Número identificador referente ao proxy localizado no verso do cartão. (required)
        :param SetCardStatus status: Objeto de requisição (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_cartao', 'status']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cartoes_id_cartao_status_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_cartao' is set
        if ('id_cartao' not in params) or (params['id_cartao'] is None):
            raise ValueError("Missing the required parameter `id_cartao` when calling `cartoes_id_cartao_status_put`")
        # verify the required parameter 'status' is set
        if ('status' not in params) or (params['status'] is None):
            raise ValueError("Missing the required parameter `status` when calling `cartoes_id_cartao_status_put`")


        collection_formats = {}

        resource_path = '/cartoes/{idCartao}/status'.replace('{format}', 'json')
        path_params = {}
        if 'id_cartao' in params:
            path_params['idCartao'] = params['id_cartao']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'status' in params:
            body_params = params['status']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token', 'key_id', 'client_id']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cartoes_post(self, cartao, **kwargs):
        """
        Requisita um cartão de debito
        <p>Permite a carga de um valor especifico a um determinado cartão.</p><br/><p class='obs obs-danger'>Este recurso deve ser utilizado somente pelo reseller e com fundo disponível na conta e ainda dependente de aprovação pelo agente financeiro</p> 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cartoes_post(cartao, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SetNovoCartao cartao: Objeto de requisição (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cartoes_post_with_http_info(cartao, **kwargs)
        else:
            (data) = self.cartoes_post_with_http_info(cartao, **kwargs)
            return data

    def cartoes_post_with_http_info(self, cartao, **kwargs):
        """
        Requisita um cartão de debito
        <p>Permite a carga de um valor especifico a um determinado cartão.</p><br/><p class='obs obs-danger'>Este recurso deve ser utilizado somente pelo reseller e com fundo disponível na conta e ainda dependente de aprovação pelo agente financeiro</p> 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cartoes_post_with_http_info(cartao, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SetNovoCartao cartao: Objeto de requisição (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cartao']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cartoes_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cartao' is set
        if ('cartao' not in params) or (params['cartao'] is None):
            raise ValueError("Missing the required parameter `cartao` when calling `cartoes_post`")


        collection_formats = {}

        resource_path = '/cartoes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'cartao' in params:
            body_params = params['cartao']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token', 'key_id', 'client_id']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
