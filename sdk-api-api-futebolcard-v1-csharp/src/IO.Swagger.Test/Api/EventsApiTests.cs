/* 
 * API do Futebolcard
 *
 * Futebolcard manipulation API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing EventsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class EventsApiTests
    {
        private EventsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new EventsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of EventsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' EventsApi
            //Assert.IsInstanceOfType(typeof(EventsApi), instance, "instance is a EventsApi");
        }

        
        /// <summary>
        /// Test EventsEventIdGet
        /// </summary>
        [Test]
        public void EventsEventIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string clientId = null;
            //string accessToken = null;
            //string eventId = null;
            //var response = instance.EventsEventIdGet(clientId, accessToken, eventId);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test EventsEventIdSectorsGet
        /// </summary>
        [Test]
        public void EventsEventIdSectorsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string clientId = null;
            //string accessToken = null;
            //string eventId = null;
            //var response = instance.EventsEventIdSectorsGet(clientId, accessToken, eventId);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test EventsEventIdSectorsSectorIdGet
        /// </summary>
        [Test]
        public void EventsEventIdSectorsSectorIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string clientId = null;
            //string accessToken = null;
            //string eventId = null;
            //string sectorId = null;
            //var response = instance.EventsEventIdSectorsSectorIdGet(clientId, accessToken, eventId, sectorId);
            //Assert.IsInstanceOf<InlineResponse2002> (response, "response is InlineResponse2002");
        }
        
        /// <summary>
        /// Test EventsEventIdSectorsSectorIdSubsectorsGet
        /// </summary>
        [Test]
        public void EventsEventIdSectorsSectorIdSubsectorsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string clientId = null;
            //string accessToken = null;
            //string eventId = null;
            //string sectorId = null;
            //var response = instance.EventsEventIdSectorsSectorIdSubsectorsGet(clientId, accessToken, eventId, sectorId);
            //Assert.IsInstanceOf<InlineResponse2002> (response, "response is InlineResponse2002");
        }
        
        /// <summary>
        /// Test EventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet
        /// </summary>
        [Test]
        public void EventsEventIdSectorsSectorIdSubsectorsSubsectorIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string clientId = null;
            //string accessToken = null;
            //string eventId = null;
            //string sectorId = null;
            //string subsectorId = null;
            //var response = instance.EventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet(clientId, accessToken, eventId, sectorId, subsectorId);
            //Assert.IsInstanceOf<List<InlineResponse2003>> (response, "response is List<InlineResponse2003>");
        }
        
        /// <summary>
        /// Test EventsGet
        /// </summary>
        [Test]
        public void EventsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string clientId = null;
            //string accessToken = null;
            //var response = instance.EventsGet(clientId, accessToken);
            //Assert.IsInstanceOf<List<InlineResponse200>> (response, "response is List<InlineResponse200>");
        }
        
    }

}
