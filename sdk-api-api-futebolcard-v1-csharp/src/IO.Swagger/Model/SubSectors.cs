/* 
 * API do Futebolcard
 *
 * Futebolcard manipulation API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SubSectors
    /// </summary>
    [DataContract]
    public partial class SubSectors :  IEquatable<SubSectors>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubSectors" /> class.
        /// </summary>
        /// <param name="_Subsectors">_Subsectors.</param>
        /// <param name="Map">Map.</param>
        public SubSectors(List<InlineResponse2002Subsectors> _Subsectors = default(List<InlineResponse2002Subsectors>), InlineResponse2001Map Map = default(InlineResponse2001Map))
        {
            this._Subsectors = _Subsectors;
            this.Map = Map;
        }
        
        /// <summary>
        /// Gets or Sets _Subsectors
        /// </summary>
        [DataMember(Name="subsectors", EmitDefaultValue=false)]
        public List<InlineResponse2002Subsectors> _Subsectors { get; set; }
        /// <summary>
        /// Gets or Sets Map
        /// </summary>
        [DataMember(Name="map", EmitDefaultValue=false)]
        public InlineResponse2001Map Map { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubSectors {\n");
            sb.Append("  _Subsectors: ").Append(_Subsectors).Append("\n");
            sb.Append("  Map: ").Append(Map).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SubSectors);
        }

        /// <summary>
        /// Returns true if SubSectors instances are equal
        /// </summary>
        /// <param name="other">Instance of SubSectors to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubSectors other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this._Subsectors == other._Subsectors ||
                    this._Subsectors != null &&
                    this._Subsectors.SequenceEqual(other._Subsectors)
                ) && 
                (
                    this.Map == other.Map ||
                    this.Map != null &&
                    this.Map.Equals(other.Map)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this._Subsectors != null)
                    hash = hash * 59 + this._Subsectors.GetHashCode();
                if (this.Map != null)
                    hash = hash * 59 + this.Map.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
