/* 
 * API do Futebolcard
 *
 * Futebolcard manipulation API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse2003
    /// </summary>
    [DataContract]
    public partial class InlineResponse2003 :  IEquatable<InlineResponse2003>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2003" /> class.
        /// </summary>
        /// <param name="RowId">RowId.</param>
        /// <param name="RowAlias">RowAlias.</param>
        /// <param name="RowName">RowName.</param>
        /// <param name="Seats">Seats.</param>
        public InlineResponse2003(string RowId = default(string), string RowAlias = default(string), string RowName = default(string), List<EventseventIdsectorssectorIdsubsectorssubsectorIdSeats> Seats = default(List<EventseventIdsectorssectorIdsubsectorssubsectorIdSeats>))
        {
            this.RowId = RowId;
            this.RowAlias = RowAlias;
            this.RowName = RowName;
            this.Seats = Seats;
        }
        
        /// <summary>
        /// Gets or Sets RowId
        /// </summary>
        [DataMember(Name="rowId", EmitDefaultValue=false)]
        public string RowId { get; set; }
        /// <summary>
        /// Gets or Sets RowAlias
        /// </summary>
        [DataMember(Name="rowAlias", EmitDefaultValue=false)]
        public string RowAlias { get; set; }
        /// <summary>
        /// Gets or Sets RowName
        /// </summary>
        [DataMember(Name="rowName", EmitDefaultValue=false)]
        public string RowName { get; set; }
        /// <summary>
        /// Gets or Sets Seats
        /// </summary>
        [DataMember(Name="seats", EmitDefaultValue=false)]
        public List<EventseventIdsectorssectorIdsubsectorssubsectorIdSeats> Seats { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2003 {\n");
            sb.Append("  RowId: ").Append(RowId).Append("\n");
            sb.Append("  RowAlias: ").Append(RowAlias).Append("\n");
            sb.Append("  RowName: ").Append(RowName).Append("\n");
            sb.Append("  Seats: ").Append(Seats).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InlineResponse2003);
        }

        /// <summary>
        /// Returns true if InlineResponse2003 instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse2003 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2003 other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.RowId == other.RowId ||
                    this.RowId != null &&
                    this.RowId.Equals(other.RowId)
                ) && 
                (
                    this.RowAlias == other.RowAlias ||
                    this.RowAlias != null &&
                    this.RowAlias.Equals(other.RowAlias)
                ) && 
                (
                    this.RowName == other.RowName ||
                    this.RowName != null &&
                    this.RowName.Equals(other.RowName)
                ) && 
                (
                    this.Seats == other.Seats ||
                    this.Seats != null &&
                    this.Seats.SequenceEqual(other.Seats)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.RowId != null)
                    hash = hash * 59 + this.RowId.GetHashCode();
                if (this.RowAlias != null)
                    hash = hash * 59 + this.RowAlias.GetHashCode();
                if (this.RowName != null)
                    hash = hash * 59 + this.RowName.GetHashCode();
                if (this.Seats != null)
                    hash = hash * 59 + this.Seats.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
