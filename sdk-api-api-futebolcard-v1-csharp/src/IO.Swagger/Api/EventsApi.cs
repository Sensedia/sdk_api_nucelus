/* 
 * API do Futebolcard
 *
 * Futebolcard manipulation API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the details for a specific event.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 EventsEventIdGet (string clientId, string accessToken, string eventId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the details for a specific event.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> EventsEventIdGetWithHttpInfo (string clientId, string accessToken, string eventId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of sector for the given event.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 EventsEventIdSectorsGet (string clientId, string accessToken, string eventId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of sector for the given event.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> EventsEventIdSectorsGetWithHttpInfo (string clientId, string accessToken, string eventId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the details of a specific sector.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <param name="sectorId">Sector to search.</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 EventsEventIdSectorsSectorIdGet (string clientId, string accessToken, string eventId, string sectorId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the details of a specific sector.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <param name="sectorId">Sector to search.</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> EventsEventIdSectorsSectorIdGetWithHttpInfo (string clientId, string accessToken, string eventId, string sectorId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of subcsectors for a given sector.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <param name="sectorId">Sector to search.</param>
        /// <returns>List&lt;InlineResponse2002&gt;</returns>
        List<InlineResponse2002> EventsEventIdSectorsSectorIdSubsectorsGet (string clientId, string accessToken, string eventId, string sectorId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of subcsectors for a given sector.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <param name="sectorId">Sector to search.</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2002&gt;</returns>
        ApiResponse<List<InlineResponse2002>> EventsEventIdSectorsSectorIdSubsectorsGetWithHttpInfo (string clientId, string accessToken, string eventId, string sectorId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of seat&#39;s information for each row of a given subsector.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <param name="sectorId">Sector to search.</param>
        /// <param name="subsectorId">Subsector to search.</param>
        /// <returns>List&lt;InlineResponse2003&gt;</returns>
        List<InlineResponse2003> EventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet (string clientId, string accessToken, string eventId, string sectorId, string subsectorId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of seat&#39;s information for each row of a given subsector.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <param name="sectorId">Sector to search.</param>
        /// <param name="subsectorId">Subsector to search.</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2003&gt;</returns>
        ApiResponse<List<InlineResponse2003>> EventsEventIdSectorsSectorIdSubsectorsSubsectorIdGetWithHttpInfo (string clientId, string accessToken, string eventId, string sectorId, string subsectorId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of existing events.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <returns>List&lt;InlineResponse200&gt;</returns>
        List<InlineResponse200> EventsGet (string clientId, string accessToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of existing events.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <returns>ApiResponse of List&lt;InlineResponse200&gt;</returns>
        ApiResponse<List<InlineResponse200>> EventsGetWithHttpInfo (string clientId, string accessToken);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the details for a specific event.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> EventsEventIdGetAsync (string clientId, string accessToken, string eventId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the details for a specific event.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> EventsEventIdGetAsyncWithHttpInfo (string clientId, string accessToken, string eventId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of sector for the given event.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> EventsEventIdSectorsGetAsync (string clientId, string accessToken, string eventId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of sector for the given event.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> EventsEventIdSectorsGetAsyncWithHttpInfo (string clientId, string accessToken, string eventId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the details of a specific sector.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <param name="sectorId">Sector to search.</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> EventsEventIdSectorsSectorIdGetAsync (string clientId, string accessToken, string eventId, string sectorId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the details of a specific sector.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <param name="sectorId">Sector to search.</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> EventsEventIdSectorsSectorIdGetAsyncWithHttpInfo (string clientId, string accessToken, string eventId, string sectorId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of subcsectors for a given sector.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <param name="sectorId">Sector to search.</param>
        /// <returns>Task of List&lt;InlineResponse2002&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse2002>> EventsEventIdSectorsSectorIdSubsectorsGetAsync (string clientId, string accessToken, string eventId, string sectorId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of subcsectors for a given sector.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <param name="sectorId">Sector to search.</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2002&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2002>>> EventsEventIdSectorsSectorIdSubsectorsGetAsyncWithHttpInfo (string clientId, string accessToken, string eventId, string sectorId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of seat&#39;s information for each row of a given subsector.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <param name="sectorId">Sector to search.</param>
        /// <param name="subsectorId">Subsector to search.</param>
        /// <returns>Task of List&lt;InlineResponse2003&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse2003>> EventsEventIdSectorsSectorIdSubsectorsSubsectorIdGetAsync (string clientId, string accessToken, string eventId, string sectorId, string subsectorId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of seat&#39;s information for each row of a given subsector.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <param name="sectorId">Sector to search.</param>
        /// <param name="subsectorId">Subsector to search.</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2003&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2003>>> EventsEventIdSectorsSectorIdSubsectorsSubsectorIdGetAsyncWithHttpInfo (string clientId, string accessToken, string eventId, string sectorId, string subsectorId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of existing events.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <returns>Task of List&lt;InlineResponse200&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse200>> EventsGetAsync (string clientId, string accessToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of existing events.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse200&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse200>>> EventsGetAsyncWithHttpInfo (string clientId, string accessToken);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EventsApi : IEventsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EventsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Returns the details for a specific event.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 EventsEventIdGet (string clientId, string accessToken, string eventId)
        {
             ApiResponse<InlineResponse200> localVarResponse = EventsEventIdGetWithHttpInfo(clientId, accessToken, eventId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the details for a specific event.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > EventsEventIdGetWithHttpInfo (string clientId, string accessToken, string eventId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling EventsApi->EventsEventIdGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling EventsApi->EventsEventIdGet");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling EventsApi->EventsEventIdGet");

            var localVarPath = "/events/{eventId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (eventId != null) localVarPathParams.Add("eventId", Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EventsEventIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        ///  Returns the details for a specific event.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> EventsEventIdGetAsync (string clientId, string accessToken, string eventId)
        {
             ApiResponse<InlineResponse200> localVarResponse = await EventsEventIdGetAsyncWithHttpInfo(clientId, accessToken, eventId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the details for a specific event.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> EventsEventIdGetAsyncWithHttpInfo (string clientId, string accessToken, string eventId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling EventsApi->EventsEventIdGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling EventsApi->EventsEventIdGet");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling EventsApi->EventsEventIdGet");

            var localVarPath = "/events/{eventId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (eventId != null) localVarPathParams.Add("eventId", Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EventsEventIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        ///  Returns a list of sector for the given event.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 EventsEventIdSectorsGet (string clientId, string accessToken, string eventId)
        {
             ApiResponse<InlineResponse2001> localVarResponse = EventsEventIdSectorsGetWithHttpInfo(clientId, accessToken, eventId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of sector for the given event.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > EventsEventIdSectorsGetWithHttpInfo (string clientId, string accessToken, string eventId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling EventsApi->EventsEventIdSectorsGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling EventsApi->EventsEventIdSectorsGet");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling EventsApi->EventsEventIdSectorsGet");

            var localVarPath = "/events/{eventId}/sectors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (eventId != null) localVarPathParams.Add("eventId", Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EventsEventIdSectorsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        ///  Returns a list of sector for the given event.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> EventsEventIdSectorsGetAsync (string clientId, string accessToken, string eventId)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await EventsEventIdSectorsGetAsyncWithHttpInfo(clientId, accessToken, eventId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of sector for the given event.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> EventsEventIdSectorsGetAsyncWithHttpInfo (string clientId, string accessToken, string eventId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling EventsApi->EventsEventIdSectorsGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling EventsApi->EventsEventIdSectorsGet");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling EventsApi->EventsEventIdSectorsGet");

            var localVarPath = "/events/{eventId}/sectors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (eventId != null) localVarPathParams.Add("eventId", Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EventsEventIdSectorsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        ///  Returns the details of a specific sector.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <param name="sectorId">Sector to search.</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 EventsEventIdSectorsSectorIdGet (string clientId, string accessToken, string eventId, string sectorId)
        {
             ApiResponse<InlineResponse2002> localVarResponse = EventsEventIdSectorsSectorIdGetWithHttpInfo(clientId, accessToken, eventId, sectorId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the details of a specific sector.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <param name="sectorId">Sector to search.</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse< InlineResponse2002 > EventsEventIdSectorsSectorIdGetWithHttpInfo (string clientId, string accessToken, string eventId, string sectorId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling EventsApi->EventsEventIdSectorsSectorIdGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling EventsApi->EventsEventIdSectorsSectorIdGet");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling EventsApi->EventsEventIdSectorsSectorIdGet");
            // verify the required parameter 'sectorId' is set
            if (sectorId == null)
                throw new ApiException(400, "Missing required parameter 'sectorId' when calling EventsApi->EventsEventIdSectorsSectorIdGet");

            var localVarPath = "/events/{eventId}/sectors/{sectorId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (eventId != null) localVarPathParams.Add("eventId", Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (sectorId != null) localVarPathParams.Add("sectorId", Configuration.ApiClient.ParameterToString(sectorId)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EventsEventIdSectorsSectorIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
            
        }

        /// <summary>
        ///  Returns the details of a specific sector.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <param name="sectorId">Sector to search.</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> EventsEventIdSectorsSectorIdGetAsync (string clientId, string accessToken, string eventId, string sectorId)
        {
             ApiResponse<InlineResponse2002> localVarResponse = await EventsEventIdSectorsSectorIdGetAsyncWithHttpInfo(clientId, accessToken, eventId, sectorId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the details of a specific sector.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <param name="sectorId">Sector to search.</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> EventsEventIdSectorsSectorIdGetAsyncWithHttpInfo (string clientId, string accessToken, string eventId, string sectorId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling EventsApi->EventsEventIdSectorsSectorIdGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling EventsApi->EventsEventIdSectorsSectorIdGet");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling EventsApi->EventsEventIdSectorsSectorIdGet");
            // verify the required parameter 'sectorId' is set
            if (sectorId == null)
                throw new ApiException(400, "Missing required parameter 'sectorId' when calling EventsApi->EventsEventIdSectorsSectorIdGet");

            var localVarPath = "/events/{eventId}/sectors/{sectorId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (eventId != null) localVarPathParams.Add("eventId", Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (sectorId != null) localVarPathParams.Add("sectorId", Configuration.ApiClient.ParameterToString(sectorId)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EventsEventIdSectorsSectorIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
            
        }

        /// <summary>
        ///  Returns a list of subcsectors for a given sector.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <param name="sectorId">Sector to search.</param>
        /// <returns>List&lt;InlineResponse2002&gt;</returns>
        public List<InlineResponse2002> EventsEventIdSectorsSectorIdSubsectorsGet (string clientId, string accessToken, string eventId, string sectorId)
        {
             ApiResponse<List<InlineResponse2002>> localVarResponse = EventsEventIdSectorsSectorIdSubsectorsGetWithHttpInfo(clientId, accessToken, eventId, sectorId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of subcsectors for a given sector.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <param name="sectorId">Sector to search.</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2002&gt;</returns>
        public ApiResponse< List<InlineResponse2002> > EventsEventIdSectorsSectorIdSubsectorsGetWithHttpInfo (string clientId, string accessToken, string eventId, string sectorId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling EventsApi->EventsEventIdSectorsSectorIdSubsectorsGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling EventsApi->EventsEventIdSectorsSectorIdSubsectorsGet");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling EventsApi->EventsEventIdSectorsSectorIdSubsectorsGet");
            // verify the required parameter 'sectorId' is set
            if (sectorId == null)
                throw new ApiException(400, "Missing required parameter 'sectorId' when calling EventsApi->EventsEventIdSectorsSectorIdSubsectorsGet");

            var localVarPath = "/events/{eventId}/sectors/{sectorId}/subsectors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (eventId != null) localVarPathParams.Add("eventId", Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (sectorId != null) localVarPathParams.Add("sectorId", Configuration.ApiClient.ParameterToString(sectorId)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EventsEventIdSectorsSectorIdSubsectorsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2002>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse2002>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2002>)));
            
        }

        /// <summary>
        ///  Returns a list of subcsectors for a given sector.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <param name="sectorId">Sector to search.</param>
        /// <returns>Task of List&lt;InlineResponse2002&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse2002>> EventsEventIdSectorsSectorIdSubsectorsGetAsync (string clientId, string accessToken, string eventId, string sectorId)
        {
             ApiResponse<List<InlineResponse2002>> localVarResponse = await EventsEventIdSectorsSectorIdSubsectorsGetAsyncWithHttpInfo(clientId, accessToken, eventId, sectorId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of subcsectors for a given sector.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <param name="sectorId">Sector to search.</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2002&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2002>>> EventsEventIdSectorsSectorIdSubsectorsGetAsyncWithHttpInfo (string clientId, string accessToken, string eventId, string sectorId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling EventsApi->EventsEventIdSectorsSectorIdSubsectorsGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling EventsApi->EventsEventIdSectorsSectorIdSubsectorsGet");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling EventsApi->EventsEventIdSectorsSectorIdSubsectorsGet");
            // verify the required parameter 'sectorId' is set
            if (sectorId == null)
                throw new ApiException(400, "Missing required parameter 'sectorId' when calling EventsApi->EventsEventIdSectorsSectorIdSubsectorsGet");

            var localVarPath = "/events/{eventId}/sectors/{sectorId}/subsectors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (eventId != null) localVarPathParams.Add("eventId", Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (sectorId != null) localVarPathParams.Add("sectorId", Configuration.ApiClient.ParameterToString(sectorId)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EventsEventIdSectorsSectorIdSubsectorsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2002>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse2002>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2002>)));
            
        }

        /// <summary>
        ///  Returns a list of seat&#39;s information for each row of a given subsector.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <param name="sectorId">Sector to search.</param>
        /// <param name="subsectorId">Subsector to search.</param>
        /// <returns>List&lt;InlineResponse2003&gt;</returns>
        public List<InlineResponse2003> EventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet (string clientId, string accessToken, string eventId, string sectorId, string subsectorId)
        {
             ApiResponse<List<InlineResponse2003>> localVarResponse = EventsEventIdSectorsSectorIdSubsectorsSubsectorIdGetWithHttpInfo(clientId, accessToken, eventId, sectorId, subsectorId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of seat&#39;s information for each row of a given subsector.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <param name="sectorId">Sector to search.</param>
        /// <param name="subsectorId">Subsector to search.</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2003&gt;</returns>
        public ApiResponse< List<InlineResponse2003> > EventsEventIdSectorsSectorIdSubsectorsSubsectorIdGetWithHttpInfo (string clientId, string accessToken, string eventId, string sectorId, string subsectorId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling EventsApi->EventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling EventsApi->EventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling EventsApi->EventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet");
            // verify the required parameter 'sectorId' is set
            if (sectorId == null)
                throw new ApiException(400, "Missing required parameter 'sectorId' when calling EventsApi->EventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet");
            // verify the required parameter 'subsectorId' is set
            if (subsectorId == null)
                throw new ApiException(400, "Missing required parameter 'subsectorId' when calling EventsApi->EventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet");

            var localVarPath = "/events/{eventId}/sectors/{sectorId}/subsectors/{subsectorId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (eventId != null) localVarPathParams.Add("eventId", Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (sectorId != null) localVarPathParams.Add("sectorId", Configuration.ApiClient.ParameterToString(sectorId)); // path parameter
            if (subsectorId != null) localVarPathParams.Add("subsectorId", Configuration.ApiClient.ParameterToString(subsectorId)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2003>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse2003>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2003>)));
            
        }

        /// <summary>
        ///  Returns a list of seat&#39;s information for each row of a given subsector.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <param name="sectorId">Sector to search.</param>
        /// <param name="subsectorId">Subsector to search.</param>
        /// <returns>Task of List&lt;InlineResponse2003&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse2003>> EventsEventIdSectorsSectorIdSubsectorsSubsectorIdGetAsync (string clientId, string accessToken, string eventId, string sectorId, string subsectorId)
        {
             ApiResponse<List<InlineResponse2003>> localVarResponse = await EventsEventIdSectorsSectorIdSubsectorsSubsectorIdGetAsyncWithHttpInfo(clientId, accessToken, eventId, sectorId, subsectorId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of seat&#39;s information for each row of a given subsector.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <param name="eventId">Event to search.</param>
        /// <param name="sectorId">Sector to search.</param>
        /// <param name="subsectorId">Subsector to search.</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2003&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2003>>> EventsEventIdSectorsSectorIdSubsectorsSubsectorIdGetAsyncWithHttpInfo (string clientId, string accessToken, string eventId, string sectorId, string subsectorId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling EventsApi->EventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling EventsApi->EventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling EventsApi->EventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet");
            // verify the required parameter 'sectorId' is set
            if (sectorId == null)
                throw new ApiException(400, "Missing required parameter 'sectorId' when calling EventsApi->EventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet");
            // verify the required parameter 'subsectorId' is set
            if (subsectorId == null)
                throw new ApiException(400, "Missing required parameter 'subsectorId' when calling EventsApi->EventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet");

            var localVarPath = "/events/{eventId}/sectors/{sectorId}/subsectors/{subsectorId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (eventId != null) localVarPathParams.Add("eventId", Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (sectorId != null) localVarPathParams.Add("sectorId", Configuration.ApiClient.ParameterToString(sectorId)); // path parameter
            if (subsectorId != null) localVarPathParams.Add("subsectorId", Configuration.ApiClient.ParameterToString(subsectorId)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EventsEventIdSectorsSectorIdSubsectorsSubsectorIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2003>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse2003>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2003>)));
            
        }

        /// <summary>
        ///  Returns a list of existing events.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <returns>List&lt;InlineResponse200&gt;</returns>
        public List<InlineResponse200> EventsGet (string clientId, string accessToken)
        {
             ApiResponse<List<InlineResponse200>> localVarResponse = EventsGetWithHttpInfo(clientId, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of existing events.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <returns>ApiResponse of List&lt;InlineResponse200&gt;</returns>
        public ApiResponse< List<InlineResponse200> > EventsGetWithHttpInfo (string clientId, string accessToken)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling EventsApi->EventsGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling EventsApi->EventsGet");

            var localVarPath = "/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EventsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse200>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse200>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse200>)));
            
        }

        /// <summary>
        ///  Returns a list of existing events.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <returns>Task of List&lt;InlineResponse200&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse200>> EventsGetAsync (string clientId, string accessToken)
        {
             ApiResponse<List<InlineResponse200>> localVarResponse = await EventsGetAsyncWithHttpInfo(clientId, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of existing events.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Customer identifier used for authentication.</param>
        /// <param name="accessToken">Access token used in the authentication.</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse200&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse200>>> EventsGetAsyncWithHttpInfo (string clientId, string accessToken)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling EventsApi->EventsGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling EventsApi->EventsGet");

            var localVarPath = "/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EventsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse200>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse200>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse200>)));
            
        }

    }
}
