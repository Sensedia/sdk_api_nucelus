# coding: utf-8

"""
    API Agillitas Cartões Pré-pagos

    API para manipular recursos relacionadas à cartões pré-pagos Agillitas.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DetalhamentoExtrato(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, data_hora=None, estabelecimento=None, tipo=None, valor=None):
        """
        DetalhamentoExtrato - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'data_hora': 'str',
            'estabelecimento': 'str',
            'tipo': 'str',
            'valor': 'float'
        }

        self.attribute_map = {
            'data_hora': 'dataHora',
            'estabelecimento': 'estabelecimento',
            'tipo': 'tipo',
            'valor': 'valor'
        }

        self._data_hora = data_hora
        self._estabelecimento = estabelecimento
        self._tipo = tipo
        self._valor = valor

    @property
    def data_hora(self):
        """
        Gets the data_hora of this DetalhamentoExtrato.
        Data e hora da transação do cartão.

        :return: The data_hora of this DetalhamentoExtrato.
        :rtype: str
        """
        return self._data_hora

    @data_hora.setter
    def data_hora(self, data_hora):
        """
        Sets the data_hora of this DetalhamentoExtrato.
        Data e hora da transação do cartão.

        :param data_hora: The data_hora of this DetalhamentoExtrato.
        :type: str
        """

        self._data_hora = data_hora

    @property
    def estabelecimento(self):
        """
        Gets the estabelecimento of this DetalhamentoExtrato.
        Estabelecimento onde ocorreu a transação do cartão.

        :return: The estabelecimento of this DetalhamentoExtrato.
        :rtype: str
        """
        return self._estabelecimento

    @estabelecimento.setter
    def estabelecimento(self, estabelecimento):
        """
        Sets the estabelecimento of this DetalhamentoExtrato.
        Estabelecimento onde ocorreu a transação do cartão.

        :param estabelecimento: The estabelecimento of this DetalhamentoExtrato.
        :type: str
        """

        self._estabelecimento = estabelecimento

    @property
    def tipo(self):
        """
        Gets the tipo of this DetalhamentoExtrato.
        Tipo da transação do cartão.

        :return: The tipo of this DetalhamentoExtrato.
        :rtype: str
        """
        return self._tipo

    @tipo.setter
    def tipo(self, tipo):
        """
        Sets the tipo of this DetalhamentoExtrato.
        Tipo da transação do cartão.

        :param tipo: The tipo of this DetalhamentoExtrato.
        :type: str
        """

        self._tipo = tipo

    @property
    def valor(self):
        """
        Gets the valor of this DetalhamentoExtrato.
        Valor monetário da transação do cartão.

        :return: The valor of this DetalhamentoExtrato.
        :rtype: float
        """
        return self._valor

    @valor.setter
    def valor(self, valor):
        """
        Sets the valor of this DetalhamentoExtrato.
        Valor monetário da transação do cartão.

        :param valor: The valor of this DetalhamentoExtrato.
        :type: float
        """

        self._valor = valor

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
