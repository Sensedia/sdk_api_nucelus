# coding: utf-8

"""
    API Agillitas Cartões Pré-pagos

    API para manipular recursos relacionadas à cartões pré-pagos Agillitas.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class NovoCartaoPortador(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, nome=None, sobrenome=None, data_nascimento=None, cpf=None, contato=None, endereco=None):
        """
        NovoCartaoPortador - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'nome': 'str',
            'sobrenome': 'str',
            'data_nascimento': 'date',
            'cpf': 'float',
            'contato': 'NovoCartaoPortadorContato',
            'endereco': 'NovoCartaoPortadorEndereco'
        }

        self.attribute_map = {
            'nome': 'nome',
            'sobrenome': 'sobrenome',
            'data_nascimento': 'dataNascimento',
            'cpf': 'cpf',
            'contato': 'contato',
            'endereco': 'endereco'
        }

        self._nome = nome
        self._sobrenome = sobrenome
        self._data_nascimento = data_nascimento
        self._cpf = cpf
        self._contato = contato
        self._endereco = endereco

    @property
    def nome(self):
        """
        Gets the nome of this NovoCartaoPortador.
        Nome do portador do cartão.

        :return: The nome of this NovoCartaoPortador.
        :rtype: str
        """
        return self._nome

    @nome.setter
    def nome(self, nome):
        """
        Sets the nome of this NovoCartaoPortador.
        Nome do portador do cartão.

        :param nome: The nome of this NovoCartaoPortador.
        :type: str
        """

        self._nome = nome

    @property
    def sobrenome(self):
        """
        Gets the sobrenome of this NovoCartaoPortador.
        Sobrenome do portador do cartão.

        :return: The sobrenome of this NovoCartaoPortador.
        :rtype: str
        """
        return self._sobrenome

    @sobrenome.setter
    def sobrenome(self, sobrenome):
        """
        Sets the sobrenome of this NovoCartaoPortador.
        Sobrenome do portador do cartão.

        :param sobrenome: The sobrenome of this NovoCartaoPortador.
        :type: str
        """

        self._sobrenome = sobrenome

    @property
    def data_nascimento(self):
        """
        Gets the data_nascimento of this NovoCartaoPortador.
        Data de nascimento do portador do cartão.

        :return: The data_nascimento of this NovoCartaoPortador.
        :rtype: date
        """
        return self._data_nascimento

    @data_nascimento.setter
    def data_nascimento(self, data_nascimento):
        """
        Sets the data_nascimento of this NovoCartaoPortador.
        Data de nascimento do portador do cartão.

        :param data_nascimento: The data_nascimento of this NovoCartaoPortador.
        :type: date
        """

        self._data_nascimento = data_nascimento

    @property
    def cpf(self):
        """
        Gets the cpf of this NovoCartaoPortador.
        Numero do cadastro de pessoas física do portador.

        :return: The cpf of this NovoCartaoPortador.
        :rtype: float
        """
        return self._cpf

    @cpf.setter
    def cpf(self, cpf):
        """
        Sets the cpf of this NovoCartaoPortador.
        Numero do cadastro de pessoas física do portador.

        :param cpf: The cpf of this NovoCartaoPortador.
        :type: float
        """

        self._cpf = cpf

    @property
    def contato(self):
        """
        Gets the contato of this NovoCartaoPortador.

        :return: The contato of this NovoCartaoPortador.
        :rtype: NovoCartaoPortadorContato
        """
        return self._contato

    @contato.setter
    def contato(self, contato):
        """
        Sets the contato of this NovoCartaoPortador.

        :param contato: The contato of this NovoCartaoPortador.
        :type: NovoCartaoPortadorContato
        """

        self._contato = contato

    @property
    def endereco(self):
        """
        Gets the endereco of this NovoCartaoPortador.

        :return: The endereco of this NovoCartaoPortador.
        :rtype: NovoCartaoPortadorEndereco
        """
        return self._endereco

    @endereco.setter
    def endereco(self, endereco):
        """
        Sets the endereco of this NovoCartaoPortador.

        :param endereco: The endereco of this NovoCartaoPortador.
        :type: NovoCartaoPortadorEndereco
        """

        self._endereco = endereco

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
