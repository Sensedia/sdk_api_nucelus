# coding: utf-8

"""
    API Agillitas Cartões Pré-pagos

    API para manipular recursos relacionadas à cartões pré-pagos Agillitas.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class NovoCartaoPortadorEndereco(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, logradouro=None, complemento=None, cidade=None, estado=None, pais=None, codigo_postal=None):
        """
        NovoCartaoPortadorEndereco - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'logradouro': 'str',
            'complemento': 'str',
            'cidade': 'str',
            'estado': 'str',
            'pais': 'str',
            'codigo_postal': 'str'
        }

        self.attribute_map = {
            'logradouro': 'logradouro',
            'complemento': 'complemento',
            'cidade': 'cidade',
            'estado': 'estado',
            'pais': 'pais',
            'codigo_postal': 'codigoPostal'
        }

        self._logradouro = logradouro
        self._complemento = complemento
        self._cidade = cidade
        self._estado = estado
        self._pais = pais
        self._codigo_postal = codigo_postal

    @property
    def logradouro(self):
        """
        Gets the logradouro of this NovoCartaoPortadorEndereco.
        Nome endereço do portador do cartão.

        :return: The logradouro of this NovoCartaoPortadorEndereco.
        :rtype: str
        """
        return self._logradouro

    @logradouro.setter
    def logradouro(self, logradouro):
        """
        Sets the logradouro of this NovoCartaoPortadorEndereco.
        Nome endereço do portador do cartão.

        :param logradouro: The logradouro of this NovoCartaoPortadorEndereco.
        :type: str
        """

        self._logradouro = logradouro

    @property
    def complemento(self):
        """
        Gets the complemento of this NovoCartaoPortadorEndereco.
        Complemento do logradouro do portador do cartão.

        :return: The complemento of this NovoCartaoPortadorEndereco.
        :rtype: str
        """
        return self._complemento

    @complemento.setter
    def complemento(self, complemento):
        """
        Sets the complemento of this NovoCartaoPortadorEndereco.
        Complemento do logradouro do portador do cartão.

        :param complemento: The complemento of this NovoCartaoPortadorEndereco.
        :type: str
        """

        self._complemento = complemento

    @property
    def cidade(self):
        """
        Gets the cidade of this NovoCartaoPortadorEndereco.
        Nome cidade do portador do cartão.

        :return: The cidade of this NovoCartaoPortadorEndereco.
        :rtype: str
        """
        return self._cidade

    @cidade.setter
    def cidade(self, cidade):
        """
        Sets the cidade of this NovoCartaoPortadorEndereco.
        Nome cidade do portador do cartão.

        :param cidade: The cidade of this NovoCartaoPortadorEndereco.
        :type: str
        """

        self._cidade = cidade

    @property
    def estado(self):
        """
        Gets the estado of this NovoCartaoPortadorEndereco.
        Sigla do estado do portador do cartão.

        :return: The estado of this NovoCartaoPortadorEndereco.
        :rtype: str
        """
        return self._estado

    @estado.setter
    def estado(self, estado):
        """
        Sets the estado of this NovoCartaoPortadorEndereco.
        Sigla do estado do portador do cartão.

        :param estado: The estado of this NovoCartaoPortadorEndereco.
        :type: str
        """

        self._estado = estado

    @property
    def pais(self):
        """
        Gets the pais of this NovoCartaoPortadorEndereco.
        Nome do pais do portador do cartão.

        :return: The pais of this NovoCartaoPortadorEndereco.
        :rtype: str
        """
        return self._pais

    @pais.setter
    def pais(self, pais):
        """
        Sets the pais of this NovoCartaoPortadorEndereco.
        Nome do pais do portador do cartão.

        :param pais: The pais of this NovoCartaoPortadorEndereco.
        :type: str
        """

        self._pais = pais

    @property
    def codigo_postal(self):
        """
        Gets the codigo_postal of this NovoCartaoPortadorEndereco.
        Código de endereçamento postal do portador do cartão.

        :return: The codigo_postal of this NovoCartaoPortadorEndereco.
        :rtype: str
        """
        return self._codigo_postal

    @codigo_postal.setter
    def codigo_postal(self, codigo_postal):
        """
        Sets the codigo_postal of this NovoCartaoPortadorEndereco.
        Código de endereçamento postal do portador do cartão.

        :param codigo_postal: The codigo_postal of this NovoCartaoPortadorEndereco.
        :type: str
        """

        self._codigo_postal = codigo_postal

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
