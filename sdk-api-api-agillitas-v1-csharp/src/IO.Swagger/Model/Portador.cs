/* 
 * API Agillitas Cartões Pré-pagos
 *
 * API para manipular recursos relacionadas à cartões pré-pagos Agillitas.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Portador
    /// </summary>
    [DataContract]
    public partial class Portador :  IEquatable<Portador>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Portador" /> class.
        /// </summary>
        /// <param name="Nome">Nome do portador do cartão..</param>
        /// <param name="Email">Endereço de e-mail do portador do cartão..</param>
        /// <param name="Celular">Numero do telefone celular do portador do cartão..</param>
        /// <param name="Endereco">Endereco.</param>
        public Portador(string Nome = default(string), string Email = default(string), decimal? Celular = default(decimal?), EnderecoPortador Endereco = default(EnderecoPortador))
        {
            this.Nome = Nome;
            this.Email = Email;
            this.Celular = Celular;
            this.Endereco = Endereco;
        }
        
        /// <summary>
        /// Nome do portador do cartão.
        /// </summary>
        /// <value>Nome do portador do cartão.</value>
        [DataMember(Name="nome", EmitDefaultValue=false)]
        public string Nome { get; set; }
        /// <summary>
        /// Endereço de e-mail do portador do cartão.
        /// </summary>
        /// <value>Endereço de e-mail do portador do cartão.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// Numero do telefone celular do portador do cartão.
        /// </summary>
        /// <value>Numero do telefone celular do portador do cartão.</value>
        [DataMember(Name="celular", EmitDefaultValue=false)]
        public decimal? Celular { get; set; }
        /// <summary>
        /// Gets or Sets Endereco
        /// </summary>
        [DataMember(Name="endereco", EmitDefaultValue=false)]
        public EnderecoPortador Endereco { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Portador {\n");
            sb.Append("  Nome: ").Append(Nome).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Celular: ").Append(Celular).Append("\n");
            sb.Append("  Endereco: ").Append(Endereco).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Portador);
        }

        /// <summary>
        /// Returns true if Portador instances are equal
        /// </summary>
        /// <param name="other">Instance of Portador to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Portador other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Nome == other.Nome ||
                    this.Nome != null &&
                    this.Nome.Equals(other.Nome)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.Celular == other.Celular ||
                    this.Celular != null &&
                    this.Celular.Equals(other.Celular)
                ) && 
                (
                    this.Endereco == other.Endereco ||
                    this.Endereco != null &&
                    this.Endereco.Equals(other.Endereco)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Nome != null)
                    hash = hash * 59 + this.Nome.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.Celular != null)
                    hash = hash * 59 + this.Celular.GetHashCode();
                if (this.Endereco != null)
                    hash = hash * 59 + this.Endereco.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
