/* 
 * API Agillitas Cartões Pré-pagos
 *
 * API para manipular recursos relacionadas à cartões pré-pagos Agillitas.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DetalhamentoExtrato
    /// </summary>
    [DataContract]
    public partial class DetalhamentoExtrato :  IEquatable<DetalhamentoExtrato>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DetalhamentoExtrato" /> class.
        /// </summary>
        /// <param name="DataHora">Data e hora da transação do cartão..</param>
        /// <param name="Estabelecimento">Estabelecimento onde ocorreu a transação do cartão..</param>
        /// <param name="Tipo">Tipo da transação do cartão..</param>
        /// <param name="Valor">Valor monetário da transação do cartão..</param>
        public DetalhamentoExtrato(string DataHora = default(string), string Estabelecimento = default(string), string Tipo = default(string), double? Valor = default(double?))
        {
            this.DataHora = DataHora;
            this.Estabelecimento = Estabelecimento;
            this.Tipo = Tipo;
            this.Valor = Valor;
        }
        
        /// <summary>
        /// Data e hora da transação do cartão.
        /// </summary>
        /// <value>Data e hora da transação do cartão.</value>
        [DataMember(Name="dataHora", EmitDefaultValue=false)]
        public string DataHora { get; set; }
        /// <summary>
        /// Estabelecimento onde ocorreu a transação do cartão.
        /// </summary>
        /// <value>Estabelecimento onde ocorreu a transação do cartão.</value>
        [DataMember(Name="estabelecimento", EmitDefaultValue=false)]
        public string Estabelecimento { get; set; }
        /// <summary>
        /// Tipo da transação do cartão.
        /// </summary>
        /// <value>Tipo da transação do cartão.</value>
        [DataMember(Name="tipo", EmitDefaultValue=false)]
        public string Tipo { get; set; }
        /// <summary>
        /// Valor monetário da transação do cartão.
        /// </summary>
        /// <value>Valor monetário da transação do cartão.</value>
        [DataMember(Name="valor", EmitDefaultValue=false)]
        public double? Valor { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DetalhamentoExtrato {\n");
            sb.Append("  DataHora: ").Append(DataHora).Append("\n");
            sb.Append("  Estabelecimento: ").Append(Estabelecimento).Append("\n");
            sb.Append("  Tipo: ").Append(Tipo).Append("\n");
            sb.Append("  Valor: ").Append(Valor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DetalhamentoExtrato);
        }

        /// <summary>
        /// Returns true if DetalhamentoExtrato instances are equal
        /// </summary>
        /// <param name="other">Instance of DetalhamentoExtrato to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DetalhamentoExtrato other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DataHora == other.DataHora ||
                    this.DataHora != null &&
                    this.DataHora.Equals(other.DataHora)
                ) && 
                (
                    this.Estabelecimento == other.Estabelecimento ||
                    this.Estabelecimento != null &&
                    this.Estabelecimento.Equals(other.Estabelecimento)
                ) && 
                (
                    this.Tipo == other.Tipo ||
                    this.Tipo != null &&
                    this.Tipo.Equals(other.Tipo)
                ) && 
                (
                    this.Valor == other.Valor ||
                    this.Valor != null &&
                    this.Valor.Equals(other.Valor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DataHora != null)
                    hash = hash * 59 + this.DataHora.GetHashCode();
                if (this.Estabelecimento != null)
                    hash = hash * 59 + this.Estabelecimento.GetHashCode();
                if (this.Tipo != null)
                    hash = hash * 59 + this.Tipo.GetHashCode();
                if (this.Valor != null)
                    hash = hash * 59 + this.Valor.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
