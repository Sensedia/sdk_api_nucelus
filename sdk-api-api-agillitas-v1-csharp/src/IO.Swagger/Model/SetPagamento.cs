/* 
 * API Agillitas Cartões Pré-pagos
 *
 * API para manipular recursos relacionadas à cartões pré-pagos Agillitas.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SetPagamento
    /// </summary>
    [DataContract]
    public partial class SetPagamento :  IEquatable<SetPagamento>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetPagamento" /> class.
        /// </summary>
        /// <param name="IdCartao">Número identificador referente ao proxy do cartão..</param>
        /// <param name="Senha">Senha do cartão..</param>
        /// <param name="CodigoBarras">Código de pagamento identificado no documento (boleto)..</param>
        public SetPagamento(string IdCartao = default(string), string Senha = default(string), string CodigoBarras = default(string))
        {
            this.IdCartao = IdCartao;
            this.Senha = Senha;
            this.CodigoBarras = CodigoBarras;
        }
        
        /// <summary>
        /// Número identificador referente ao proxy do cartão.
        /// </summary>
        /// <value>Número identificador referente ao proxy do cartão.</value>
        [DataMember(Name="idCartao", EmitDefaultValue=false)]
        public string IdCartao { get; set; }
        /// <summary>
        /// Senha do cartão.
        /// </summary>
        /// <value>Senha do cartão.</value>
        [DataMember(Name="senha", EmitDefaultValue=false)]
        public string Senha { get; set; }
        /// <summary>
        /// Código de pagamento identificado no documento (boleto).
        /// </summary>
        /// <value>Código de pagamento identificado no documento (boleto).</value>
        [DataMember(Name="codigoBarras", EmitDefaultValue=false)]
        public string CodigoBarras { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SetPagamento {\n");
            sb.Append("  IdCartao: ").Append(IdCartao).Append("\n");
            sb.Append("  Senha: ").Append(Senha).Append("\n");
            sb.Append("  CodigoBarras: ").Append(CodigoBarras).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SetPagamento);
        }

        /// <summary>
        /// Returns true if SetPagamento instances are equal
        /// </summary>
        /// <param name="other">Instance of SetPagamento to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SetPagamento other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.IdCartao == other.IdCartao ||
                    this.IdCartao != null &&
                    this.IdCartao.Equals(other.IdCartao)
                ) && 
                (
                    this.Senha == other.Senha ||
                    this.Senha != null &&
                    this.Senha.Equals(other.Senha)
                ) && 
                (
                    this.CodigoBarras == other.CodigoBarras ||
                    this.CodigoBarras != null &&
                    this.CodigoBarras.Equals(other.CodigoBarras)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.IdCartao != null)
                    hash = hash * 59 + this.IdCartao.GetHashCode();
                if (this.Senha != null)
                    hash = hash * 59 + this.Senha.GetHashCode();
                if (this.CodigoBarras != null)
                    hash = hash * 59 + this.CodigoBarras.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
