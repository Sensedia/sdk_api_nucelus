/* 
 * API Agillitas Cartões Pré-pagos
 *
 * API para manipular recursos relacionadas à cartões pré-pagos Agillitas.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SetCardStatus
    /// </summary>
    [DataContract]
    public partial class SetCardStatus :  IEquatable<SetCardStatus>, IValidatableObject
    {
        /// <summary>
        /// Novo status do cartão para o qual se deseja alterar
        /// </summary>
        /// <value>Novo status do cartão para o qual se deseja alterar</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Bloqueado for "bloqueado"
            /// </summary>
            [EnumMember(Value = "bloqueado")]
            Bloqueado,
            
            /// <summary>
            /// Enum Desbloqueado for "desbloqueado"
            /// </summary>
            [EnumMember(Value = "desbloqueado")]
            Desbloqueado
        }

        /// <summary>
        /// Novo status do cartão para o qual se deseja alterar
        /// </summary>
        /// <value>Novo status do cartão para o qual se deseja alterar</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SetCardStatus" /> class.
        /// </summary>
        /// <param name="Status">Novo status do cartão para o qual se deseja alterar (default to &quot;desbloqueado&quot;).</param>
        public SetCardStatus(StatusEnum? Status = "desbloqueado")
        {
            // use default value if no "Status" provided
            if (Status == null)
            {
                this.Status = "desbloqueado";
            }
            else
            {
                this.Status = Status;
            }
        }
        
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SetCardStatus {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SetCardStatus);
        }

        /// <summary>
        /// Returns true if SetCardStatus instances are equal
        /// </summary>
        /// <param name="other">Instance of SetCardStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SetCardStatus other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
