/* 
 * API Agillitas Cartões Pré-pagos
 *
 * API para manipular recursos relacionadas à cartões pré-pagos Agillitas.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CadastroBenificiario
    /// </summary>
    [DataContract]
    public partial class CadastroBenificiario :  IEquatable<CadastroBenificiario>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CadastroBenificiario" /> class.
        /// </summary>
        /// <param name="IdCartao">Número identificador referente ao proxy do cartão origem de transferência..</param>
        /// <param name="IdCartaoDestino">Número identificador referente ao proxy do cartão destino de transferência..</param>
        /// <param name="Nome">Nome completo do beneficiário da transferência..</param>
        /// <param name="Cpf">Numero do cadastro de pessoas física do beneficiário da transferência..</param>
        public CadastroBenificiario(decimal? IdCartao = default(decimal?), decimal? IdCartaoDestino = default(decimal?), string Nome = default(string), decimal? Cpf = default(decimal?))
        {
            this.IdCartao = IdCartao;
            this.IdCartaoDestino = IdCartaoDestino;
            this.Nome = Nome;
            this.Cpf = Cpf;
        }
        
        /// <summary>
        /// Número identificador referente ao proxy do cartão origem de transferência.
        /// </summary>
        /// <value>Número identificador referente ao proxy do cartão origem de transferência.</value>
        [DataMember(Name="idCartao", EmitDefaultValue=false)]
        public decimal? IdCartao { get; set; }
        /// <summary>
        /// Número identificador referente ao proxy do cartão destino de transferência.
        /// </summary>
        /// <value>Número identificador referente ao proxy do cartão destino de transferência.</value>
        [DataMember(Name="idCartaoDestino", EmitDefaultValue=false)]
        public decimal? IdCartaoDestino { get; set; }
        /// <summary>
        /// Nome completo do beneficiário da transferência.
        /// </summary>
        /// <value>Nome completo do beneficiário da transferência.</value>
        [DataMember(Name="nome", EmitDefaultValue=false)]
        public string Nome { get; set; }
        /// <summary>
        /// Numero do cadastro de pessoas física do beneficiário da transferência.
        /// </summary>
        /// <value>Numero do cadastro de pessoas física do beneficiário da transferência.</value>
        [DataMember(Name="cpf", EmitDefaultValue=false)]
        public decimal? Cpf { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CadastroBenificiario {\n");
            sb.Append("  IdCartao: ").Append(IdCartao).Append("\n");
            sb.Append("  IdCartaoDestino: ").Append(IdCartaoDestino).Append("\n");
            sb.Append("  Nome: ").Append(Nome).Append("\n");
            sb.Append("  Cpf: ").Append(Cpf).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CadastroBenificiario);
        }

        /// <summary>
        /// Returns true if CadastroBenificiario instances are equal
        /// </summary>
        /// <param name="other">Instance of CadastroBenificiario to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CadastroBenificiario other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.IdCartao == other.IdCartao ||
                    this.IdCartao != null &&
                    this.IdCartao.Equals(other.IdCartao)
                ) && 
                (
                    this.IdCartaoDestino == other.IdCartaoDestino ||
                    this.IdCartaoDestino != null &&
                    this.IdCartaoDestino.Equals(other.IdCartaoDestino)
                ) && 
                (
                    this.Nome == other.Nome ||
                    this.Nome != null &&
                    this.Nome.Equals(other.Nome)
                ) && 
                (
                    this.Cpf == other.Cpf ||
                    this.Cpf != null &&
                    this.Cpf.Equals(other.Cpf)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.IdCartao != null)
                    hash = hash * 59 + this.IdCartao.GetHashCode();
                if (this.IdCartaoDestino != null)
                    hash = hash * 59 + this.IdCartaoDestino.GetHashCode();
                if (this.Nome != null)
                    hash = hash * 59 + this.Nome.GetHashCode();
                if (this.Cpf != null)
                    hash = hash * 59 + this.Cpf.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
